
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Сервис доставки".
// ОбщийМодуль.СервисДоставкиПереопределяемый.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ЗаполнениеПараметровОтбора

// Заполняет параметры отбора для формы выбора адреса организации.
//
// Параметры:
//  ПараметрыОтбора - Структура - параметры отбора для формы выбора.
//  Организация     - ОпределяемыйТип.ОрганизацияСервисДоставки - ссылка на организацию.
//
Процедура ЗаполнитьПараметрыОтбораАдресаОрганизации(ПараметрыОтбора, Организация) Экспорт
	
КонецПроцедуры

// Заполняет параметры отбора для формы выбора адреса контрагента.
//
// Параметры:
//  ПараметрыОтбора - Структура - параметры отбора для формы выбора.
//  Контрагент      - ОпределяемыйТип.КонтрагентСервисДоставки - ссылка на контрагента.
//
Процедура ЗаполнитьПараметрыОтбораАдресаКонтрагента(ПараметрыОтбора, Контрагент) Экспорт
	
	ПараметрыОтбора.Вставить("Контрагент", Контрагент);
	
КонецПроцедуры

// Заполняет параметры отбора для формы выбора контактного лица организации.
//
// Параметры:
//  ПараметрыОтбора - Структура - параметры отбора для формы выбора.
//  Организация     - ОпределяемыйТип.ОрганизацияСервисДоставки - ссылка на организацию.
//
Процедура ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора, Организация) Экспорт
	
КонецПроцедуры

// Заполняет параметры отбора для формы выбора контактного лица контрагента.
//
// Параметры:
//  ПараметрыОтбора - Структура - параметры отбора для формы выбора.
//  Контрагент      - ОпределяемыйТип.КонтрагентСервисДоставки - ссылка на контрагента.
//
Процедура ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора, Контрагент) Экспорт
	
	Партнер = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, Новый Структура("Партнер")).Партнер;
	СписокПартнеров = ПартнерыИКонтрагенты.ПолучитьНижестоящихПартнеров(Партнер);
	
	ПараметрыОтбора.Вставить("Владелец", СписокПартнеров);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПараметровДаннымиИзУчетнойСистемы

// Заполняет параметры заказа на доставку данными из объекта-основания заказа.
//
// Параметры:
//  Параметры - Структура - см. СервисДоставки.НовыйПараметрыЗаказаНаДоставку()
//
Процедура ЗаполнитьПараметрыЗаказаНаДоставку(Параметры) Экспорт
	
	ДокументыОснования = Параметры.ДокументыОснования;
	
	Если ДокументыОснования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонЗапросаШапка =
	"ВЫБРАТЬ
	|Т.Ссылка КАК ДокументОснование,
	|ОрганизацииБизнесСеть.Организация КАК ОрганизацияБизнесСетиСсылка,
	|ОрганизацииБизнесСеть.Идентификатор КАК ОрганизацияБизнесСетиИдентификатор,
	|0 КАК ФормаОплаты,
	|NULL КАК ГрузоперевозчикСсылка,
	|"""" КАК ГрузоперевозчикИдентификатор,
	|"""" КАК ГрузоперевозчикНаименование,
	|"""" КАК ГрузоперевозчикТелефон,
	|"""" КАК ГрузоперевозчикИНН,
	|"""" КАК ГрузоперевозчикКПП,
	|"""" КАК ТарифНаименование,
	|"""" КАК ТарифИдентификатор,
	|"""" КАК ТарифНеГабарит,
	|ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОтгрузки,
	|ДАТАВРЕМЯ(1, 1, 1) КАК ДатаДоставки,
	|ДАТАВРЕМЯ(1, 1, 1) КАК ВремяОтгрузкиС,
	|ДАТАВРЕМЯ(1, 1, 1) КАК ВремяОтгрузкиПо,
	|ДАТАВРЕМЯ(1, 1, 1) КАК ВремяДоставкиС,
	|ДАТАВРЕМЯ(1, 1, 1) КАК ВремяДоставкиПо,
	|0 КАК СпособОтгрузки,
	|0 КАК СпособДоставки,
	|NULL КАК Менеджер,
	|NULL КАК СкладОтправитель,
	|NULL КАК СкладПолучатель,
	|NULL КАК ОтправительКонтрагентСсылка,
	|"""" КАК ОтправительКонтрагентИНН,
	|"""" КАК ОтправительКонтрагентКПП,
	|"""" КАК ОтправительКонтрагентНаименование,
	|0 КАК ОтправительКонтрагентЮрФизЛицо,
	|NULL КАК ОтправительКонтрагентЮридическийАдресВладелец,
	|"""" КАК ОтправительКонтрагентЮридическийАдресПредставление,
	|"""" КАК ОтправительКонтрагентЮридическийАдресЗначение,
	|ЛОЖЬ КАК ОтправительКонтрагентЭтоОрганизация,
	|NULL КАК ОтправительАдресВладелец,
	|"""" КАК ОтправительАдресВладелецНаименование,
	|"""" КАК ОтправительАдресПредставление,
	|"""" КАК ОтправительАдресЗначенияПолей,
	|"""" КАК ОтправительАдресЗначение,
	|NULL КАК ОтправительКонтактноеЛицоСсылка,
	|"""" КАК ОтправительКонтактноеЛицоНаименование,
	|"""" КАК ОтправительКонтактноеЛицоТелефонПредставление,
	|"""" КАК ОтправительКонтактноеЛицоТелефонЗначение,
	|NULL КАК ПолучательКонтрагентСсылка,
	|"""" КАК ПолучательКонтрагентИНН,
	|"""" КАК ПолучательКонтрагентКПП,
	|"""" КАК ПолучательКонтрагентНаименование,
	|0 КАК ПолучательКонтрагентЮрФизЛицо,
	|NULL КАК ПолучательКонтрагентЮридическийАдресВладелец,
	|"""" КАК ПолучательКонтрагентЮридическийАдресПредставление,
	|"""" КАК ПолучательКонтрагентЮридическийАдресЗначение,
	|ЛОЖЬ КАК ПолучательКонтрагентЭтоОрганизация,
	|NULL КАК ПолучательАдресВладелец,
	|"""" КАК ПолучательАдресВладелецНаименование,
	|"""" КАК ПолучательАдресПредставление,
	|"""" КАК ПолучательАдресЗначенияПолей,
	|"""" КАК ПолучательАдресЗначение,
	|NULL КАК ПолучательКонтактноеЛицоСсылка,
	|"""" КАК ПолучательКонтактноеЛицоНаименование,
	|"""" КАК ПолучательКонтактноеЛицоТелефонПредставление,
	|"""" КАК ПолучательКонтактноеЛицоТелефонЗначение,
	|NULL КАК ПлательщикКонтрагентСсылка,
	|"""" КАК ПлательщикКонтрагентИНН,
	|"""" КАК ПлательщикКонтрагентКПП,
	|"""" КАК ПлательщикКонтрагентНаименование,
	|0 КАК ПлательщикКонтрагентЮрФизЛицо,
	|ИСТИНА КАК ПлательщикКонтрагентЭтоОрганизация,
	|NULL КАК ПлательщикКонтрагентЮридическийАдресВладелец,
	|"""" КАК ПлательщикКонтрагентЮридическийАдресПредставление,
	|"""" КАК ПлательщикКонтрагентЮридическийАдресЗначение,
	|NULL КАК ПлательщикКонтактноеЛицоСсылка,
	|"""" КАК ПлательщикКонтактноеЛицоНаименование,
	|"""" КАК ПлательщикКонтактноеЛицоТелефонПредставление,
	|"""" КАК ПлательщикКонтактноеЛицоТелефонЗначение,
	|1 КАК ПлательщикРоль,
	|"""" КАК ПунктПриемаГрузаИдентификатор,
	|NULL КАК ПунктПриемаГрузаСсылка,
	|"""" КАК ПунктВыдачиГрузаИдентификатор,
	|NULL КАК ПунктВыдачиГрузаСсылка,
	|0 КАК СуммаДокумента,
	|NULL КАК ВалютаСсылка,
	|"""" КАК ВалютаКод,
	|"""" КАК ВалютаНаименование,
	|ВЫБОР
	|	КОГДА ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|			И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|		ТОГДА КурсыВалюты.Курс / КурсыВалюты.Кратность
	|	ИНАЧЕ 1
	|КОНЕЦ КАК ВалютаКоэффициент
	|ПОМЕСТИТЬ ДанныеОснований
	|ИЗ #ТаблицаДокумента КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|		ПО Т.Организация = ОрганизацииБизнесСеть.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалюты
	|		ПО ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) = КурсыВалюты.Валюта
	|ГДЕ
	|	Т.Ссылка В (&Основания)
	|";
	
	ШаблонЗапросаТовары =
	"ВЫБРАТЬ
	|Т.Ссылка КАК Ссылка,
	|NULL КАК Номенклатура,
	|NULL КАК Упаковка,
	|0 КАК Цена,
	|0 КАК Количество,
	|0 КАК СуммаВсего,
	|0 КАК СуммаСНДС,
	|0 КАК СуммаНДС,
	|NULL КАК СтавкаНДС,
	|0 КАК Вес,
	|0 КАК Объем,
	|0 КАК Длина,
	|0 КАК Ширина,
	|0 КАК Высота
	|ПОМЕСТИТЬ ДанныеОснованийТовары
	|ИЗ #ТаблицаДокумента КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|	ПО Т.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Т.Ссылка В (&Основания)
	|	И #ТипНоменклатуры
	|";
	
	Основания = ДокументыОснования.ВыгрузитьЗначения();
	ОснованияПоТипам = РазложитьМассивСсылокПоТипам(Основания);
	ПервыйЗапросПоШапке = Истина;
	ПервыйЗапросПоТоварам = Истина;
	ТекстЗапроса = "";
	ТекстЗапросаПоШапке = "";
	ТекстЗапросаПоТоварам = "";
	
	Для Каждого КлючИЗначение Из ОснованияПоТипам Цикл
		
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ);
		ИмяТаблицыОбъекта = МетаданныеОбъекта.ПолноеИмя();
		ИмяОбъекта = СтрРазделить(ИмяТаблицыОбъекта, ".")[1];
		
		ТекстЗапросаПоТипу = ШаблонЗапросаШапка;
		
		СНашегоСклада = ЭтоДокументОтгрузкиСНашегоСклада(ИмяОбъекта);
		НаНашСклад    = ЭтоДокументДоставкиНаНашСклад(ИмяОбъекта);
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеОбъекта) Тогда
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПлательщикКонтрагентСсылка", "Т.Организация КАК ПлательщикКонтрагентСсылка");
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПлательщикКонтрагентИНН", "Т.Организация.ИНН КАК ПлательщикКонтрагентИНН");
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПлательщикКонтрагентКПП", "Т.Организация.КПП КАК ПлательщикКонтрагентКПП");
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПлательщикКонтрагентНаименование", "Т.Организация.НаименованиеСокращенное КАК ПлательщикКонтрагентНаименование");
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПлательщикКонтрагентЮридическийАдресВладелец", "Т.Организация КАК ПлательщикКонтрагентЮридическийАдресВладелец");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК ПлательщикЮрФизЛицо",
											"ВЫБОР
											|	КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
											|		ТОГДА 1
											|	КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
											|		ТОГДА 2
											|	КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
											|		ТОГДА 3
											|	ИНАЧЕ 0
											|КОНЕЦ КАК ПлательщикЮрФизЛицо");
			
			Если СНашегоСклада Тогда
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ОтправительКонтрагентСсылка", "Т.Организация КАК ОтправительКонтрагентСсылка");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительКонтрагентИНН", "Т.Организация.ИНН КАК ОтправительКонтрагентИНН");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительКонтрагентКПП", "Т.Организация.КПП КАК ОтправительКонтрагентКПП");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительКонтрагентНаименование", "Т.Организация.НаименованиеСокращенное КАК ОтправительКонтрагентНаименование");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК ОтправительКонтрагентЮрФизЛицо",
												"ВЫБОР
												|	КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
												|		ТОГДА 1
												|	КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
												|		ТОГДА 2
												|	КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
												|		ТОГДА 3
												|	ИНАЧЕ 0
												|КОНЕЦ КАК ОтправительКонтрагентЮрФизЛицо");
				
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеОбъекта) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ОтправительАдресВладелец", "Т.Склад КАК ОтправительАдресВладелец");
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительАдресВладелецНаименование", "Т.Склад.Наименование КАК ОтправительАдресВладелецНаименование");
				ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладОтправитель", МетаданныеОбъекта) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ОтправительАдресВладелец", "Т.СкладОтправитель КАК ОтправительАдресВладелец");
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительАдресВладелецНаименование", "Т.СкладОтправитель.Наименование КАК ОтправительАдресВладелецНаименование");
				КонецЕсли;
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ОтправительКонтрагентЮридическийАдресВладелец", "Т.Организация КАК ОтправительКонтрагентЮридическийАдресВладелец");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ЛОЖЬ КАК ОтправительКонтрагентЭтоОрганизация", "ИСТИНА КАК ОтправительКонтрагентЭтоОрганизация");
				
			ИначеЕсли НаНашСклад Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательКонтрагентСсылка", "Т.Организация КАК ПолучательКонтрагентСсылка");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательКонтрагентИНН", "Т.Организация.ИНН КАК ПолучательКонтрагентИНН");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательКонтрагентКПП", "Т.Организация.КПП КАК ПолучательКонтрагентКПП");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательКонтрагентНаименование", "Т.Организация.НаименованиеСокращенное КАК ПолучательКонтрагентНаименование");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК ПолучательКонтрагентЮрФизЛицо",
					"ВЫБОР
					|	КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
					|		ТОГДА 1
					|	КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
					|		ТОГДА 2
					|	КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
					|		ТОГДА 3
					|	ИНАЧЕ 0
					|КОНЕЦ КАК ПолучательКонтрагентЮрФизЛицо");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательАдресВладелец", "Т.Склад КАК ПолучательАдресВладелец");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательАдресВладелецНаименование", "Т.Склад.Наименование КАК ПолучательАдресВладелецНаименование");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательКонтрагентЮридическийАдресВладелец", "Т.Организация КАК ПолучательКонтрагентЮридическийАдресВладелец");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ЛОЖЬ КАК ПолучательКонтрагентЭтоОрганизация", "ИСТИНА КАК ПолучательКонтрагентЭтоОрганизация");
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ОрганизацияПолучатель", МетаданныеОбъекта) Тогда
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательКонтрагентСсылка",
				"ВЫБОР
				|	КОГДА Т.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				|		ТОГДА Т.ОрганизацияПолучатель
				|	ИНАЧЕ Т.Организация
				|КОНЕЦ КАК ПолучательКонтрагентСсылка");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательКонтрагентИНН",
				"ВЫБОР
				|	КОГДА Т.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				|		ТОГДА Т.ОрганизацияПолучатель.ИНН
				|	ИНАЧЕ Т.Организация.ИНН
				|КОНЕЦ КАК ПолучательКонтрагентИНН");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательКонтрагентКПП",
				"ВЫБОР
				|	КОГДА Т.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				|		ТОГДА Т.ОрганизацияПолучатель.КПП
				|	ИНАЧЕ Т.Организация.КПП
				|КОНЕЦ КАК ПолучательКонтрагентКПП");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательКонтрагентНаименование",
				"ВЫБОР
				|	КОГДА Т.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				|		ТОГДА Т.ОрганизацияПолучатель.НаименованиеСокращенное
				|	ИНАЧЕ Т.Организация.НаименованиеСокращенное
				|КОНЕЦ КАК ПолучательКонтрагентНаименование");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК ПолучательКонтрагентЮрФизЛицо",
				"ВЫБОР
				|	КОГДА Т.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				|		ТОГДА 
				|			ВЫБОР
				|				КОГДА Т.ОрганизацияПолучатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
				|					ТОГДА 1
				|				КОГДА Т.ОрганизацияПолучатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
				|					ТОГДА 2
				|				КОГДА Т.ОрганизацияПолучатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
				|					ТОГДА 3
				|				ИНАЧЕ 0
				|			КОНЕЦ
				|	ИНАЧЕ ВЫБОР
				|				КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
				|					ТОГДА 1
				|				КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
				|					ТОГДА 2
				|				КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
				|					ТОГДА 3
				|				ИНАЧЕ 0
				|			КОНЕЦ
				|КОНЕЦ КАК ПолучательКонтрагентЮрФизЛицо");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательАдресВладелец", "Т.СкладПолучатель КАК ПолучательАдресВладелец");
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательАдресВладелецНаименование", "Т.СкладПолучатель.Наименование КАК ПолучательАдресВладелецНаименование");
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательКонтрагентЮридическийАдресВладелец", "Т.СкладПолучатель КАК ПолучательКонтрагентЮридическийАдресВладелец");
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ЛОЖЬ КАК ПолучательКонтрагентЭтоОрганизация", "ИСТИНА КАК ПолучательКонтрагентЭтоОрганизация");
			
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", МетаданныеОбъекта) Тогда
			Если СНашегоСклада Тогда
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательКонтрагентСсылка", "Т.Контрагент КАК ПолучательКонтрагентСсылка");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательКонтрагентИНН", "Т.Контрагент.ИНН КАК ПолучательКонтрагентИНН");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательКонтрагентКПП", "Т.Контрагент.КПП КАК ПолучательКонтрагентКПП");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательКонтрагентНаименование",
					"ВЫБОР 
					|	КОГДА Т.Контрагент.НаименованиеПолное <> """" 
					|		ТОГДА Т.Контрагент.НаименованиеПолное 
					|	ИНАЧЕ Т.Контрагент.Наименование 
					|КОНЕЦ КАК ПолучательКонтрагентНаименование");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК ПолучательКонтрагентЮрФизЛицо",
					"ВЫБОР
					|	КОГДА Т.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
					|		ТОГДА 1
					|	КОГДА Т.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
					|		ТОГДА 2
					|	КОГДА Т.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
					|		ТОГДА 3
					|	ИНАЧЕ 0
					|КОНЕЦ КАК ПолучательКонтрагентЮрФизЛицо");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательАдресВладелец", "Т.Партнер КАК ПолучательАдресВладелец");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательАдресВладелецНаименование", "Т.Партнер.Наименование КАК ПолучательАдресВладелецНаименование");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательКонтрагентЮридическийАдресВладелец", "Т.Контрагент КАК ПолучательКонтрагентЮридическийАдресВладелец");
				
			ИначеЕсли НаНашСклад Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ОтправительКонтрагентСсылка", "Т.Контрагент КАК ОтправительКонтрагентСсылка");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительКонтрагентИНН", "Т.Контрагент.ИНН КАК ОтправительКонтрагентИНН");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительКонтрагентКПП", "Т.Контрагент.КПП КАК ОтправительКонтрагентКПП");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительКонтрагентНаименование",
					"ВЫБОР 
					|	КОГДА Т.Контрагент.НаименованиеПолное <> """" 
					|		ТОГДА Т.Контрагент.НаименованиеПолное 
					|	ИНАЧЕ Т.Контрагент.Наименование 
					|КОНЕЦ КАК ОтправительКонтрагентНаименование");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК ОтправительКонтрагентЮрФизЛицо",
					"ВЫБОР
					|	КОГДА Т.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
					|		ТОГДА 1
					|	КОГДА Т.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
					|		ТОГДА 2
					|	КОГДА Т.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
					|		ТОГДА 3
					|	ИНАЧЕ 0
					|КОНЕЦ КАК ОтправительКонтрагентЮрФизЛицо");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ОтправительАдресВладелец", "Т.Партнер КАК ОтправительАдресВладелец");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ОтправительАдресВладелецНаименование", "Т.Партнер.Наименование КАК ОтправительАдресВладелецНаименование");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ОтправительКонтрагентЮридическийАдресВладелец", "Т.Контрагент КАК ОтправительКонтрагентЮридическийАдресВладелец");
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Менеджер", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК Менеджер", "Т.Менеджер КАК Менеджер");
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("Ответственный", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК Менеджер", "Т.Ответственный КАК Менеджер");
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КонтактноеЛицо", МетаданныеОбъекта) Тогда
			Если СНашегоСклада Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательКонтактноеЛицоСсылка",
					"Т.КонтактноеЛицо КАК ПолучательКонтактноеЛицоСсылка");
			ИначеЕсли НаНашСклад Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ОтправительКонтактноеЛицоСсылка",
					"Т.КонтактноеЛицо КАК ОтправительКонтактноеЛицоСсылка");
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ЗаказПоставщику", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ОтправительКонтактноеЛицоСсылка",
				"Т.ЗаказПоставщику.КонтактноеЛицо КАК ОтправительКонтактноеЛицоСсылка");
		КонецЕсли;
		
		Если СНашегоСклада Тогда
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеОбъекта) Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК СкладОтправитель",
					"Т.Склад КАК СкладОтправитель");
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладОтправитель", МетаданныеОбъекта) Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК СкладОтправитель",
					"Т.СкладОтправитель КАК СкладОтправитель");
			КонецЕсли;
		КонецЕсли;
		
		Если НаНашСклад Тогда
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеОбъекта) Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК СкладПолучатель",
					"Т.Склад КАК СкладПолучатель");
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладОтправитель", МетаданныеОбъекта) Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК СкладПолучатель",
					"Т.СкладПолучатель КАК СкладПолучатель");
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ПеревозчикПартнер", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ГрузоперевозчикСсылка", "Т.ПеревозчикПартнер КАК ГрузоперевозчикСсылка");
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаОтгрузки", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОтгрузки", "Т.ДатаОтгрузки КАК ДатаОтгрузки");
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаПоступления", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаДоставки", "Т.ДатаПоступления КАК ДатаДоставки");
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СпособДоставки", МетаданныеОбъекта) Тогда
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК СпособОтгрузки",
				"	ВЫБОР
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
				|			ТОГДА 2
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК СпособОтгрузки");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК СпособДоставки",
				"	ВЫБОР
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада)
				|			ТОГДА 2
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК СпособДоставки");
			
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВремяДоставкиС", МетаданныеОбъекта) Тогда
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК ВремяОтгрузкиС",
					"	ВЫБОР
					|		КОГДА Т.СпособДоставки = ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
					|			ИЛИ ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.НашимиСиламиСАдресаОтправителя)
					|			ИЛИ ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки)
					|			ТОГДА ШапкаДокумента.ВремяДоставкиС
					|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
					|	КОНЕЦ КАК ВремяОтгрузкиС");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК ВремяОтгрузкиДо",
					"	ВЫБОР
					|		КОГДА Т.СпособДоставки = ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
					|			ИЛИ ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.НашимиСиламиСАдресаОтправителя)
					|			ИЛИ ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки)
					|			ТОГДА ШапкаДокумента.ВремяДоставкиДо
					|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
					|	КОНЕЦ КАК ВремяОтгрузкиДо");
				
			КонецЕсли;
			
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВремяДоставкиПо", МетаданныеОбъекта) Тогда
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК ВремяДоставкиС",
					"	ВЫБОР
					|		КОГДА Т.СпособДоставки = ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
					|			ИЛИ ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки)
					|			ИЛИ ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
					|			ТОГДА ШапкаДокумента.ВремяДоставкиС
					|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
					|	КОНЕЦ КАК ВремяДоставкиС");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК ВремяДоставкиДо",
					"	ВЫБОР
					|		КОГДА Т.СпособДоставки = ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
					|			ИЛИ ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки)
					|			ИЛИ ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
					|			ТОГДА ШапкаДокумента.ВремяДоставкиДо
					|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
					|	КОНЕЦ КАК ВремяДоставкиДо");
				
			КонецЕсли;
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительАдресПредставление",
			"	ВЫБОР
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.НашимиСиламиСАдресаОтправителя)
				|			ИЛИ Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки)
				|			ТОГДА Т.АдресДоставки
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК ОтправительАдресПредставление");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительАдресЗначенияПолей",
				"	ВЫБОР
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.НашимиСиламиСАдресаОтправителя)
				|			ИЛИ Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки)
				|			ТОГДА Т.АдресДоставкиЗначенияПолей
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК ОтправительАдресЗначенияПолей");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительАдресЗначение",
				"	ВЫБОР
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.НашимиСиламиСАдресаОтправителя)
				|			ИЛИ Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки)
				|			ТОГДА Т.АдресДоставкиЗначение
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК ОтправительАдресЗначение");
			
			Если СНашегоСклада Тогда
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательАдресПредставление",
					"Т.АдресДоставки КАК ПолучательАдресПредставление");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательАдресЗначенияПолей",
					"Т.АдресДоставкиЗначенияПолей КАК ПолучательАдресЗначенияПолей");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательАдресЗначение",
					"Т.АдресДоставкиЗначение КАК ПолучательАдресЗначение");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Валюта", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ВалютаСсылка", "Т.Валюта КАК ВалютаСсылка");
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) = КурсыВалюты.Валюта", "Т.Валюта = КурсыВалюты.Валюта");
		КонецЕсли;
		
		ДополнитьЗапросПоОснованиям(ТекстЗапросаПоШапке, ТекстЗапросаПоТипу, ПервыйЗапросПоШапке, ИмяТаблицыОбъекта);
		
		СписокТабличныхЧастейТовары = Новый Массив();
		СписокТабличныхЧастейТовары.Добавить("Товары");
		СписокТабличныхЧастейТовары.Добавить("ЗаменяющиеТовары");
		
		Для Каждого ИмяТаблицыТЧ Из СписокТабличныхЧастейТовары Цикл
		
			ТекстЗапросаПоТипу = ШаблонЗапросаТовары;
			
			Если МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТаблицыТЧ) <> Неопределено Тогда
				
				МетаданныеОбъектаТЧ = МетаданныеОбъекта.ТабличныеЧасти[ИмяТаблицыТЧ];
				ИмяТаблицыТЧОбъекта = ИмяТаблицыОбъекта + "." + МетаданныеОбъектаТЧ.Имя;
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Номенклатура", МетаданныеОбъектаТЧ) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК Номенклатура", "Т.Номенклатура КАК Номенклатура");
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Упаковка", МетаданныеОбъектаТЧ) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
						"NULL КАК Упаковка", "Т.Упаковка КАК Упаковка");
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КоличествоУпаковок", МетаданныеОбъектаТЧ) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
						"0 КАК Количество", "Т.КоличествоУпаковок КАК Количество");
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Цена", МетаданныеОбъектаТЧ) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
						"0 КАК Цена", "Т.Цена КАК Цена");
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Сумма", МетаданныеОбъектаТЧ) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
						"0 КАК СуммаВсего", "Т.Сумма КАК Сумма");
				Иначе
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
						"0 КАК СуммаВсего", "0 КАК Сумма");
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаНДС", МетаданныеОбъектаТЧ) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
						"0 КАК СуммаНДС", "Т.СуммаНДС КАК СуммаНДС");
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаСНДС", МетаданныеОбъектаТЧ) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
						"0 КАК СуммаСНДС", "Т.СуммаСНДС КАК СуммаСНДС");
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтавкаНДС", МетаданныеОбъектаТЧ) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
						"NULL КАК СтавкаНДС", "Т.СтавкаНДС КАК СтавкаНДС");
				КонецЕсли;
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
					"#ТипНоменклатуры",
					"НЕ СправочникНоменклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))");
			
				ДополнитьЗапросПоОснованиям(ТекстЗапросаПоТоварам, ТекстЗапросаПоТипу, ПервыйЗапросПоТоварам, ИмяТаблицыТЧОбъекта);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапросаПоШапке + ОбщегоНазначения.РазделительПакетаЗапросов() 
	+ "ВЫБРАТЬ
	  |	ШапкаДокумента.ДокументОснование КАК ДокументОснование,
	  |	ШапкаДокумента.ОрганизацияБизнесСетиСсылка КАК ОрганизацияБизнесСетиСсылка,
	  |	ШапкаДокумента.ФормаОплаты КАК ФормаОплаты,
	  |	ШапкаДокумента.ГрузоперевозчикСсылка КАК ГрузоперевозчикСсылка,
	  |	ШапкаДокумента.ГрузоперевозчикИдентификатор КАК ГрузоперевозчикИдентификатор,
	  |	ШапкаДокумента.ГрузоперевозчикНаименование КАК ГрузоперевозчикНаименование,
	  |	ШапкаДокумента.ГрузоперевозчикТелефон КАК ГрузоперевозчикТелефон,
	  |	ШапкаДокумента.ГрузоперевозчикИНН КАК ГрузоперевозчикИНН,
	  |	ШапкаДокумента.ГрузоперевозчикКПП КАК ГрузоперевозчикКПП,
	  |	ШапкаДокумента.ТарифНаименование КАК ТарифНаименование,
	  |	ШапкаДокумента.ТарифИдентификатор КАК ТарифИдентификатор,
	  |	ШапкаДокумента.ТарифНеГабарит КАК ТарифНеГабарит,
	  |	ШапкаДокумента.ДатаОтгрузки КАК ДатаОтгрузки,
	  |	ШапкаДокумента.ДатаДоставки КАК ДатаДоставки,
	  |	ШапкаДокумента.ВремяОтгрузкиС КАК ВремяОтгрузкиС,
	  |	ШапкаДокумента.ВремяОтгрузкиПо КАК ВремяОтгрузкиПо,
	  |	ШапкаДокумента.ВремяДоставкиС КАК ВремяДоставкиС,
	  |	ШапкаДокумента.ВремяДоставкиПо КАК ВремяДоставкиПо,
	  |	ШапкаДокумента.СпособОтгрузки КАК СпособОтгрузки,
	  |	ШапкаДокумента.СпособДоставки КАК СпособДоставки,
	  |	ШапкаДокумента.ОтправительКонтрагентСсылка КАК ОтправительКонтрагентСсылка,
	  |	ШапкаДокумента.ОтправительКонтрагентИНН КАК ОтправительКонтрагентИНН,
	  |	ШапкаДокумента.ОтправительКонтрагентКПП КАК ОтправительКонтрагентКПП,
	  |	ШапкаДокумента.ОтправительКонтрагентНаименование КАК ОтправительКонтрагентНаименование,
	  |	ШапкаДокумента.ОтправительКонтрагентЮрФизЛицо КАК ОтправительКонтрагентЮрФизЛицо,
	  |	ШапкаДокумента.ОтправительКонтрагентЭтоОрганизация КАК ОтправительКонтрагентЭтоОрганизация,
	  |	ШапкаДокумента.ОтправительКонтрагентЮридическийАдресВладелец КАК ОтправительКонтрагентЮридическийАдресВладелец,
	  |	ШапкаДокумента.ОтправительАдресВладелец КАК ОтправительАдресВладелец,
	  |	ШапкаДокумента.ОтправительАдресВладелецНаименование КАК ОтправительАдресВладелецНаименование,
	  |	ШапкаДокумента.ОтправительАдресПредставление КАК ОтправительАдресПредставление,
	  |	ШапкаДокумента.ОтправительАдресЗначенияПолей КАК ОтправительАдресЗначенияПолей,
	  |	ВЫБОР КОГДА ШапкаДокумента.ОтправительАдресПредставление = """" ТОГДА """" ИНАЧЕ ШапкаДокумента.ОтправительАдресЗначение КОНЕЦ КАК ОтправительАдресЗначение,
	  |	ВЫБОР
	  |		КОГДА ШапкаДокумента.ОтправительКонтрагентЭтоОрганизация
	  |			ТОГДА ВЫБОР
	  |					КОГДА &СпособОпределенияКонтактногоЛица = 3
	  |						ТОГДА ПользователиМенеджер.ФизическоеЛицо
	  |					КОГДА &СпособОпределенияКонтактногоЛица = 4
	  |						ТОГДА СкладыОтправитель.ТекущийОтветственный
	  |					КОГДА &СпособОпределенияКонтактногоЛица = 5
	  |						ТОГДА ПользователиТекущий.ФизическоеЛицо
	  |					КОГДА &СпособОпределенияКонтактногоЛица = 1
	  |						ТОГДА NULL
	  |					КОГДА &СпособОпределенияКонтактногоЛица = 2
	  |						ТОГДА &ОтветственныйСклада
	  |					ИНАЧЕ ПользователиМенеджер.ФизическоеЛицо
	  |				КОНЕЦ
	  |		ИНАЧЕ ВЫБОР
	  |				КОГДА ШапкаДокумента.ОтправительКонтрагентЮрФизЛицо = 2
	  |					ТОГДА ЕСТЬNULL(КонтактныеЛицаОтправитель.Ссылка, ШапкаДокумента.ОтправительКонтрагентСсылка)
	  |				ИНАЧЕ ШапкаДокумента.ОтправительКонтактноеЛицоСсылка
	  |			КОНЕЦ
	  |	КОНЕЦ КАК ОтправительКонтактноеЛицоСсылка,
	  |	ВЫБОР
	  |		КОГДА ШапкаДокумента.ОтправительКонтрагентЭтоОрганизация
	  |			ТОГДА ШапкаДокумента.ОтправительКонтактноеЛицоНаименование
	  |		ИНАЧЕ ВЫБОР
	  |				КОГДА ШапкаДокумента.ОтправительКонтрагентЮрФизЛицо = 2
	  |					ТОГДА ЕСТЬNULL(КонтактныеЛицаОтправитель.Наименование, ШапкаДокумента.ОтправительКонтрагентНаименование)
	  |				ИНАЧЕ КонтактныеЛицаОтправитель.Наименование
	  |			КОНЕЦ
	  |	КОНЕЦ КАК ОтправительКонтактноеЛицоНаименование,
	  |	ШапкаДокумента.ОтправительКонтактноеЛицоТелефонПредставление КАК ОтправительКонтактноеЛицоТелефонПредставление,
	  |	ШапкаДокумента.ОтправительКонтактноеЛицоТелефонЗначение КАК ОтправительКонтактноеЛицоТелефонЗначение,
	  |	ШапкаДокумента.ПолучательКонтрагентСсылка КАК ПолучательКонтрагентСсылка,
	  |	ШапкаДокумента.ПолучательКонтрагентИНН КАК ПолучательКонтрагентИНН,
	  |	ШапкаДокумента.ПолучательКонтрагентКПП КАК ПолучательКонтрагентКПП,
	  |	ШапкаДокумента.ПолучательКонтрагентНаименование КАК ПолучательКонтрагентНаименование,
	  |	ШапкаДокумента.ПолучательКонтрагентЮрФизЛицо КАК ПолучательКонтрагентЮрФизЛицо,
	  |	ШапкаДокумента.ПолучательКонтрагентЭтоОрганизация КАК ПолучательКонтрагентЭтоОрганизация,
	  |	ШапкаДокумента.ПолучательКонтрагентЮридическийАдресВладелец КАК ПолучательКонтрагентЮридическийАдресВладелец,
	  |	ВЫБОР
	  |		КОГДА ШапкаДокумента.ПолучательАдресВладелец = &РозничныйПокупатель
	  |			ТОГДА ШапкаДокумента.ПолучательКонтрагентСсылка
	  |		ИНАЧЕ ШапкаДокумента.ПолучательАдресВладелец
	  |	КОНЕЦ КАК ПолучательАдресВладелец,
	  |	ВЫБОР
	  |		КОГДА ШапкаДокумента.ПолучательАдресВладелец = &РозничныйПокупатель
	  |			ТОГДА ШапкаДокумента.ПолучательКонтрагентНаименование
	  |		ИНАЧЕ ШапкаДокумента.ПолучательАдресВладелецНаименование
	  |	КОНЕЦ КАК ПолучательАдресВладелецНаименование,
	  |	ШапкаДокумента.ПолучательАдресПредставление КАК ПолучательАдресПредставление,
	  |	ШапкаДокумента.ПолучательАдресЗначенияПолей КАК ПолучательАдресЗначенияПолей,
	  |	ВЫБОР КОГДА ШапкаДокумента.ПолучательАдресПредставление = """" ТОГДА """" ИНАЧЕ ШапкаДокумента.ПолучательАдресЗначение КОНЕЦ КАК ПолучательАдресЗначение,
	  |	ВЫБОР
	  |		КОГДА ШапкаДокумента.ПолучательКонтрагентЭтоОрганизация
	  |			ТОГДА ВЫБОР
	  |					КОГДА &СпособОпределенияКонтактногоЛица = 3
	  |						ТОГДА ПользователиМенеджер.ФизическоеЛицо
	  |					КОГДА &СпособОпределенияКонтактногоЛица = 4
	  |						ТОГДА СкладыПолучатель.ТекущийОтветственный
	  |					КОГДА &СпособОпределенияКонтактногоЛица = 5
	  |						ТОГДА ПользователиТекущий.ФизическоеЛицо
	  |					КОГДА &СпособОпределенияКонтактногоЛица = 1
	  |						ТОГДА NULL
	  |					КОГДА &СпособОпределенияКонтактногоЛица = 2
	  |						ТОГДА &ОтветственныйСклада
	  |					ИНАЧЕ ПользователиМенеджер.ФизическоеЛицо
	  |				КОНЕЦ
	  |		ИНАЧЕ ВЫБОР
	  |				КОГДА ШапкаДокумента.ПолучательКонтрагентЮрФизЛицо = 2
	  |					ТОГДА ЕСТЬNULL(КонтактныеЛицаПолучатель.Ссылка, ШапкаДокумента.ПолучательКонтрагентСсылка)
	  |				ИНАЧЕ ШапкаДокумента.ПолучательКонтактноеЛицоСсылка
	  |			КОНЕЦ
	  |	КОНЕЦ КАК ПолучательКонтактноеЛицоСсылка,
	  |	ВЫБОР
	  |		КОГДА ШапкаДокумента.ПолучательКонтрагентЭтоОрганизация
	  |			ТОГДА ШапкаДокумента.ПолучательКонтактноеЛицоНаименование
	  |		ИНАЧЕ ВЫБОР
	  |				КОГДА ШапкаДокумента.ПолучательКонтрагентЮрФизЛицо = 2
	  |					ТОГДА ЕСТЬNULL(КонтактныеЛицаПолучатель.Наименование, ШапкаДокумента.ПолучательКонтрагентНаименование)
	  |				ИНАЧЕ КонтактныеЛицаПолучатель.Наименование
	  |			КОНЕЦ
	  |	КОНЕЦ КАК ПолучательКонтактноеЛицоНаименование,
	  |	ШапкаДокумента.ПолучательКонтактноеЛицоТелефонПредставление КАК ПолучательКонтактноеЛицоТелефонПредставление,
	  |	ШапкаДокумента.ПолучательКонтактноеЛицоТелефонЗначение КАК ПолучательКонтактноеЛицоТелефонЗначение,
	  |	ШапкаДокумента.ПлательщикКонтрагентСсылка КАК ПлательщикКонтрагентСсылка,
	  |	ШапкаДокумента.ПлательщикКонтрагентИНН КАК ПлательщикКонтрагентИНН,
	  |	ШапкаДокумента.ПлательщикКонтрагентКПП КАК ПлательщикКонтрагентКПП,
	  |	ШапкаДокумента.ПлательщикКонтрагентНаименование КАК ПлательщикКонтрагентНаименование,
	  |	ШапкаДокумента.ПлательщикКонтрагентЮрФизЛицо КАК ПлательщикКонтрагентЮрФизЛицо,
	  |	ШапкаДокумента.ПлательщикКонтрагентЭтоОрганизация КАК ПлательщикКонтрагентЭтоОрганизация,
	  |	ШапкаДокумента.ПлательщикКонтрагентЮридическийАдресВладелец КАК ПлательщикКонтрагентЮридическийАдресВладелец,
	  |	ШапкаДокумента.ПлательщикКонтактноеЛицоСсылка КАК ПлательщикКонтактноеЛицоСсылка,
	  |	ШапкаДокумента.ПлательщикКонтактноеЛицоНаименование КАК ПлательщикКонтактноеЛицоНаименование,
	  |	ШапкаДокумента.ПлательщикКонтактноеЛицоТелефонПредставление КАК ПлательщикКонтактноеЛицоТелефонПредставление,
	  |	ШапкаДокумента.ПлательщикКонтактноеЛицоТелефонЗначение КАК ПлательщикКонтактноеЛицоТелефонЗначение,
	  |	ВЫБОР
	  |		КОГДА ШапкаДокумента.ОтправительКонтрагентЭтоОрганизация
	  |			ТОГДА 1
	  |		КОГДА ШапкаДокумента.ПолучательКонтрагентЭтоОрганизация
	  |			ТОГДА 2
	  |		ИНАЧЕ 1
	  |	КОНЕЦ КАК ПлательщикРоль,
	  |	ШапкаДокумента.ВалютаКоэффициент КАК ВалютаКоэффициент
	  |ИЗ
	  |	ДанныеОснований КАК ШапкаДокумента
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаОтправитель
	  |		ПО ШапкаДокумента.ОтправительКонтактноеЛицоСсылка = КонтактныеЛицаОтправитель.Ссылка
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПолучатель
	  |		ПО ШапкаДокумента.ПолучательКонтактноеЛицоСсылка = КонтактныеЛицаПолучатель.Ссылка
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладыОтправитель
	  |		ПО ШапкаДокумента.СкладОтправитель = СкладыОтправитель.Ссылка
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладыПолучатель
	  |		ПО ШапкаДокумента.СкладПолучатель = СкладыПолучатель.Ссылка
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК ПользователиМенеджер
	  |		ПО ШапкаДокумента.Менеджер = ПользователиМенеджер.Ссылка
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК ПользователиТекущий
	  |		ПО (&ТекущийПользователь = ПользователиТекущий.Ссылка)";
	
	Если ТекстЗапросаПоТоварам <> "" Тогда 
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов()
		+ ТекстЗапросаПоТоварам
		+ ОбщегоНазначения.РазделительПакетаЗапросов()
		+ "ВЫБРАТЬ
		  |	ТаблицаТовары.Номенклатура КАК Номенклатура,
		  |	ТаблицаТовары.Упаковка КАК Упаковка,
		  |	ТаблицаТовары.Количество КАК Количество,
		  |	ТаблицаТовары.Сумма * ШапкаДокумента.ВалютаКоэффициент КАК Сумма,
		  |	ТаблицаТовары.Цена * ШапкаДокумента.ВалютаКоэффициент КАК Цена,
		  |	ТаблицаТовары.СуммаСНДС * ШапкаДокумента.ВалютаКоэффициент КАК СуммаСНДС,
		  |	ТаблицаТовары.СуммаНДС * ШапкаДокумента.ВалютаКоэффициент КАК СуммаНДС,
		  |	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС
		  |ПОМЕСТИТЬ ВременнаяТаблицаТовары
		  |ИЗ
		  |	ДанныеОснований КАК ШапкаДокумента
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеОснованийТовары КАК ТаблицаТовары
		  |		ПО (ТаблицаТовары.Ссылка = ШапкаДокумента.ДокументОснование)
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ
		  |	СправочникНоменклатура.Наименование КАК Наименование,
		  |	УпаковкиЕдиницыИзмерения.Наименование КАК ЕдиницаИзмерения,
		  |	Товары.Количество КАК Количество,
		  |	Товары.Цена КАК Цена,
		  |	Товары.СуммаСНДС КАК Сумма,
		  |	Товары.СуммаНДС КАК СуммаНДС,
		  |	Товары.Упаковка КАК Упаковка,
		  |	&ТекстЗапросаВесУпаковки КАК Вес,
		  |	&ТекстЗапросаОбъемУпаковки КАК Объем,
		  |	ВЫБОР
		  |		КОГДА УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		  |				И ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ВысотаЕдиницаИзмерения.Знаменатель, 0) <> 0
		  |			ТОГДА (ВЫРАЗИТЬ(ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Высота, 0) * (ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ВысотаЕдиницаИзмерения.Числитель, 0) / ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ВысотаЕдиницаИзмерения.Знаменатель, 1)) КАК ЧИСЛО(15, 7))) * 100
		  |		ИНАЧЕ 0
		  |	КОНЕЦ КАК Высота,
		  |	ВЫБОР
		  |		КОГДА УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		  |				И ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ШиринаЕдиницаИзмерения.Знаменатель, 0) <> 0
		  |			ТОГДА (ВЫРАЗИТЬ(ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Ширина, 0) * (ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ШиринаЕдиницаИзмерения.Числитель, 0) / ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ШиринаЕдиницаИзмерения.Знаменатель, 1)) КАК ЧИСЛО(15, 7))) * 100
		  |		ИНАЧЕ 0
		  |	КОНЕЦ КАК Ширина,
		  |	ВЫБОР
		  |		КОГДА &ТекстЗапросаДлинаУпаковки <> 0
		  |			ТОГДА &ТекстЗапросаДлинаУпаковки
		  |		КОГДА УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		  |				И ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ШиринаЕдиницаИзмерения.Знаменатель, 0) <> 0
		  |			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Глубина, 0) * (ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ГлубинаЕдиницаИзмерения.Числитель, 0) / ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ГлубинаЕдиницаИзмерения.Знаменатель, 1)) КАК ЧИСЛО(15, 7))
		  |		ИНАЧЕ 0
		  |	КОНЕЦ * 100 КАК Длина,
		  |	ВЫБОР
		  |		КОГДА СправочникВидыНоменклатуры.ИспользоватьИндивидуальноеНаименованиеПриПечати
		  |			ТОГДА ЕСТЬNULL(СправочникВидыНоменклатуры.НаименованиеДляПечати, """")
		  |		КОГДА &НаименованиеДляПечатиВидовНоменклатуры <> """"
		  |			ТОГДА &НаименованиеДляПечатиВидовНоменклатуры
		  |		ИНАЧЕ СправочникВидыНоменклатуры.Наименование
		  |	КОНЕЦ КАК НаименованиеДляПечати
		  |ПОМЕСТИТЬ Товары
		  |ИЗ
		  |	ВременнаяТаблицаТовары КАК Товары
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		  |		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК СправочникВидыНоменклатуры
		  |		ПО (СправочникНоменклатура.ВидНоменклатуры = СправочникВидыНоменклатуры.Ссылка)
		  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		  |		ПО (ВЫБОР
		  |				КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		  |					ТОГДА СправочникНоменклатура.ЕдиницаИзмерения = УпаковкиЕдиницыИзмерения.Ссылка
		  |				ИНАЧЕ Товары.Упаковка = УпаковкиЕдиницыИзмерения.Ссылка
		  |			КОНЕЦ)
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ
		  |	СУММА(Товары.Количество * Товары.Вес) КАК Вес,
		  |	СУММА(Товары.Количество * Товары.Объем) КАК Объем,
		  |	МАКСИМУМ(Товары.Высота) КАК МаксимальнаяВысота,
		  |	МАКСИМУМ(Товары.Длина) КАК МаксимальнаяДлина,
		  |	МАКСИМУМ(Товары.Ширина) КАК МаксимальнаяШирина,
		  |	МАКСИМУМ(Товары.Вес) КАК МаксимальныйВес,
		  |	СУММА(Товары.Сумма) КАК Стоимость
		  |ИЗ
		  |	Товары КАК Товары
		  |
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ
		  |	Товары.НаименованиеДляПечати КАК ТоварНаименование
		  |ИЗ
		  |	Товары КАК Товары
		  |
		  |СГРУППИРОВАТЬ ПО
		  |	Товары.НаименованиеДляПечати";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("УпаковкиЕдиницыИзмерения", "СправочникНоменклатура", Ложь));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("УпаковкиЕдиницыИзмерения", "СправочникНоменклатура", Ложь));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаДлинаУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаДлинаУпаковки("УпаковкиЕдиницыИзмерения", "СправочникНоменклатура", Ложь));
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Основания", Основания);
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("РозничныйПокупатель", Справочники.Партнеры.РозничныйПокупатель);
	
	ДанныеПоУмолчанию = СервисДоставки.ПараметрыПоУмолчанию(Параметры.ТипГрузоперевозки);
	
	Запрос.УстановитьПараметр("СпособОпределенияКонтактногоЛица", ДанныеПоУмолчанию.СпособОпределенияКонтактногоЛица);
	Запрос.УстановитьПараметр("ОтветственныйСклада", ДанныеПоУмолчанию.КонтактноеЛицо);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.УстановитьПараметр("НаименованиеДляПечатиВидовНоменклатуры", Константы.НаименованиеДляПечатиВидовНоменклатуры.Получить());
	Результаты = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатПоШапке = Результаты[1];
	Если РезультатПоШапке.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПоДокументу = РезультатПоШапке.Выгрузить();
	ДанныеПоДокументу = ТаблицаПоДокументу[0];
	
	СервисДоставкиКлиентСервер.ЗаполнитьСтруктуруПоЛинейнымДанным(Параметры, ДанныеПоДокументу, ТаблицаПоДокументу.Колонки);
	
	Параметры.Вставить("ОрганизацияБизнесСетиСсылка", ДанныеПоДокументу.ОрганизацияБизнесСетиСсылка);
	
	// Заполним грузоперевозчика
	Если ЗначениеЗаполнено(Параметры.Грузоперевозчик.Ссылка) Тогда
		ГрузоперевозчикКонтрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Параметры.Грузоперевозчик.Ссылка);
		Если ЗначениеЗаполнено(ГрузоперевозчикКонтрагент) Тогда
			ГрузоперевозчикПараметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ГрузоперевозчикКонтрагент, "ИНН,КПП,НаименованиеПолное,Наименование");
			ГрузоперевозчикПараметры.Наименование = 
				?(ЗначениеЗаполнено(ГрузоперевозчикПараметры.НаименованиеПолное),
				ГрузоперевозчикПараметры.НаименованиеПолное,
				ГрузоперевозчикПараметры.Наименование);
					
			ЗаполнитьЗначенияСвойств(Параметры.Грузоперевозчик, ГрузоперевозчикПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним значения адресов
	СервисДоставки.ЗаполнитьАдресПоПараметрам(Параметры.Отправитель.Адрес);
	СервисДоставки.ЗаполнитьАдресПоПараметрам(Параметры.Получатель.Адрес);
	СервисДоставки.ЗаполнитьАдресПоПараметрам(Параметры.Отправитель.Контрагент.ЮридическийАдрес);
	СервисДоставки.ЗаполнитьАдресПоПараметрам(Параметры.Получатель.Контрагент.ЮридическийАдрес);
	
	//Заполним телефоны контактных лиц
	Если Параметры.Отправитель.Контрагент.ЭтоОрганизация Тогда
		ЗаполнитьПараметрыКонтактногоЛица(Параметры.Отправитель.КонтактноеЛицо);
	Иначе
		ЗаполнитьТелефонКонтактногоЛица(Параметры.Отправитель.КонтактноеЛицо)
	КонецЕсли;
	
	Если Параметры.Получатель.Контрагент.ЭтоОрганизация Тогда
		ЗаполнитьПараметрыКонтактногоЛица(Параметры.Получатель.КонтактноеЛицо);
	Иначе
		ЗаполнитьТелефонКонтактногоЛица(Параметры.Получатель.КонтактноеЛицо)
	КонецЕсли;
	
	РезультатИтогиПоТаблицеТовары = Результаты[5];
	РезультатНаименованийДляПечати = Результаты[6];
	
	// Заполним параметры грузовых мест
	
	Если Не РезультатИтогиПоТаблицеТовары.Пустой() Тогда
		ВыборкаПоТоварам = РезультатИтогиПоТаблицеТовары.Выбрать();
		Если ВыборкаПоТоварам.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Параметры.Груз, ВыборкаПоТоварам);
		КонецЕсли;
	КонецЕсли;
	
	Если Не РезультатНаименованийДляПечати.Пустой() Тогда
		ВыборкаПоТоварам = РезультатНаименованийДляПечати.Выбрать();
		Пока ВыборкаПоТоварам.Следующий() Цикл
			Если ЗначениеЗаполнено(СокрЛП(ВыборкаПоТоварам.ТоварНаименование)) Тогда 
				Параметры.Груз.Содержимое = Параметры.Груз.Содержимое + ?(Параметры.Груз.Содержимое <> "", ", ", "") + ВыборкаПоТоварам.ТоварНаименование;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РезультатПоТоварнымПозициям = Запрос.МенеджерВременныхТаблиц.Таблицы[3].ПолучитьДанные();
	
	Если Не РезультатПоТоварнымПозициям.Пустой() Тогда
		
		ВыборкаПоПозиции = РезультатПоТоварнымПозициям.Выбрать();
		
		Пока ВыборкаПоПозиции.Следующий() Цикл
			
			НоваяСтрокаПозиции = Параметры.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПозиции, ВыборкаПоПозиции);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры контрагента данными по ссылке, указанной в Параметры.
//
// Параметры:
//  Параметры - Структура - см. СервисДоставки.СервисДоставки.НовыйПараметрыКонтрагента()
//
Процедура ЗаполнитьПараметрыКонтрагента(Параметры) Экспорт
	
	ИмяСправочника = Неопределено;
	ВидЮридическогоАдреса = Неопределено;
	Если ТипЗнч(Параметры.Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
		ИмяРеквизитаНаименование = "НаименованиеСокращенное";
		Параметры.ЭтоОрганизация = Истина;
	ИначеЕСли ТипЗнч(Параметры.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
		ИмяРеквизитаНаименование = "НаименованиеПолное";
		Параметры.ЭтоОрганизация = Ложь;
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОсновнаяТаблица.Ссылка КАК Ссылка,
	               |	ОсновнаяТаблица.ИНН КАК ИНН,
	               |	ОсновнаяТаблица.КПП КАК КПП,
	               |	ОсновнаяТаблица.Наименование КАК Наименование,
	               |	ВЫБОР
	               |		КОГДА ОсновнаяТаблица.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	               |			ТОГДА 1
	               |		КОГДА ОсновнаяТаблица.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	               |			ТОГДА 2
	               |		КОГДА ОсновнаяТаблица.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
	               |			ТОГДА 3
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ЮрФизЛицо
	               |ИЗ
	               |	&ТаблицаДляЗапроса КАК ОсновнаяТаблица
	               |ГДЕ
	               |	ОсновнаяТаблица.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Параметры.Ссылка);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаДляЗапроса", "Справочник." + ИмяСправочника);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОсновнаяТаблица.Наименование", "ОсновнаяТаблица." + ИмяРеквизитаНаименование);
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ЗаполнитьЗначенияСвойств(Параметры, РезультатЗапроса.Выгрузить()[0]);
		
		Если Параметры.ЮрФизЛицо <> 2 Тогда
			
			Параметры.ЮридическийАдрес.Владелец = Параметры.Ссылка;
			СервисДоставкиСлужебный.ЗаполнитьАдресПоПараметрам(Параметры.ЮридическийАдрес);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры контактного лица данными по ссылке, указанной в Параметры.
//
// Параметры:
//  Параметры - Структура - см. СервисДоставки.НовыйПараметрыКонтрагента()
//
Процедура ЗаполнитьПараметрыКонтактногоЛица(Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Ссылка, "Наименование");
	Параметры.Наименование = ЗначенияРеквизитов.Наименование;
	ЗаполнитьТелефонКонтактногоЛица(Параметры);
	
КонецПроцедуры

// Заполняет параметры контактного лица данными по ссылке, указанной в Параметры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма настроек, в которой необходимо заполнить контактное лицо.
//  Параметры - Структура - см. СервисДоставки.НовыйПараметрыКонтактногоЛица()
//
Процедура ЗаполнитьПараметрыКонтактногоЛицаПоУмолчанию(Форма, Параметры) Экспорт
	
	Если Не Параметры.Контрагент.ЭтоОрганизация Тогда
		Возврат;
	КонецЕсли;
	
	//Заполним контактных лиц
	Если Параметры.КонтактноеЛицо.СпособОпределенияКонтактногоЛица = 3 
		ИЛИ Параметры.КонтактноеЛицо.СпособОпределенияКонтактногоЛица = 0 Тогда // Менеджер из документа основания
		
		Если Форма.ДокументыОснования.Количество() = 1 Тогда
			
			Менеджер = Неопределено;
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Менеджер", Форма.ДокументыОснования[0].Значение.Метаданные()) Тогда
				СтрутураМенеджер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ДокументыОснования[0].Значение, "Менеджер");
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("Ответсвенный", Форма.ДокументыОснования[0].Значение.Метаданные()) Тогда
				Менеджер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ДокументыОснования[0].Значение, "Ответсвенный");
			КонецЕсли;
			
			Если Менеджер <> Неопределено Тогда
				КонтактноеЛицоОрганиазции = Менеджер.ФизическоеЛицо;
				Если ЗначениеЗаполнено(КонтактноеЛицоОрганиазции) Тогда
					ПараметрыКонтрагента = Параметры.Контрагент;
					Если ПараметрыКонтрагента.ЭтоОрганизация Тогда
						Параметры.КонтактноеЛицо.Ссылка = КонтактноеЛицоОрганиазции;
						ЗаполнитьПараметрыКонтактногоЛица(Параметры.КонтактноеЛицо);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Параметры.КонтактноеЛицо.СпособОпределенияКонтактногоЛица = 4 Тогда // Ответственный за склад
		
		ИмяРекзизита = Форма.ТекущийЭлемент.Имя;
		КонтактноеЛицоОрганиазции = Неопределено;
		
		Если ЗначениеЗаполнено(Параметры.Адрес.Владелец) Тогда
			Если ТипЗнч(Параметры.Адрес.Владелец) = Тип("СправочникСсылка.Склады") Тогда
				КонтактноеЛицоОрганиазции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Адрес.Владелец, "ТекущийОтветственный");
			КонецЕсли;
		ИначеЕсли Форма.ДокументыОснования.Количество() = 1 Тогда
			
			ДокументОснование = Форма.ДокументыОснования[0].Значение;
			
			Если ИмяРекзизита = "ОтправительКонтрагент" Тогда
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", ДокументОснование.Метаданные()) Тогда
					КонтактноеЛицоОрганиазции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование.Склад, "ТекущийОтветственный");
				ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладОтправитель", ДокументОснование.Метаданные()) Тогда
					КонтактноеЛицоОрганиазции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование.СкладОтправитель, "ТекущийОтветственный");
				КонецЕсли;
			
			ИначеЕсли ИмяРекзизита = "ПолучательКонтрагент" Тогда
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", ДокументОснование.Метаданные()) Тогда
					КонтактноеЛицоОрганиазции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование.Склад, "ТекущийОтветственный");
				ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладПолучатель", ДокументОснование.Метаданные()) Тогда
					КонтактноеЛицоОрганиазции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование.СкладПолучатель, "ТекущийОтветственный");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КонтактноеЛицоОрганиазции) Тогда
			ПараметрыКонтрагента = Параметры.Контрагент;
			Если ПараметрыКонтрагента.ЭтоОрганизация Тогда
				Параметры.КонтактноеЛицо.Ссылка = КонтактноеЛицоОрганиазции;
				ЗаполнитьПараметрыКонтактногоЛица(Параметры.КонтактноеЛицо);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Параметры.КонтактноеЛицо.СпособОпределенияКонтактногоЛица = 5 Тогда // Текущий пользователь

		КонтактноеЛицоОрганиазции = ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо;
		
		Если ЗначениеЗаполнено(КонтактноеЛицоОрганиазции) Тогда

			ПараметрыКонтрагента = Параметры.Контрагент;
			Если ПараметрыКонтрагента.ЭтоОрганизация Тогда
				Параметры.КонтактноеЛицо.Ссылка = КонтактноеЛицоОрганиазции;
				ЗаполнитьПараметрыКонтактногоЛица(Параметры.КонтактноеЛицо);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры телефона контактной информацией по владельцу, указанному в Параметры.
//
// Параметры:
//  Параметры - Структура - см. СервисДоставки.НовыйПараметрыКонтактногоЛица().
//
Процедура ЗаполнитьТелефонКонтактногоЛица(Параметры) Экспорт
	
	ВидыКонтактнойИнформации = Новый Массив();
	
	Если ТипЗнч(Параметры.Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
	ИначеЕСли ТипЗнч(Параметры.Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица);
	ИначеЕСли ТипЗнч(Параметры.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	ИначеЕСли ТипЗнч(Параметры.Ссылка) = Тип("СправочникСсылка.Партнеры") Тогда
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
	КонецЕсли;
	
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Для Каждого ВидКонтактнойИнформации Из ВидыКонтактнойИнформации Цикл
		КонтактнаяИнформацияТаблица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Параметры.Ссылка, 
																								ВидКонтактнойИнформации,
																		ТекущаяДата,
																		Ложь);
		Если КонтактнаяИнформацияТаблица.Количество() Тогда
			КонтактнаяИнформация = КонтактнаяИнформацияТаблица[0];
			Параметры.Телефон.Представление = КонтактнаяИнформация.Представление;
			Параметры.Телефон.Значение = КонтактнаяИнформация.Значение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.Телефон.Представление) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет параметры валюты.
//
// Параметры:
//  Параметры - Структура - см. СервисДоставки.НовыйПараметрыВалюты().
//
Процедура ЗаполнитьПараметрыВалюты(Параметры) Экспорт
	
	Если (Не Параметры.Свойство("Код"))
		ИЛИ (Не ЗначениеЗаполнено(Параметры.Код)) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("Ссылка", Справочники.Валюты.НайтиПоКоду(Параметры.Код));
	
	Если ЗначениеЗаполнено(Параметры.Ссылка) Тогда
		Параметры.Вставить("Наименование", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ссылка, "Наименование"));
	Иначе
		Параметры.Вставить("Наименование", "RUB");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу данными документов.
//
// Параметры:
//  ОснованияСписок - ТаблицаЗначений - см. СервисДоставки.ДокументыОснованияСписок(Основания).
//
Процедура ЗаполнитьДокументыОснованияСписок(ОснованияСписок) Экспорт

	Если ОснованияСписок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|Т.Ссылка КАК Ссылка,
	|0 КАК СуммаДокумента,
	|NULL КАК СкладОтправитель,
	|NULL КАК СкладПолучатель,
	|NULL КАК ПартнерОтправитель,
	|NULL КАК ПартнерПолучатель,
	|NULL КАК Валюта,
	|NULL КАК Отправитель,
	|NULL КАК Получатель,
	|"""" КАК ОтправительАдрес,
	|"""" КАК ПолучательАдрес,
	|ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОтгрузки,
	|ДАТАВРЕМЯ(1, 1, 1) КАК ДатаДоставки,
	|0 КАК СпособОтгрузки,
	|0 КАК СпособДоставки
	|ПОМЕСТИТЬ ДанныеОснований
	|ИЗ #ТаблицаДокумента КАК Т
	|
	|ГДЕ Т.Ссылка В (&Основания)";

	Основания = ОснованияСписок.ВыгрузитьКолонку("Ссылка");
	ОснованияПоТипам = РазложитьМассивСсылокПоТипам(Основания);
	ПервыйЗапрос = Истина;
	ТекстЗапроса = "";
	
	Для Каждого КлючИЗначение Из ОснованияПоТипам Цикл
		
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ);
		ИмяТаблицыОбъекта = МетаданныеОбъекта.ПолноеИмя();
		ИмяОбъекта = СтрРазделить(ИмяТаблицыОбъекта, ".")[1];
		
		ТекстЗапросаПоТипу = ШаблонЗапроса;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаДокумента", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК СуммаДокумента", "Т.СуммаДокумента КАК СуммаДокумента");
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Валюта", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК Валюта", "Т.Валюта КАК Валюта");
		КонецЕсли;
		
		СНашегоСклада = ЭтоДокументОтгрузкиСНашегоСклада(ИмяОбъекта);
		НаНашСклад    = ЭтоДокументДоставкиНаНашСклад(ИмяОбъекта);
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеОбъекта) Тогда
			Если СНашегоСклада Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК Отправитель", "Т.Организация КАК Отправитель");
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеОбъекта) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК СкладОтправитель", "Т.Склад КАК СкладОтправитель");
				ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладОтправитель", МетаданныеОбъекта) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК СкладОтправитель", "Т.СкладОтправитель КАК СкладОтправитель");
				КонецЕсли;
				
			ИначеЕсли НаНашСклад Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК Получатель", "Т.Организация КАК Получатель");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК СкладПолучатель", "Т.Склад КАК СкладПолучатель");
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", МетаданныеОбъекта) Тогда
			Если СНашегоСклада Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК Получатель", "Т.Контрагент КАК Получатель");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПартнерПолучатель", "Т.Партнер КАК ПартнерПолучатель");
			ИначеЕсли НаНашСклад Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК Отправитель", "Т.Контрагент КАК Отправитель");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПартнерОтправитель", "Т.Партнер КАК ПартнерОтправитель");
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ОрганизацияПолучатель", МетаданныеОбъекта) Тогда
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК Получатель",
				"ВЫБОР
				|	КОГДА Т.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				|		ТОГДА Т.ОрганизацияПолучатель
				|	ИНАЧЕ Т.Организация
				|КОНЕЦ КАК Получатель");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК СкладПолучатель", "Т.СкладПолучатель КАК СкладПолучатель");
			
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаОтгрузки", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОтгрузки", "Т.ДатаОтгрузки КАК ДатаОтгрузки");
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаПоступления", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаДоставки", "Т.ДатаПоступления КАК ДатаДоставки");
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СпособДоставки", МетаданныеОбъекта) Тогда
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК СпособОтгрузки",
				"	ВЫБОР
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
				|			ТОГДА 2
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК СпособОтгрузки");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК СпособДоставки",
				"	ВЫБОР
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада)
				|			ТОГДА 2
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК СпособДоставки");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительАдрес",
			"	ВЫБОР
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.НашимиСиламиСАдресаОтправителя)
				|			ИЛИ Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки)
				|			ТОГДА Т.АдресДоставки
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК ОтправительАдрес");
			
			
			Если СНашегоСклада Тогда
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательАдрес",
					"Т.АдресДоставки КАК ПолучательАдрес");
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДополнитьЗапросПоОснованиям(ТекстЗапроса, ТекстЗапросаПоТипу, ПервыйЗапрос, ИмяТаблицыОбъекта);
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() 
	+ "ВЫБРАТЬ
	  |	Т.Ссылка КАК Ссылка,
	  |	Т.СуммаДокумента КАК СуммаДокумента,
	  |	Т.Валюта КАК Валюта,
	  |	Т.Отправитель КАК Отправитель,
	  |	Т.Получатель КАК Получатель,
	  |	ВЫБОР
	  |		КОГДА НЕ Т.СкладОтправитель ЕСТЬ NULL
	  |			ТОГДА СкладыКонтактнаяИнформацияОтправитель.Представление
	  |		КОГДА Т.ОтправительАдрес = """"
	  |			ТОГДА ПартнерыКонтактнаяИнформацияОтправитель.Представление
	  |		ИНАЧЕ Т.ОтправительАдрес
	  |	КОНЕЦ КАК ОтправительАдрес,
	  |	ВЫБОР
	  |		КОГДА НЕ Т.СкладПолучатель ЕСТЬ NULL
	  |			ТОГДА СкладыКонтактнаяИнформацияПолучатель.Представление
	  |		КОГДА Т.ПолучательАдрес = """"
	  |			ТОГДА ПартнерыКонтактнаяИнформацияПолучатель.Представление
	  |		ИНАЧЕ Т.ПолучательАдрес
	  |	КОНЕЦ КАК ПолучательАдрес,
	  |	Т.ДатаОтгрузки КАК ДатаОтгрузки,
	  |	Т.ДатаДоставки КАК ДатаДоставки,
	  |	Т.СпособОтгрузки КАК СпособОтгрузки,
	  |	Т.СпособДоставки КАК СпособДоставки
	  |ИЗ
	  |	ДанныеОснований КАК Т
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформацияОтправитель
	  |		ПО Т.СкладОтправитель = СкладыКонтактнаяИнформацияОтправитель.Ссылка
	  |			И (СкладыКонтактнаяИнформацияОтправитель.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада))
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформацияПолучатель
	  |		ПО Т.СкладПолучатель = СкладыКонтактнаяИнформацияПолучатель.Ссылка
	  |			И (СкладыКонтактнаяИнформацияПолучатель.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада))
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформацияОтправитель
	  |		ПО Т.ПартнерОтправитель = ПартнерыКонтактнаяИнформацияОтправитель.Ссылка
	  |			И (ПартнерыКонтактнаяИнформацияОтправитель.Вид = &АдресДоставки)
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформацияПолучатель
	  |		ПО Т.ПартнерПолучатель = ПартнерыКонтактнаяИнформацияПолучатель.Ссылка
	  |			И (ПартнерыКонтактнаяИнформацияПолучатель.Вид = &АдресДоставки)
	  |
	  |УПОРЯДОЧИТЬ ПО
	  |	Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Основания", Основания);
	ВидКонтактнойИнформации = Неопределено;
	ПолучитьЗначениеВидаКонтактнойИнформацииДляАдресаДоставкиСкладаКонтрагента(ВидКонтактнойИнформации);
	Запрос.УстановитьПараметр("АдресДоставки", ВидКонтактнойИнформации);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	ОснованияСписок = РезультатЗапроса[1].Выгрузить();
	
КонецПроцедуры

#КонецОбласти

#Область ВидыКонтактнойИнформации

// Получает вид контактной информации для адреса по переданному владельцу.
//
// Параметры:
//  Владелец  - СправочникСсылка, ОбъектСсылка - владелец адреса.
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации.
//  ТипАдреса - Строка - тип адреса, доступны: АдресДоставки, Юридический, Фактический.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляАдресаПоВладельцу(Владелец, ВидКонтактнойИнформации, ТипАдреса = "АдресДоставки") Экспорт
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Склады") Тогда
		ПолучитьЗначениеВидаКонтактнойИнформацииДляАдресаДоставкиСкладаОрганизации(ВидКонтактнойИнформации);
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
		ПолучитьЗначениеВидаКонтактнойИнформацииДляЮридическогоАдресаОрганизации(ВидКонтактнойИнформации);
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Партнеры") 
		И ТипАдреса = "АдресДоставки" Тогда
		ПолучитьЗначениеВидаКонтактнойИнформацииДляАдресаДоставкиСкладаКонтрагента(ВидКонтактнойИнформации);
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") 
		И ТипАдреса = "Юридический" Тогда
		ПолучитьЗначениеВидаКонтактнойИнформацииДляЮридическогоАдресаКонтрагента(ВидКонтактнойИнформации);
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") 
		И ТипАдреса = "АдресДоставки" Тогда
		ПолучитьЗначениеВидаКонтактнойИнформацииДляФактическогоАдресаКонтрагента(ВидКонтактнойИнформации);
	КонецЕсли;
	
КонецПроцедуры

// Получает вид контактной информации для адреса доставки организации.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,Неопределено - вид контактной информации.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляАдресаДоставкиСкладаОрганизации(ВидКонтактнойИнформации) Экспорт
	
	ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресСклада");
	
КонецПроцедуры

// Получает вид контактной информации для юридического адреса организации.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,Неопределено - вид контактной информации.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляЮридическогоАдресаОрганизации(ВидКонтактнойИнформации) Экспорт
	
	ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации");
	
КонецПроцедуры

// Получает вид контактной информации для адреса доставки контрагента.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,Неопределено - вид контактной информации.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляАдресаДоставкиСкладаКонтрагента(ВидКонтактнойИнформации) Экспорт
	
	ВидКонтактнойИнформации = ВидКонтактнойИнформацииАдресДоставкиПартнера();
	
	Если Не ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
	КонецЕсли;
	
КонецПроцедуры

// Получает вид контактной информации для юридического адреса доставки.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,Неопределено - вид контактной информации.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляЮридическогоАдресаКонтрагента(ВидКонтактнойИнформации) Экспорт
	
	ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента");
	
КонецПроцедуры

// Получает вид контактной информации для телефона контактного лица контрагента.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,Неопределено - вид контактной информации.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляТелефонаКонтактногоЛицаКонтрагента(ВидКонтактнойИнформации) Экспорт
	
	ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица");
	
КонецПроцедуры

// Получает вид контактной информации для телефона контактного лица организации.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,Неопределено - вид контактной информации.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляТелефонаКонтактногоЛицаОрганизации(ВидКонтактнойИнформации) Экспорт
	
	ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица");
	
КонецПроцедуры

// Получает вид контактной информации для юридического адреса доставки.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,Неопределено - вид контактной информации.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляФактическогоАдресаКонтрагента(ВидКонтактнойИнформации) Экспорт
	
	ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента");
	
КонецПроцедуры

Функция ВидКонтактнойИнформацииАдресДоставкиПартнера()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	               |ГДЕ
	               |	ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	               |	И ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникПартнеры)
	               |	И ВидыКонтактнойИнформации.Наименование = ""Адрес доставки""";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0].Ссылка;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Заполняет список выбора способов определения реквизита заказа на доставку для общих настроек.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма настроек, в которой необходимо заполнить список выбора.
//
Процедура ЗаполнитьСписокВыбораСпособаОпределенияКонтактногоЛица(Форма) Экспорт
	
	СписокВыбора = Форма.Элементы.СпособОпределенияКонтактногоЛица.СписокВыбора;
	СписокВыбора.Вставить(0, 3, НСтр("ru='Менеджер из документа отгрузки'"));
	СписокВыбора.Вставить(1, 4, НСтр("ru='Ответственный склада'"));
	СписокВыбора.Вставить(2, 5, НСтр("ru='Текущий пользователь'"));
	
КонецПроцедуры

// Получение доступности функционала доставки в прикладном решении.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма панели настроек, в которой необходимо установить доступность.
//
Процедура УстановитьДоступностьНастройкиСервисаДоставки(Форма) Экспорт
	
	ИспользоватьУправлениеДоставкой = Константы["ИспользоватьУправлениеДоставкой"].Получить();
	ЭтоПолнаяВерсия = Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	Элементы = Форма.Элементы;
	
	Если ЭтоПолнаяВерсия 
		И Не ИспользоватьУправлениеДоставкой Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"Константа_ИспользоватьСервис1СДоставка", "Доступность", Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"Константа_ИспользоватьСервис1СКурьер", "Доступность", Ложь);
		
		ТекстЗаголовка = НСтр("ru='Невозможно включение интеграции с сервисами, потому что отключена работа с доставкой. 
									|Включить работу с доставкой можно в разделе ""Склад и доставка""'");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КомментарийИспользоватьСервис1СДоставка", "Заголовок", ТекстЗаголовка);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаКомментарийИспользоватьСервис1СДоставка", "Видимость", ЭтоПолнаяВерсия И Не ИспользоватьУправлениеДоставкой);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаНастройкиБизнесСетьСервисДоставки", "Видимость", ЭтоПолнаяВерсия);
	
КонецПроцедуры

// Добавление команды поиска торговых предложений в формах.
//
// Параметры:
//  КомандыСозданияНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании.
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Использование", Метаданные.Обработки.СервисДоставки) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "СервисДоставкиКлиентПереопределяемый.ЗаказНаДоставкуСоздатьНаОсновании";
		КомандаСоздатьНаОсновании.Идентификатор = "СоздатьНовыйЗаказНаДоставку";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru='Заказ на доставку в 1С:Доставка'");
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.МножественныйВыбор = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьСервис1СДоставка";
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "СервисДоставкиКлиентПереопределяемый.ЗаказНаДоставкуСоздатьНаОсновании";
		КомандаСоздатьНаОсновании.Идентификатор = "СоздатьНовыйЗаказНаКурьерскуюДоставку";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru='Заказ на доставку в 1С:Курьер'");
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.МножественныйВыбор = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьСервис1СКурьер";
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка создания библиотечной формы.
//
// Параметры:
//  Форма - УправляемаяФорма - создаваемая форма;
//  Отказ - Булево - флаг отказа от создания формы;
//  СтандартнаяОбработка - Булево - флаг стандартной обработки формы.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	
КонецПроцедуры

// Заполняет шаблон формы оплаты для параметров заказа на доставку.
// Например, когда Форма оплаты определена перечислением "ФормыОплаты":
//    Если ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
//      СвойстваФормыОплаты.Вставить("ФормаОплаты", 2);
//      СвойстваФормыОплаты.Вставить("ФормаОплатыПредставление", НСтр("ru='Наличная'"));
//    Иначе
//      СвойстваФормыОплаты.Вставить("ФормаОплаты", 1);
//      СвойстваФормыОплаты.Вставить("ФормаОплатыПредставление", НСтр("ru='Безналичная'"));
//    КонецЕсли;
//
// Параметры:
//  ФормаОплаты - ОпределяемыйТип.ФормаОплатыСервисДоставки - форма оплаты заказа на доставку;
//  СвойстваФормыОплаты - Структура - содержит:
//    ФормаОплаты - Число - 1 - безналичная, 2 - наличная, по умолчанию 2;
//    ФормаОплатыПредставление - Строка - "Безналичная", "Наличная", по умолчанию "Наличная".
//
Процедура ОпределитьПараметрыЗаказаФормаОплаты(ФормаОплаты, СвойстваФормыОплаты) Экспорт
	
КонецПроцедуры

// Определяет можно ли использовать сервис доставки в текущей конфигурации.
//
// Параметры:
//  Результат - Булево - Признак возможности использовать сервис доставки.
//
Процедура ПроверитьДоступностьСервисаДоставки(Результат) Экспорт
	
	Результат = Результат И (Не ПолучитьФункциональнуюОпцию("БазоваяВерсия"));
	
КонецПроцедуры

// Адаптирует текст запроса к базе данных для получения контрагента или организации.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса, который требуется адаптировать для текущей конфигурации (основная таблица уже есть в запросе);
//  ТипДанных - Тип - тип данных к таблице которых будет выполнен запрос.
//
Процедура ОбработатьЗапросПолученияУчастникаГрузоперевозкиПоИННиКПП(ТекстЗапроса, ТипДанных) Экспорт

	Если ТипДанных = Тип("СправочникСсылка.Организации") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Таблица.Наименование", "Таблица.НаименованиеСокращенное");
	ИначеЕсли ТипДанных = Тип("СправочникСсылка.Контрагенты") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Таблица.Наименование", "Таблица.НаименованиеПолное");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Обработка_результатов_запросов_документов

// Обрабатывает результат создания и изменения заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументыОснования - СписокЗначений, Неопределено - список документов оснований заказа на доставку
//                                        (значение - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки).
//
Процедура ОбработатьРезультатЗапросаСозданияИзмененияЗаказаНаДоставку(Результат, ДокументыОснования = Неопределено) Экспорт
	
КонецПроцедуры

// Обрабатывает результат оформления заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументыОснования - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатЗапросаОформленияЗаказаНаДоставку(Результат, ДокументыОснования = Неопределено) Экспорт
	
КонецПроцедуры

// Обрабатывает результат отмены заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументыОснования - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатЗапросаОтменыЗаказаНаДоставку(Результат, ДокументыОснования = Неопределено) Экспорт
	
КонецПроцедуры

// Обрабатывает результат обновления заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументыОснования - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатЗапросаОбновленияЗаказаНаДоставку(Результат, ДокументыОснования = Неопределено) Экспорт
	
КонецПроцедуры

// Обрабатывает результат запроса состояния заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  ИнформацияОЗаказе - Структура - содержит информацию о состоянии заказа в сервисе;
//
Процедура ОбработатьРезультатСостоянияЗаказаНаДоставку(ИнформацияОЗаказе) Экспорт
	
КонецПроцедуры

// Обрабатывает результат получения заказа на доставку из сервиса 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументыОснования - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатЗапросаПолученияЗаказаНаДоставку(Результат, ДокументыОснования = Неопределено) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции
// Устарела. Следует использовать СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаСозданияИзмененияЗаказаНаДоставку.
// Обрабатывает результат создания заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументОснование - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатСозданияЗаказаНаДоставку(Результат, ДокументОснование = Неопределено) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОформленияЗаказаНаДоставку.
// Обрабатывает результат оформления заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументОснование - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатОформленияЗаказаНаДоставку(Результат, ДокументОснование = Неопределено) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОтменыЗаказаНаДоставку.
// Обрабатывает результат отмены заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументОснование - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатОтменыЗаказаНаДоставку(Результат, ДокументОснование = Неопределено) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОбновленияЗаказаНаДоставку.
// Обрабатывает результат обновления заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументОснование - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатОбновленияЗаказаНаДоставку(Результат, ДокументОснование = Неопределено) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаПолученияЗаказаНаДоставку.
// Обрабатывает результат получения заказа на доставку из сервиса 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументОснование - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатПолученияЗаказаНаДоставку(Результат, ДокументОснование = Неопределено) Экспорт
	
КонецПроцедуры

#КонецОбласти

Функция РазложитьМассивСсылокПоТипам(МассивСсылок)
	
	СоответствиеТипов = Новый Соответствие;
	
	Для Счетчик = 0 По МассивСсылок.Количество() -1 Цикл
		
		ТипСсылки = ТипЗнч(МассивСсылок[Счетчик]);
		Массив = СоответствиеТипов[ТипСсылки];
		Если Массив = Неопределено Тогда
			Массив = Новый Массив;
			СоответствиеТипов.Вставить(ТипСсылки, Массив);
		КонецЕсли;
		Массив.Добавить(МассивСсылок[Счетчик]);
		
	КонецЦикла;
	
	Возврат СоответствиеТипов;
	
КонецФункции

Процедура ДополнитьЗапросПоОснованиям(ТекстЗапроса, ТекстЗапросаДляДополнения, ПервыйЗапрос, ИмяТаблицы)
	
	Если Не ЗначениеЗаполнено(ТекстЗапросаДляДополнения) Тогда
		Возврат;
	КонецЕсли;
	ТекстЗапросаДляДополнения = СтрЗаменить(ТекстЗапросаДляДополнения, "#ТаблицаДокумента", ИмяТаблицы);
	Если ПервыйЗапрос Тогда
		ПервыйЗапрос = Ложь;
		ТекстЗапроса = ТекстЗапросаДляДополнения;
	Иначе
		ТекстЗапросаДляДополнения = СтрЗаменить(ТекстЗапросаДляДополнения, "ПОМЕСТИТЬ ДанныеОснованийТовары", "");
		ТекстЗапросаДляДополнения = СтрЗаменить(ТекстЗапросаДляДополнения, "ПОМЕСТИТЬ ДанныеОснований", "");
		ТекстЗапросаДляДополнения = СтрЗаменить(ТекстЗапросаДляДополнения, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
		ТекстЗапроса = ТекстЗапроса +
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|"
		+ ТекстЗапросаДляДополнения;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоДокументОтгрузкиСНашегоСклада(ИмяДокумента)
	
	Возврат СтрНайти("ЗаказКлиента,РеализацияТоваровУслуг,ВозвратТоваровПоставщику,ЗаявкаНаВозвратТоваровОтКлиента,ЗаказНаПеремещение,ПеремещениеТоваров", ИмяДокумента) <> 0;
	
КонецФункции

Функция ЭтоДокументДоставкиНаНашСклад(ИмяДокумента)
	
	Возврат СтрНайти("ЗаказПоставщику,ПриобретениеТоваровУслуг,ЗаказНаПеремещение,ПеремещениеТоваров", ИмяДокумента) <> 0;
	
КонецФункции

