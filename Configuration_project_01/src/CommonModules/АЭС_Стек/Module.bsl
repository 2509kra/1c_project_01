
Функция ВыгрузитьПлатежВСтек(Платеж, НомерСтроки, ПодключениеСТЕК = Неопределено, Отладка) Экспорт

	Результат = Истина;
	
	Если Ложь Тогда Платеж = Документы.АЭС_Платежи.ПустаяСсылка(); КонецЕсли;
	
	НомерЛС = Платеж.Контрагент.НомерЛС;
	
	Если ПодключениеСТЕК = Неопределено Тогда
		
		ЮЛФЛ = Платеж.Контрагент.ЮридическоеФизическоеЛицо;

		КодНастроекБД = ПолучитьКодНастроекБДИзНомераЛС(НомерЛС, ЮЛФЛ);
		
		Настройки =	АЭС_Стек.ПолучитьНастройкиСоединенияSQL(КодНастроекБД);
		
		Если Не Настройки.РазрешитьЗапись И Не Отладка Тогда
			Сообщить("Запись в СТЕК не разрешена!");
			Результат = Ложь;
		КонецЕсли;
		
		ПодключениеСТЕК = АЭС_Стек.ПолучитьСоединениеСSQL(Настройки);
	КонецЕсли;
	
	Если ПодключениеСТЕК = Неопределено И Не Отладка Тогда
		Сообщить("Не удалось подключиться к базе СТЕК");
		Результат = Ложь;
	КонецЕсли;
		
	Команда = Новый COMОбъект("ADODB.Command");
	//
	Команда.ActiveConnection = ПодключениеСТЕК;
	Команда.CommandType = 4; //хранимая процедура
	//
	//
	Команда.CommandText = 	"stack.pAddPaydeskPayment";
	//
	adBigInt		= 20; //Indicates an eight-byte signed integer (DBTYPE_I8).
	adTinyInt		= 16; //Indicates a one-byte signed integer (DBTYPE_I1).
	adBoolean		= 11; //Indicates a Boolean value (DBTYPE_BOOL).
	adInteger  		= 3;
	
	
	adParamInput	= 1; //Indicates that the parameter represents an input parameter.
	adParamOutput	= 2; //Indicates that the parameter represents an output parameter.
	adDouble		= 5;
	adDBTimeStamp = 133; //   yyyymmddhhmmss 
	adVarChar 		= 200;
	
	
	//0@LsNumber bigint,                  -- Номер ЛС
	//1@PayMode tinyint,                  -- Режим оплаты (1-наличные,2-эквайринг)
	//2@PayDate datetime,                 -- Дата платежа
	//3@PayValue float,                   -- Сумма платежа
	//4@PayPeriod datetime = null,        -- Период платежа
	//5@PayType tinyint = null,			  -- Тип платежа: null – обычный платеж (за электроэнергию), 0 – платеж с указанием услуги (безучетное потребление, госпошлина), 2 - пени
	//6@PaySvcNumber int = null,	      -- Номер услуги: нумерация соответствует нумерации Стек (например, 499 – безучетное, 3702 – госпошлина, 3701 - пени)
	//7@CntRowId int = null,              -- Идентификатор счетчика
	//8@CntScaleCount tinyint = null,     -- Шкальность/Тарифность (варианты: 1,2,3)
	//9@ReadingValue1 float = null,       -- Показание по шкале 1 (Название шкалы в зависимости от значения поля [CntScaleCount]: 1-Сутки, 2-День, 3-Ночь)
	//10@ReadingValue2 float = null,       -- Показание по шкале 2 (Название шкалы в зависимости от значения поля [CntScaleCount]: 2-Ночь, 3-Полупик)
	//11@ReadingValue3 float = null,      -- Показание по шкале 3 (Название шкалы в зависимости от значения поля [CntScaleCount]: 3-Пик)
	//12@PaymentId int = null out         -- Идентификатор платежа (возвращаемое значение)
	//
	//Для Каждого стрТЧ Из Платеж.ОсновнаяДеятельность Цикл
	
	//МИС
	//чтобы исключить ошибочную ситуацию
	Если Платеж.ОсновнаяДеятельность.Количество() < НомерСтроки Тогда
		Результат = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	стрТЧ = Платеж.ОсновнаяДеятельность[НомерСтроки-1];
	
	Если Не ЗначениеЗаполнено(стрТЧ.ДокументПродажи) Или стрТЧ.ДокументПродажи.Статус <> Перечисления.СтатусыЧековККМ.Пробит Тогда
		АЭС_Сервер.СообщениеАдминистратору("Ошибочная ситуация при выгрузке в СТЕК " + Платеж + Символы.ПС + ПолучитьНавигационнуюСсылку(Платеж));
		Результат = Ложь;
	КонецЕсли;
	
	НЗ = РегистрыСведений.АЭС_ОчередьОтправкиПлатежейВСТЕК.СоздатьНаборЗаписей();
	НЗ.Отбор.Платеж.Установить(Платеж);
	НЗ.Отбор.НомерСтрокиТЧ.Установить(стрТЧ.НомерСтроки);
	НЗ.Прочитать();
	
	Если НЗ.Количество() = 1 Тогда
		ЗаписьНЗ = НЗ[0];
		Если ЗначениеЗаполнено(ЗаписьНЗ.ИдентификаторПлатежаСТЕК) Тогда
			ТекстСообщения = "Данная строка уже выгружена в СТЕК" + Символы.ПС + 
			ПолучитьНавигационнуюСсылку(Платеж) + Символы.ПС + 
			"Номер строки " + стрТЧ.НомерСтроки + Символы.ПС +
			"ИдентификаторПлатежаСТЕК:" + ЗаписьНЗ.ИдентификаторПлатежаСТЕК;
			АЭС_Сервер.СообщениеАдминистратору(ТекстСообщения);
			Сообщить(ТекстСообщения);
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	ТипПлатежа = Неопределено;
	НомерУслуги = Число(СтрЗаменить(стрТЧ.НомерУслуги.НомерУслуги, Символы.НПП,""));
	Если стрТЧ.ВидОплаты = Справочники.АЭС_ВидОплаты.Электроэнергия ИЛИ стрТЧ.ВидОплаты = Справочники.АЭС_ВидОплаты.ПроцентПоРеструктуризированнойЗадолженности Тогда
		//Сидоров+ по письму от 
		//	Шадурский Дмитрий Николаевич <ShadurskiyDN@murmansk.atomsbt.ru> 12.01.2018 11:13 и 06.10.2017 10:12
		//  Ивченко Наталья Валерьевна <MuzalevaNV@atomsbt.ru> 12.01.2018 12:46
		Если НомерУслуги = 21001 Тогда // проценты по рассрочке
			ТипПлатежа = 0;	
		ИначеЕсли НомерУслуги = 401 Или НомерУслуги = 402 Или НомерУслуги = 403 Тогда //Безучетное потребление
			ТипПлатежа = 0;	
		Иначе
			ТипПлатежа = 0; //NULL; //Изменения по письму Андреева В.Б.
		КонецЕсли;
		//Сидоров-
	ИначеЕсли стрТЧ.ВидОплаты = Справочники.АЭС_ВидОплаты.Электроэнергия_Аванс
			Или стрТЧ.ВидОплаты = Справочники.АЭС_ВидОплаты.ПлатаЗаЭЭНаСодержаниеОИ Тогда
		ТипПлатежа	= 0; //NULL; //Изменения по письму Андреева В.Б.
	ИначеЕсли стрТЧ.ВидОплаты = Справочники.АЭС_ВидОплаты.Пени Тогда 
		//Сидоров+ по письму от Андреев Вадим Борисович [mailto:AndreevVB@tver.atomsbt.ru] Sent: Friday, December 8, 2017 3:22 PM
		Если НомерУслуги = 3701 ИЛИ НомерУслуги = 21001 Тогда
			ТипПлатежа = 0;	
		Иначе
			ТипПлатежа = 2;
		КонецЕсли;
		//Сидоров-
	ИначеЕсли стрТЧ.ВидОплаты = Справочники.АЭС_ВидОплаты.БезучетноеПотребление Тогда
		ТипПлатежа = 0;
	ИначеЕсли стрТЧ.ВидОплаты = Справочники.АЭС_ВидОплаты.Госпошлина ИЛИ стрТЧ.ВидОплаты = Справочники.АЭС_ВидОплаты.ПениПоСудебномуАкту Тогда
		ТипПлатежа = 0;
	ИначеЕсли (Лев(НомерЛС, 2) = "51" Или Лев(НомерЛС, 2) = "67" Или Лев(НомерЛС, 2) = "46" ИЛИ Лев(НомерЛС, 2) = "69")// !!!! пока только для Мурманска, Смоленска и Курска		
		И (стрТЧ.ВидОплаты = Справочники.АЭС_ВидОплаты.Отключение
			Или стрТЧ.ВидОплаты = Справочники.АЭС_ВидОплаты.Подключение) Тогда
		ТипПлатежа = 0;
	ИначеЕсли стрТЧ.ВидОплаты = Справочники.АЭС_ВидОплаты.ПриемУслугОтФизЛицВПользуПринципалаПоАгентскомуДоговору Тогда
		//МИС (
		//ТипПлатежа = 0; 
		Если СтрТЧ.НомерУслуги.Пени Тогда
			ТипПлатежа = 2;
		Иначе	
			ТипПлатежа = 0; 
		КонецЕсли;
		//)
	Иначе
		АЭС_Сервер.СообщениеАдминистратору("Некорректный вид оплаты в ТЧ при отправке в платежа в СТЕК" + Символы.ПС + ПолучитьНавигационнуюСсылку(Платеж));
		Результат = Ложь; 
	КонецЕсли;
	
	
	//все проверки выполнять до этого кода 
	Если Не Результат Тогда
		Возврат Результат;
	КонецЕсли;
	
	//проверки пройдены, присваиваем Ложь по умолчанию
	Результат = Ложь;
	
	ТекстОшибки = "";
	Попытка
		
		Param0 = Команда.CreateParameter("@LsNumber",	adBigInt,		adParamInput,	100,	НомерЛС); 
		Команда.Parameters.Append(Param0);
		
		ФормаОплаты = ПолучитьФормуОпатыСтрокиПлатежа(стрТЧ);
		Param1 = Команда.CreateParameter("@PayMode",	adTinyInt,		adParamInput,	50,		ФормаОплаты);
		Команда.Parameters.Append(Param1); 
		
		Param2 = Команда.CreateParameter("@PayDate",	adDBTimeStamp,	adParamInput,	50,		стрТЧ.ДокументПродажи.Дата);
		//Param2 = Команда.CreateParameter("@PayDate",	adDBTimeStamp,	adParamInput,	50,		Формат(стрТЧ.ДокументПродажи.Дата,"ДГГГГММДД"));
		Команда.Parameters.Append(Param2);
		
		
		//// !!!! если чек возврат = то сумма "минус" !!!!
		Если ТипЗнч(стрТЧ.ДокументПродажи) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
			Param3 = Команда.CreateParameter("@PayValue",	adDouble,		adParamInput,	50,		-стрТЧ.Сумма);
		Иначе
			Param3 = Команда.CreateParameter("@PayValue",	adDouble,		adParamInput,	50,		стрТЧ.Сумма);
		КонецЕсли;
		Команда.Parameters.Append(Param3);
		////////////////////////////////////////////////////////////			
		//Param4 = Команда.CreateParameter("@PayPeriod",	adDBTimeStamp,	adParamInput,	50,		?(ЗначениеЗаполнено(стрТЧ.ПериодПлатежа), стрТЧ.ПериодПлатежа, NULL));
		//Команда.Parameters.Append(Param4);
		
		Param4 = Команда.CreateParameter("@PayNumber",	adVarChar,	adParamInput,	50,		?(ЗначениеЗаполнено(стрТЧ.Документпродажи.Номер), стрТЧ.Документпродажи.Номер, NULL));
		Команда.Parameters.Append(Param4);
		
		Param5 = Команда.CreateParameter("@BPayPeriod",	adDBTimeStamp,	adParamInput,	50,		?(ЗначениеЗаполнено(стрТЧ.ПериодПлатежа), стрТЧ.ПериодПлатежа, NULL));
		Команда.Parameters.Append(Param5);

		Param6 = Команда.CreateParameter("@EPayPeriod",	adDBTimeStamp,	adParamInput,	50,		?(ЗначениеЗаполнено(стрТЧ.ПериодПлатежаПо), стрТЧ.ПериодПлатежаПо, NULL));
		Команда.Parameters.Append(Param6);
		
		//Исполниель услуг
		Param7 = Команда.CreateParameter("@ProviderRowId",	adBigInt,	adParamInput,	50,		?(ЗначениеЗаполнено(стрТЧ.IDИсполнителя), стрТЧ.IDИсполнителя, NULL));//ПолучитьИдентификаторИсполнителяПоставщика(стрТЧ.ИсполнительУслуг));
		Команда.Parameters.Append(Param7);
		
		//Поставщик услуг
		Param8 = Команда.CreateParameter("@SupplierRowId",	adBigInt,	adParamInput,	50,		?(ЗначениеЗаполнено(стрТЧ.IDПоставщика), стрТЧ.IDПоставщика, NULL));//ПолучитьИдентификаторИсполнителяПоставщика(стрТЧ.ПоставщикУслуг));
		Команда.Parameters.Append(Param8);

		Param9 = Команда.CreateParameter("@PayType",		adTinyInt,	adParamInput,	50,		ТипПлатежа);
		Команда.Parameters.Append(Param9);
		
		//Param10 = Команда.CreateParameter("@PaySvcNumber",	adBigInt,	adParamInput,	50,		?(ТипПлатежа = NULL Или ТипПлатежа = 2, NULL, НомерУслуги));
		Param10 = Команда.CreateParameter("@PaySvcNumber",	adBigInt,	adParamInput,	50,		?(НомерУслуги = -1, NULL, НомерУслуги));
		Команда.Parameters.Append(Param10);
		
		

		CntRowId = NULL;
		CntScaleCount = NULL;
		ReadingValue1 = NULL;
		ReadingValue2 = NULL;
		ReadingValue3 = NULL;
		
		//Если Платеж.СчетчикиПоказания.Количество() > 0
		//	И стрТЧ.НомерСтроки = 1 Тогда//выгружаем показания только один раз
		//	СтрокаПоказания = Платеж.СчетчикиПоказания[0];
		//	Если ЗначениеЗаполнено(СтрокаПоказания.ТекущееПоказание1) Тогда
		//		//заполнено хотя бы первое
		//		CntRowId = СтрокаПоказания.ИдентификаторСчетчика;
		//		CntScaleCount = СтрокаПоказания.ШкальностьТарифность;
		//		ReadingValue1 = СтрокаПоказания.ТекущееПоказание1;
		//		
		//		Если ЗначениеЗаполнено(СтрокаПоказания.ТекущееПоказание2) Тогда
		//			ReadingValue2 = СтрокаПоказания.ТекущееПоказание2;
		//		КонецЕсли;
		//		
		//		Если ЗначениеЗаполнено(СтрокаПоказания.ТекущееПоказание3) Тогда
		//			ReadingValue3 = СтрокаПоказания.ТекущееПоказание3;
		//		КонецЕсли;
		//		
		//	КонецЕсли;
		//КонецЕсли;
		
		Если Платеж.СчетчикиПоказания.Количество() > 0 Тогда
			Если Платеж.СчетчикиПоказания.Количество() = 1 И стрТЧ.НомерСтроки = 1 Тогда
				СтрокаПоказания = Платеж.СчетчикиПоказания[0];
				Если ЗначениеЗаполнено(СтрокаПоказания.ТекущееПоказание1) Тогда
					//заполнено хотя бы первое
					CntRowId = СтрокаПоказания.ИдентификаторСчетчика;
					CntScaleCount = СтрокаПоказания.ШкальностьТарифность;
					ReadingValue1 = СтрокаПоказания.ТекущееПоказание1;
					Если ЗначениеЗаполнено(СтрокаПоказания.ТекущееПоказание2) Тогда
						ReadingValue2 = СтрокаПоказания.ТекущееПоказание2;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаПоказания.ТекущееПоказание3) Тогда
						ReadingValue3 = СтрокаПоказания.ТекущееПоказание3;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Param11 = Команда.CreateParameter("@CntRowId",		adInteger,	adParamInput,	50,		CntRowId);
		Команда.Parameters.Append(Param11);
		
		Param12 = Команда.CreateParameter("@CntScaleCount",	adTinyInt,	adParamInput,	50,		CntScaleCount);
		Команда.Parameters.Append(Param12);
		
		Param13 = Команда.CreateParameter("@ReadingValue1",	adDouble,	adParamInput,	50,		ReadingValue1);
		Команда.Parameters.Append(Param13);
		
		Param14 = Команда.CreateParameter("@ReadingValue2",	adDouble,	adParamInput,	50,		ReadingValue2);
		Команда.Parameters.Append(Param14);
		
		Param15 = Команда.CreateParameter("@ReadingValue3",	adDouble,	adParamInput,	50,		ReadingValue3);
		Команда.Parameters.Append(Param15);
		
		ИдентификаторПлатежаСТЕК = Неопределено;
		Param16 = Команда.CreateParameter("@PaymentId",		adInteger,	adParamOutput,	50,		ИдентификаторПлатежаСТЕК);
		Команда.Parameters.Append(Param16);
		
		//условие неопределенности платежа - 
		Если ТипПлатежа <> Неопределено Тогда
			
			Если Не Отладка Тогда 
				Результат = Команда.Execute();
				ИдентификаторПлатежаСТЕК = Команда.Parameters(16).Value;
				Результат = Истина;
			Иначе
				ИдентификаторПлатежаСТЕК = 1111111111;
				Результат = Истина;
				//ВызватьИсключение "!!!!ТЕСТ!!!!";
			КонецЕсли;
			
			Если Платеж.СчетчикиПоказания.Количество() > 1 И стрТЧ.НомерСтроки = 1 Тогда
				Командапоказания = Новый COMОбъект("ADODB.Command");
				Командапоказания.ActiveConnection = ПодключениеСТЕК;
				Командапоказания.CommandType = 4; //хранимая процедура
				Командапоказания.CommandText = 	"stack.pAddPaydeskReading";
				Для Каждого СТЧ Из Платеж.СчетчикиПоказания Цикл 
					Если ЗначениеЗаполнено(СТЧ.ТекущееПоказание1) Тогда
						Командапоказания.Parameters("@LsNumber").Value = НомерЛС; 
						Командапоказания.Parameters("@PaymentId").Value = ИдентификаторПлатежаСТЕК; 
						Командапоказания.Parameters("@CntRowId").Value = СТЧ.ИдентификаторСчетчика; 
						Командапоказания.Parameters("@CntScaleCount").Value = СТЧ.ШкальностьТарифность; 
						Командапоказания.Parameters("@ReadingValue1").Value = СТЧ.ТекущееПоказание1; 
						Если ЗначениеЗаполнено(СТЧ.ТекущееПоказание2) Тогда
							Командапоказания.Parameters("@ReadingValue2").Value = СТЧ.ТекущееПоказание2;
						Иначе
							Командапоказания.Parameters("@ReadingValue2").Value = Null;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СТЧ.ТекущееПоказание3) Тогда
							Командапоказания.Parameters("@ReadingValue3").Value = СТЧ.ТекущееПоказание3; 
						Иначе
							Командапоказания.Parameters("@ReadingValue3").Value = Null;
						КонецЕсли;
						РезультатПоказания = Командапоказания.Execute();
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
			Если НЗ.Количество() = 1 Тогда
				
				Если ЗначениеЗаполнено(ЗаписьНЗ.ИдентификаторПлатежаСТЕК) Тогда
					//эта ситуация обрабатывается ДО
				Иначе
					ЗаписьНЗ.ИдентификаторПлатежаСТЕК = ИдентификаторПлатежаСТЕК;
					ЗаписьНЗ.Выгружать = Ложь;
					НЗ.Записать();
				КонецЕсли;
			ИначеЕсли НЗ.Количество() = 0 Тогда
				//если вдруг удалили запись - м/б ВызватьИсключение тут поставить...!!!!????
				АЭС_Сервер.СообщениеАдминистратору("Не найдена запись очереди при выгрузке платежа в СТЕК" + Символы.ПС + 
				ПолучитьНавигационнуюСсылку(Платеж) + Символы.ПС + 
				"Номер строки " + стрТЧ.НомерСтроки + Символы.ПС +
				"ИдентификаторПлатежаСТЕК:" + ИдентификаторПлатежаСТЕК);
			Иначе
				// это только в случае изменения структуры регистра...
				АЭС_Сервер.СообщениеАдминистратору("Найдено несколько записей очереди при выгрузке платежа в СТЕК" + Символы.ПС + 
				ПолучитьНавигационнуюСсылку(Платеж) + Символы.ПС + 
				"Номер строки " + стрТЧ.НомерСтроки + Символы.ПС +
				"ИдентификаторПлатежаСТЕК:" + ИдентификаторПлатежаСТЕК);
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации("СТЕК.УстановкаИдентификатораПлатежа", УровеньЖурналаРегистрации.Информация, Платеж.Метаданные(), Платеж, "ИдПлатежаСТЕК=" + ИдентификаторПлатежаСТЕК);
			
			Сообщить("Установлен идентификатор платежа: " + ИдентификаторПлатежаСТЕК);
			
			
		Иначе
			Сообщить("Тип платежа неопределен: " + Строка(Платеж), СтатусСообщения.Важное);
			Результат = Ложь;
		КонецЕсли;
	Исключение
		
		Если ЗначениеЗаполнено(ИдентификаторПлатежаСТЕК) Тогда
			ЗаписьЖурналаРегистрации("СТЕК.ОшибкаУстановкиИдентификатораПлатежа", УровеньЖурналаРегистрации.Ошибка, Платеж.Метаданные(), Платеж, "ИдПлатежаСТЕК=" + ИдентификаторПлатежаСТЕК);
		КонецЕсли;
		
		ТекстОшибки = "Не удалось выгрузить в СТЕК " + Символы.ПС
												+ ОписаниеОшибки() + Символы.ПС 
												+ ПолучитьНавигационнуюСсылку(Платеж) + Символы.ПС
												+ "Номер строки " + стрТЧ.НомерСтроки + Символы.ПС
												+ "ИдентификаторПлатежаСТЕК:" + ИдентификаторПлатежаСТЕК;
		
		АЭС_Сервер.СообщениеАдминистратору(ТекстОшибки);
		
		Сообщить(ТекстОшибки, СтатусСообщения.Важное);
		Результат = Ложь;
		
	КонецПопытки;

	Если Не Результат Тогда
		
		Если НЗ.Количество() = 1 Тогда
			ЗаписьНЗ = НЗ[0];
			Если ЗначениеЗаполнено(ЗаписьНЗ.ИдентификаторПлатежаСТЕК) Тогда
				АЭС_Сервер.СообщениеАдминистратору("Данная строка уже выгружена в СТЕК" + Символы.ПС + 
				ПолучитьНавигационнуюСсылку(Платеж) + Символы.ПС + 
				"Номер строки " + стрТЧ.НомерСтроки + Символы.ПС +
				"ИдентификаторПлатежаСТЕК:" + ИдентификаторПлатежаСТЕК);
			Иначе
				//снимаем признак выгружать, чтобы повторно не попадало в выборку
				ЗаписьНЗ.Выгружать = Ложь;
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ЗаписьНЗ.ТекстСообщения = ТекстОшибки;
				КонецЕсли;
				НЗ.Записать();
			КонецЕсли;
		КонецЕсли;			
		
	КонецЕсли;
	
	
	Возврат Результат;

КонецФункции

Функция ПолучитьИдентификаторИсполнителяПоставщика(Партнер)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АЭС_ИсполнителиПостащикиСтек.IDПартнера КАК IDПартнера
	|ИЗ
	|	РегистрСведений.АЭС_ИсполнителиПостащикиСтек КАК АЭС_ИсполнителиПостащикиСтек
	|ГДЕ
	|	АЭС_ИсполнителиПостащикиСтек.Партнер = &Партнер";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.IDПартнера;			
	Иначе	
		Возврат NULL;
	КонецЕсли;
	
КонецФункции


Функция ПолучитьФормуОпатыСтрокиПлатежа(стрТЧ) 
	
	ТипДокументаПродажи = ТипЗнч(стрТЧ.ДокументПродажи);
	//БАН
	КолОплПоПлКарте = 0;
	Если  ТипДокументаПродажи = Тип("ДокументССылка.чекККМВозврат") Тогда
		мДокумент = стрТЧ.ДокументПродажи.ЧекККМ ;
		ФормаОплаты	= мДокумент.ФормаОплаты;
	Иначе
		мДокумент = стрТЧ.ДокументПродажи;
		ФормаОплаты = мДокумент.ФормаОплаты;
	КонецЕсли;
	
	Если ТипДокументаПродажи = Тип("ДокументСсылка.ЧекККМ") Тогда
		Рез = ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличная, 1, ?(ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта, 2, 0)); 
		Если Рез = 0 Тогда 
			Если НЕ мДокумент.Метаданные().ТабличныеЧасти.Найти("ОплатаПлатежнымиКартами")= Неопределено Тогда 
				КолОплПоПлКарте = мДокумент.ОплатаПлатежнымиКартами.Количество();
			КонецЕсли;
			Если КолОплПоПлКарте = 0 Тогда
				Рез = 1;
			Иначе
				Рез = 2;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипДокументаПродажи = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		Рез = ?(ФормаОплаты = Перечисления.ФормыОплаты.Наличная, 1, ?(ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта, 2, 0));
		Если Рез = 0 Тогда 
			Если НЕ мДокумент.Метаданные().ТабличныеЧасти.Найти("ОплатаПлатежнымиКартами")= Неопределено Тогда 
				КолОплПоПлКарте = мДокумент.ОплатаПлатежнымиКартами.Количество();
			КонецЕсли;
			Если КолОплПоПлКарте = 0 Тогда
				Рез = 1;
			Иначе
				Рез = 2;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипДокументаПродажи = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		Или ТипДокументаПродажи = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		Рез = 1;
	ИначеЕсли ТипДокументаПродажи = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		Рез = 2;
	Иначе
		Рез = 0;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

Функция ПолучитьНастройкиСоединенияSQL(Код) Экспорт 

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	АЭС_НастройкиБазДанных.АдресСервера КАК АдресСервера,
	|	АЭС_НастройкиБазДанных.ИмяБазы КАК ИмяБазы,
	|	АЭС_НастройкиБазДанных.ИмяПровайдера КАК ИмяПровайдера,
	|	АЭС_НастройкиБазДанных.ИмяПользователя КАК ИмяПользователя,
	|	АЭС_НастройкиБазДанных.ПарольПользователя КАК ПарольПользователя,
	|	АЭС_НастройкиБазДанных.РазрешитьЧтение КАК РазрешитьЧтение,
	|	АЭС_НастройкиБазДанных.РазрешитьЗапись КАК РазрешитьЗапись
	|ИЗ
	|	Справочник.АЭС_НастройкиБазДанных КАК АЭС_НастройкиБазДанных
	|ГДЕ
	|	НЕ АЭС_НастройкиБазДанных.ПометкаУдаления
	|	И АЭС_НастройкиБазДанных.Код = &Код";
	
	
	Запрос.УстановитьПараметр("Код", Код);
	
	СтруктураРезультата = Новый Структура();
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураРезультата.Вставить(Колонка.Имя, "");
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ВыборкаКоличество = Выборка.Количество();
	ТекстСообщения = "";
	
	Если ВыборкаКоличество = 0 Тогда
		ТекстСообщения = "Не заданы настройки для соединения с базой SQL!";
	ИначеЕсли ВыборкаКоличество = 1 Тогда
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураРезультата, Выборка);
	Иначе
		ТекстСообщения = "Задано несколько настроек пользователя для соединения с базой SQL!"; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		Сообщить(ТекстСообщения);
		Возврат Неопределено;
	Иначе
		Возврат СтруктураРезультата;
	КонецЕсли;
	

КонецФункции // ПолучитьНастройкиСоединенияSQL()

Функция ПолучитьСоединениеСSQL(СтруктураНастроек) Экспорт 
	
	Если СтруктураНастроек = Неопределено Тогда
		Возврат Неопределено;		
	КонецЕсли;
	
	Попытка
		//Provider=SQLOLEDB.1
		АДО = Новый COMОбъект("ADODB.Connection");
	    АДО.Open("Provider="		+ СтруктураНастроек.ИмяПровайдера + ";
				|Persist Security Info=False;
				|User ID="			+ СтруктураНастроек.ИмяПользователя + ";
				|Password="			+ СтруктураНастроек.ПарольПользователя + ";
				|Initial Catalog="	+ СтруктураНастроек.ИмяБазы + ";
				//|=" + СтруктураНастроек. + ";
				|Data Source="		+ СтруктураНастроек.АдресСервера + ";");
		Рез = АДО;
	Исключение
		Рез = Неопределено;
	КонецПопытки;
	
	Возврат Рез;
	
КонецФункции

Функция ПолучитьСтатусЛицевогоСчетаФЛ(НомерЛС, Соединение = Неопределено) Экспорт
	
	Если Соединение = Неопределено Тогда
		
		КодНастроек = ПолучитьКодНастроекБДИзНомераЛС(НомерЛС, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		СтруктураНастроек = ПолучитьНастройкиСоединенияSQL(КодНастроек);
		
		Если СтруктураНастроек = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если Не СтруктураНастроек.РазрешитьЧтение Тогда
			Сообщить("Чтение из СТЕК не разрешено!");
			Возврат Неопределено;
		КонецЕсли;
		
		
		Попытка
			//Provider=SQLOLEDB.1
			Соединение = Новый COMОбъект("ADODB.Connection");
			Соединение.Open("Provider="		+ СтруктураНастроек.ИмяПровайдера + ";
			|Persist Security Info=False;
			|User ID="			+ СтруктураНастроек.ИмяПользователя + ";
			|Password="			+ СтруктураНастроек.ПарольПользователя + ";
			|Initial Catalog="	+ СтруктураНастроек.ИмяБазы + ";
			//|=" + СтруктураНастроек. + ";
			|Data Source="		+ СтруктураНастроек.АдресСервера + ";");
		Исключение
			Сообщить(ОписаниеОшибки());
			Соединение = Неопределено;
		КонецПопытки;
		
		Если Соединение = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;

	Команда = Новый COMОбъект("ADODB.Command");
	//Команда.ActiveConnection = Соединение;
	//Команда.CommandText = "set nocount on";
	//Записи = Команда.Execute();
	
	
	//!!!!Команда = Новый COMОбъект("ADODB.Command");
	Команда.ActiveConnection = Соединение;
	Команда.CommandType = 4; //хранимая процедура
	//Команда.CommandText = "exec [stack].[pGetConsumerDataByLsNumber] @LsNumber, @LsExisting out, @LsStateCode out";
	//Команда.CommandText = "[stack].[pGetConsumerDataByLsNumber]";
	Команда.CommandText = 	"stack.pGetConsumerDataByLsNumber";
	
	adBigInt		= 20;	//Indicates an eight-byte signed integer (DBTYPE_I8).
	adTinyInt		= 16;	//Indicates a one-byte signed integer (DBTYPE_I1).
	adBoolean		= 11;	//Indicates a Boolean value (DBTYPE_BOOL).
	adParamInput	= 1;	//Default. Indicates that the parameter represents an input parameter.
	adParamOutput	= 2;	//Indicates that the parameter represents an output parameter.
	adVarChar		= 200;//Indicates a string value.
	СуществуетЛС = Неопределено;
	СтатусЛС = Неопределено;
	АдресЛС = Неопределено;
	ФИОЛС = Неопределено;
	//Пар = Cmd.CreateParameter(Name, Value_Type, Param_type, Param_Lenght, Param_Value);
	//Param1 = Команда.CreateParameter("@LsNumber",		adBigInt,	adParamInput,	100,	Формат(ЛС, "ЧГ=0")); 
	
	//@LsNumber bigint,                  -- Номер ЛС (входной)
	//@LsExisting bit = null out,        -- Признак наличия ЛС (1 – есть, 0 - нет)
	//@LsStateCode tinyint = null out    -- Состояние ЛС (0 – используется, 1- не проживает, 2 - закрыт)
	//@AdrStr varchar(500) = null out,   -- Строка адреса
	//@AbName varchar(256) = null out    -- ФИО абонента (нанимателя)
	
	Попытка
		
		Param1 = Команда.CreateParameter("@LsNumber",		adBigInt,	adParamInput,	100,	НомерЛС); 
		Команда.Parameters.Append(Param1);
		
		Param2 = Команда.CreateParameter("@LsExisting",		adBoolean,	adParamOutput,	50,		СуществуетЛС);
		Команда.Parameters.Append(Param2); 
		
		Param3 = Команда.CreateParameter("@LsStateCode",	adTinyInt,	adParamOutput,	50,		СтатусЛС);
		Команда.Parameters.Append(Param3);
		
		Param4 = Команда.CreateParameter("@AdrStr",			adVarChar,	adParamOutput,	500,		АдресЛС);
		Команда.Parameters.Append(Param4);
		
		Param5 = Команда.CreateParameter("@AbName",			adVarChar,	adParamOutput,	50,		ФИОЛС);
		Команда.Parameters.Append(Param5);
		
		Записи = Команда.Execute();
		
		//Команда.CommandType = 1;
		//Команда.CommandText = 	"select @LsExisting";
		//Записи = Команда.Execute();
		
		СуществуетЛС	= Команда.Parameters(1).Value; 	
		СтатусЛС		= Команда.Parameters(2).Value; 	
		АдресЛС			= Команда.Parameters(3).Value; 	
		ФИОЛС			= Команда.Parameters(4).Value;		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	//МИС
	//получаем е-майл
	ЕмайлЛС = "";	
	
	
	Команда = Новый COMОбъект("ADODB.Command");	
	
	Команда.ActiveConnection = Соединение;
	Команда.CommandType = 4; 
	Команда.CommandText = 	"stack.pGetEmailByLS";
	
	Попытка
		
		Param1 = Команда.CreateParameter("@LS",		adBigInt,	adParamInput,	100,	НомерЛС); 
		Команда.Parameters.Append(Param1);
		
		Param2 = Команда.CreateParameter("@EMAIL",		adVarChar,	adParamOutput,	30,	"");
		Команда.Parameters.Append(Param2); 		
		
		Записи = Команда.Execute();
		
		ЕмайлЛС = Команда.Parameters(1).Value;			
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;  	
	
    Возврат Новый Структура("СуществуетЛС, СтатусЛС, АдресЛС, ФИОЛС,ЕмайлЛС", СуществуетЛС, СтатусЛС,  АдресЛС, ФИОЛС, ЕмайлЛС);
КонецФункции

Функция ПолучитьСтатусЛицевогоСчетаЮЛ(НомерЛС, ИНН, Партнер, Соединение = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(НомерЛС) И Не ЗначениеЗаполнено(ИНН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Соединение = Неопределено Тогда
		
		Если ЗначениеЗаполнено(НомерЛС) Тогда
			Префикс1 = Лев(НомерЛС, 2);
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Партнер) Тогда
			Префикс2 = АЭС_Сервер.ЧисловойПрефиксФОП(Партнер);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Префикс1) И ЗначениеЗаполнено(Префикс2) Тогда
			Если Префикс1 <> Префикс2 Тогда
				//Сообщить("Префикс ИНН не совпадает с префиксом партнера!");
				//Возврат Неопределено;
				НомерЛСилиИНН = Префикс2;
			Иначе
				НомерЛСилиИНН = Префикс1;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Префикс1) Тогда
			НомерЛСилиИНН = Префикс1;
		ИначеЕсли ЗначениеЗаполнено(Префикс2) Тогда
			НомерЛСилиИНН = Префикс2;
		Иначе
			Сообщить("Неизвестная ошибка");
			Возврат Неопределено;
		КонецЕсли;
		
		КодНастроек = ПолучитьКодНастроекБДИзНомераЛС(НомерЛСилиИНН, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		СтруктураНастроек = ПолучитьНастройкиСоединенияSQL(КодНастроек);
		
		Если СтруктураНастроек = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если Не СтруктураНастроек.РазрешитьЧтение Тогда
			Сообщить("Чтение из СТЕК не разрешено!");
			Возврат Неопределено;
		КонецЕсли;
		
		
		Попытка
			//Provider=SQLOLEDB.1
			Соединение = Новый COMОбъект("ADODB.Connection");
			Соединение.Open("Provider="		+ СтруктураНастроек.ИмяПровайдера + ";
			|Persist Security Info=False;
			|User ID="			+ СтруктураНастроек.ИмяПользователя + ";
			|Password="			+ СтруктураНастроек.ПарольПользователя + ";
			|Initial Catalog="	+ СтруктураНастроек.ИмяБазы + ";
			//|=" + СтруктураНастроек. + ";
			|Data Source="		+ СтруктураНастроек.АдресСервера + ";");
		Исключение
			Сообщить(ОписаниеОшибки());
			Соединение = Неопределено;
		КонецПопытки;
		
		Если Соединение = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;

	Попытка
		
		Команда = Новый COMОбъект("ADODB.Command");
		
		Команда.ActiveConnection = Соединение;
		Команда.CommandType = 1; //вызываем таб.функцию как запрос
		
							   
		Команда.CommandText = 	"select * from [stack].[tfSelContractDataByNumberOrContractorInn] (" + ?(ЗначениеЗаполнено(НомерЛС), "'" + НомерЛС + "'", "null") + ", " + ?(ЗначениеЗаполнено(ИНН), "'" + ИНН + "'", "null") + ")";
		
		adBigInt		= 20;	//Indicates an eight-byte signed integer (DBTYPE_I8).
		adTinyInt		= 16;	//Indicates a one-byte signed integer (DBTYPE_I1).
		adBoolean		= 11;	//Indicates a Boolean value (DBTYPE_BOOL).
		adParamInput	= 1;	//Default. Indicates that the parameter represents an input parameter.
		adParamOutput	= 2;	//Indicates that the parameter represents an output parameter.
		
		//Param1 = Команда.CreateParameter("@LsNumber",		adBigInt,	adParamInput,	100,	НомерЛС); 
		//Команда.Parameters.Append(Param1);
		
		//Сообщить(Команда.CommandText);
		ЗаписиSQL = Команда.Execute();
		
		Если ЗаписиSQL.EOF() Тогда
			//убрать за собой
			ЗаписиSQL = Неопределено;
			Команда = Неопределено;
			//Сообщить("Запрос не вернул ни одной строки", СтатусСообщения.Важное);
			Возврат Неопределено; // ошибка 
		КонецЕсли;
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Ид");
		ТЗ.Колонки.Добавить("НомерДоговора");
		ТЗ.Колонки.Добавить("НаименованиеПолное");
		ТЗ.Колонки.Добавить("НаименованиеКраткое");
		ТЗ.Колонки.Добавить("ИНН");
		ТЗ.Колонки.Добавить("КПП");
		ТЗ.Колонки.Добавить("ЮридическийАдрес");
		ТЗ.Колонки.Добавить("ФактическийАдрес");
		ТЗ.Колонки.Добавить("СуммаКассовыхПлатежей");
		//ТЗ.Колонки.Добавить("");
		Пока ЗаписиSQL.EOF() = 0 Цикл
			
			//[stack].[tfSelConsumerBalanceEDataByLsNumberAtMonth]
			//Входные параметры:
			//@LsNumber bigint,     -- Номер ЛС (по которому необходимо получить информацию)
			//@Month smalldatetime  -- Месяц (первое число месяца), на конец которого задолженность (сальдо)

			//Возвращаемые столбцы:
			//[BalanceMonth],                                   -- Месяц, за который долг
			//[SvcNumber],                                           -- Номер услуги
			//[SvcShortName],                                   -- Краткое наименование услуги
			//[SvcLongName],                                      -- Полное наименование услуги
			//[MoneyBalanceValue],                      -- Сальдо (сумма задолженности/переплаты в рублях, переплата – со знаком «-»)
			//[ConsumptionBalanceValue]         -- Объем (кВт.ч)

			//Пример вызова функции в SQL-менеджере:
			НовСтр = ТЗ.Добавить();
			НовСтр.Ид						= ЗаписиSQL.Fields("Id").Value;
			НовСтр.НомерДоговора			= ЗаписиSQL.Fields("Number").Value;
			НовСтр.НаименованиеПолное		= ЗаписиSQL.Fields("ContractorLongName").Value;
			НовСтр.НаименованиеКраткое		= ЗаписиSQL.Fields("ContractorShortName").Value;
			НовСтр.ИНН						= ЗаписиSQL.Fields("ContractorInn").Value;
			НовСтр.КПП						= ЗаписиSQL.Fields("ContractorKpp").Value;
			НовСтр.ЮридическийАдрес			= ЗаписиSQL.Fields("ContractorAdrStr").Value;
			НовСтр.ФактическийАдрес			= ЗаписиSQL.Fields("ContractorFAdrStr").Value;
			НовСтр.СуммаКассовыхПлатежей	= ЗаписиSQL.Fields("ContractPaydeskSum").Value;
			
			ЗаписиSQL.MoveNext();	
		КонецЦикла;
		
		Возврат ТЗ;
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	

КонецФункции

Функция ПолучитьТаблицуСчетчиковИПоказаний(НомерЛС, ЮЛФЛ) Экспорт
	
	КодНастроек = ПолучитьКодНастроекБДИзНомераЛС(НомерЛС, ЮЛФЛ);
	СтруктураНастроек = АЭС_Стек.ПолучитьНастройкиСоединенияSQL(КодНастроек);
	
	Если СтруктураНастроек = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не СтруктураНастроек.РазрешитьЧтение Тогда
		Сообщить("Чтение из СТЕК не разрешено!");
		Возврат Неопределено;
	КонецЕсли;
	
	
	
	Попытка
		//Provider=SQLOLEDB.1
		Соединение = Новый COMОбъект("ADODB.Connection");
	    Соединение.Open("Provider="		+ СтруктураНастроек.ИмяПровайдера + ";
				|Persist Security Info=False;
				|User ID="			+ СтруктураНастроек.ИмяПользователя + ";
				|Password="			+ СтруктураНастроек.ПарольПользователя + ";
				|Initial Catalog="	+ СтруктураНастроек.ИмяБазы + ";
				//|=" + СтруктураНастроек. + ";
				|Data Source="		+ СтруктураНастроек.АдресСервера + ";");
	Исключение
		Сообщить(ОписаниеОшибки());
		Соединение = Неопределено;
	КонецПопытки;
	
	Если Соединение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	Попытка
		
		Команда = Новый COMОбъект("ADODB.Command");
		
		Команда.ActiveConnection = Соединение;
		Команда.CommandType = 1; //вызываем таб.функцию как запрос
		Команда.CommandText = 	"select * from [stack].[tfSelCounterDataByLsNumber] (" + НомерЛС + ")";
		
		adBigInt		= 20;	//Indicates an eight-byte signed integer (DBTYPE_I8).
		adTinyInt		= 16;	//Indicates a one-byte signed integer (DBTYPE_I1).
		adBoolean		= 11;	//Indicates a Boolean value (DBTYPE_BOOL).
		adParamInput	= 1;	//Default. Indicates that the parameter represents an input parameter.
		adParamOutput	= 2;	//Indicates that the parameter represents an output parameter.
		
		Param1 = Команда.CreateParameter("@LsNumber",		adBigInt,	adParamInput,	100,	НомерЛС); 
		Команда.Parameters.Append(Param1);
		
		//Сообщить(Команда.CommandText);
		ЗаписиSQL = Команда.Execute();
		
		Если ЗаписиSQL.EOF() Тогда
			//убрать за собой
			ЗаписиSQL = Неопределено;
			Команда = Неопределено;
			//Сообщить("Запрос не вернул ни одной строки", СтатусСообщения.Важное);
			Возврат Неопределено; // ошибка 
		КонецЕсли;
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("ИдентификаторСчетчика");
		ТЗ.Колонки.Добавить("НаименованиеТипаСчетчика");
		ТЗ.Колонки.Добавить("НомерСчетчика");
		ТЗ.Колонки.Добавить("ШкальностьТарифность");
		ТЗ.Колонки.Добавить("ЛимитПоказания");
		ТЗ.Колонки.Добавить("ПредыдущееПоказание1");
		ТЗ.Колонки.Добавить("ПредыдущееПоказание2");
		ТЗ.Колонки.Добавить("ПредыдущееПоказание3");
		ТЗ.Колонки.Добавить("ТекущееПоказание1");
		ТЗ.Колонки.Добавить("ТекущееПоказание2");
		ТЗ.Колонки.Добавить("ТекущееПоказание3");
		//ТЗ.Колонки.Добавить("");
		Пока ЗаписиSQL.EOF() = 0 Цикл
			
			//Сообщить(ЗаписиSQL.Fields("RowID").Value);
			
			//[RowId]               -- Идентификатор счетчика
			//[TypeName]            -- Наименование типа счетчика
			//[Number]              -- Номер счетчика
			//[ScaleCount]          -- Шкальность/Тарифность (варианты: 1,2,3)
			//[ReadingLimit]        -- Лимит показания (показание должно быть меньше этой величины)
			//[ReadingValue1]       -- Предыдущее показание по шкале 1 (Название шкалы в зависимости от значения поля [ScaleCount]: 1-Сутки, 2-День, 3-Ночь)
			//[ReadingValue2]       -- Предыдущее показание по шкале 2 (Название шкалы в зависимости от значения поля [ScaleCount]: 2-Ночь, 3-Полупик)
			//[ReadingValue3]       -- Предыдущее показание по шкале 3 (Название шкалы в зависимости от значения поля [ScaleCount]: 3-
			НовСтр = ТЗ.Добавить();
			НовСтр.ИдентификаторСчетчика	= ЗаписиSQL.Fields("RowID").Value;
			НовСтр.НаименованиеТипаСчетчика	= ЗаписиSQL.Fields("TypeName").Value;
			НовСтр.НомерСчетчика			= ЗаписиSQL.Fields("Number").Value;
			НовСтр.ШкальностьТарифность		= ЗаписиSQL.Fields("ScaleCount").Value;
			НовСтр.ЛимитПоказания			= ЗаписиSQL.Fields("ReadingLimit").Value;
			НовСтр.ПредыдущееПоказание1		= ЗаписиSQL.Fields("ReadingValue1").Value;
			НовСтр.ПредыдущееПоказание2		= ЗаписиSQL.Fields("ReadingValue2").Value;
			НовСтр.ПредыдущееПоказание3		= ЗаписиSQL.Fields("ReadingValue3").Value;
			//НовСтр. = ЗаписиSQL.Fields("").Value;
			
			ЗаписиSQL.MoveNext();	
		КонецЦикла;
		
		Возврат ТЗ;
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

//табличная функция для получения информации о имеющейся ЗАДОЛЖЕННОСТИ (сальдо) на конец заданного периода
Функция ПолучитьТаблицуЗадолженностиФЛ(НомерЛС, ЮЛФЛ, лДата = Неопределено) Экспорт
	
	лПериод = ПолучитьСтрокуПериода(лДата);
	
	Если Не ЗначениеЗаполнено(лПериод) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КодНастроек = ПолучитьКодНастроекБДИзНомераЛС(НомерЛС, ЮЛФЛ);
	СтруктураНастроек = АЭС_Стек.ПолучитьНастройкиСоединенияSQL(КодНастроек);
	
	Если СтруктураНастроек = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не СтруктураНастроек.РазрешитьЧтение Тогда
		Сообщить("Чтение из СТЕК не разрешено!");
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		//Provider=SQLOLEDB.1
		Соединение = Новый COMОбъект("ADODB.Connection");
	    Соединение.Open("Provider="		+ СтруктураНастроек.ИмяПровайдера + ";
				|Persist Security Info=False;
				|User ID="			+ СтруктураНастроек.ИмяПользователя + ";
				|Password="			+ СтруктураНастроек.ПарольПользователя + ";
				|Initial Catalog="	+ СтруктураНастроек.ИмяБазы + ";
				//|=" + СтруктураНастроек. + ";
				|Data Source="		+ СтруктураНастроек.АдресСервера + ";");
	Исключение
		Сообщить(ОписаниеОшибки());
		Соединение = Неопределено;
	КонецПопытки;
	
	Если Соединение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	Попытка
		
		Команда = Новый COMОбъект("ADODB.Command");
		
		Команда.ActiveConnection = Соединение;
		Команда.CommandType = 1; //вызываем таб.функцию как запрос
		
							   //select * from [stack].[tfSelConsumerBalanceEDataByLsNumberAtMonth](69100131509, '20170101')
		Команда.CommandText = 	"select * from [stack].[tfSelConsumerBalanceEDataByLsNumberAtMonth] (" + НомерЛС + ", '" + лПериод + "')";
		
		adBigInt		= 20;	//Indicates an eight-byte signed integer (DBTYPE_I8).
		adTinyInt		= 16;	//Indicates a one-byte signed integer (DBTYPE_I1).
		adBoolean		= 11;	//Indicates a Boolean value (DBTYPE_BOOL).
		adParamInput	= 1;	//Default. Indicates that the parameter represents an input parameter.
		adParamOutput	= 2;	//Indicates that the parameter represents an output parameter.
		
		//Param1 = Команда.CreateParameter("@LsNumber",		adBigInt,	adParamInput,	100,	НомерЛС); 
		//Команда.Parameters.Append(Param1);
		
		//Сообщить(Команда.CommandText);
		ЗаписиSQL = Команда.Execute();
		
		Если ЗаписиSQL.EOF() Тогда
			//убрать за собой
			ЗаписиSQL = Неопределено;
			Команда = Неопределено;
			//Сообщить("Запрос не вернул ни одной строки", СтатусСообщения.Важное);
			Возврат Неопределено; // ошибка 
		КонецЕсли;
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("МесяцДолга");
		ТЗ.Колонки.Добавить("НомерУслуги");
		ТЗ.Колонки.Добавить("НаименованиеУслугиКраткое");
		ТЗ.Колонки.Добавить("НаименованиеУслугиПолное");
		ТЗ.Колонки.Добавить("Сальдо");
		ТЗ.Колонки.Добавить("Объем");
		ТЗ.Колонки.Добавить("ИсполнительУслуг");
		ТЗ.Колонки.Добавить("ИсполнительУслугНаименование");
		ТЗ.Колонки.Добавить("ИсполнительУслугНаименованиеПолное");
		ТЗ.Колонки.Добавить("ПоствщикУслуг");
		ТЗ.Колонки.Добавить("ПоствщикУслугНаименование");
		ТЗ.Колонки.Добавить("ПоствщикУслугНаименованиеПолное");
		ТЗ.Колонки.Добавить("Пени");
		//ТЗ.Колонки.Добавить("");
		Пока ЗаписиSQL.EOF() = 0 Цикл
			
			//[stack].[tfSelConsumerBalanceEDataByLsNumberAtMonth]
			//Входные параметры:
			//@LsNumber bigint,     -- Номер ЛС (по которому необходимо получить информацию)
			//@Month smalldatetime  -- Месяц (первое число месяца), на конец которого задолженность (сальдо)

			//Возвращаемые столбцы:
			//[BalanceMonth],                                   -- Месяц, за который долг
			//[SvcNumber],                                           -- Номер услуги
			//[SvcShortName],                                   -- Краткое наименование услуги
			//[SvcLongName],                                      -- Полное наименование услуги
			//[MoneyBalanceValue],                      -- Сальдо (сумма задолженности/переплаты в рублях, переплата – со знаком «-»)
			//[ConsumptionBalanceValue]         -- Объем (кВт.ч)

			//Пример вызова функции в SQL-менеджере:
			Если ЗаписиSQL.Fields("SvcNumber").Value = -1 Тогда
				ЗаписиSQL.MoveNext();	
				Продолжить;
			КонецЕсли;
			НовСтр = ТЗ.Добавить();
			НовСтр.МесяцДолга							= ЗаписиSQL.Fields("BalanceMonth").Value;
			НовСтр.НомерУслуги							= ЗаписиSQL.Fields("SvcNumber").Value;
			НовСтр.НаименованиеУслугиКраткое			= ЗаписиSQL.Fields("SvcShortName").Value;
			НовСтр.НаименованиеУслугиПолное				= ЗаписиSQL.Fields("SvcLongName").Value;
			НовСтр.Сальдо								= ЗаписиSQL.Fields("MoneyBalanceValue").Value;
			НовСтр.Объем								= ЗаписиSQL.Fields("ConsumptionBalanceValue").Value;
			НовСтр.ИсполнительУслуг						= ЗаписиSQL.Fields("ProviderRowId").Value;
			НовСтр.ИсполнительУслугНаименование			= ЗаписиSQL.Fields("ProviderShortName").Value;
			НовСтр.ИсполнительУслугНаименованиеПолное   = ЗаписиSQL.Fields("ProviderLongName").Value;
			НовСтр.ПоствщикУслуг						= ЗаписиSQL.Fields("SupplierRowId").Value;
			НовСтр.ПоствщикУслугНаименование			= ЗаписиSQL.Fields("SupplierShortName").Value;
			НовСтр.ПоствщикУслугНаименованиеПолное		= ЗаписиSQL.Fields("SupplierLongName").Value;
			НовСтр.Пени 								= Ложь;
			//НовСтр. = ЗаписиSQL.Fields("").Value;
			
			ЗаписиSQL.MoveNext();	
		КонецЦикла;
		
		//Команда = Новый COMОбъект("ADODB.Command");
		//
		//Команда.ActiveConnection = Соединение;
		//Команда.CommandType = 1; 
		Команда.CommandText = 	"select * from [stack].[tfSelConsumerFineBalanceEDataByLsNumberAtMonth] (" + НомерЛС + ", '" + лПериод + "')";
		ЗаписиSQL = Команда.Execute();
		Если ЗаписиSQL.EOF() Тогда
		КонецЕсли;
		
		Пока ЗаписиSQL.EOF() = 0 Цикл
			НовСтр = ТЗ.Добавить();
			
			НовСтр.МесяцДолга							= ЗаписиSQL.Fields("BalanceMonth").Value;
			НовСтр.НомерУслуги							= ЗаписиSQL.Fields("SvcNumber").Value;
			НовСтр.НаименованиеУслугиКраткое			= ЗаписиSQL.Fields("SvcShortName").Value;
			НовСтр.НаименованиеУслугиПолное				= ЗаписиSQL.Fields("SvcLongName").Value;
			НовСтр.Сальдо								= ЗаписиSQL.Fields("MoneyBalanceValue").Value;
			
			НовСтр.Объем								= 0;
			
			НовСтр.ИсполнительУслуг						= ЗаписиSQL.Fields("ProviderRowId").Value;
			НовСтр.ИсполнительУслугНаименование			= ЗаписиSQL.Fields("ProviderShortName").Value;
			НовСтр.ИсполнительУслугНаименованиеПолное   = ЗаписиSQL.Fields("ProviderLongName").Value;
			НовСтр.ПоствщикУслуг						= ЗаписиSQL.Fields("SupplierRowId").Value;
			НовСтр.ПоствщикУслугНаименование			= ЗаписиSQL.Fields("SupplierShortName").Value;
			НовСтр.ПоствщикУслугНаименованиеПолное		= ЗаписиSQL.Fields("SupplierLongName").Value;
			НовСтр.Пени									= Истина;
			ЗаписиSQL.MoveNext();	
		КонецЦикла;
		
		Возврат ТЗ;
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	
	
КонецФункции

//табличная функция для получения информации о имеющейся ЗАДОЛЖЕННОСТИ (сальдо) на конец заданного периода
Функция ПолучитьТаблицуЗадолженностиЮЛ(ИдДоговораЮЛ, Партнер, лДата = Неопределено) Экспорт
	
	лПериод = ПолучитьСтрокуПериода(лДата);
	
	Если Не ЗначениеЗаполнено(лПериод) Или Не ЗначениеЗаполнено(ИдДоговораЮЛ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПрефиксПартнера = АЭС_Сервер.ЧисловойПрефиксФОП(Партнер);
	
	КодНастроек = ПолучитьКодНастроекБДИзНомераЛС(ПрефиксПартнера, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	СтруктураНастроек = АЭС_Стек.ПолучитьНастройкиСоединенияSQL(КодНастроек);
	
	Если СтруктураНастроек = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не СтруктураНастроек.РазрешитьЧтение Тогда
		Сообщить("Чтение из СТЕК не разрешено!");
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		//Provider=SQLOLEDB.1
		Соединение = Новый COMОбъект("ADODB.Connection");
	    Соединение.Open("Provider="		+ СтруктураНастроек.ИмяПровайдера + ";
				|Persist Security Info=False;
				|User ID="			+ СтруктураНастроек.ИмяПользователя + ";
				|Password="			+ СтруктураНастроек.ПарольПользователя + ";
				|Initial Catalog="	+ СтруктураНастроек.ИмяБазы + ";
				//|=" + СтруктураНастроек. + ";
				|Data Source="		+ СтруктураНастроек.АдресСервера + ";");
	Исключение
		Сообщить(ОписаниеОшибки());
		Соединение = Неопределено;
	КонецПопытки;
	
	Если Соединение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	Попытка
		
		Команда = Новый COMОбъект("ADODB.Command");
		
		Команда.ActiveConnection = Соединение;
		Команда.CommandType = 1; //вызываем таб.функцию как запрос
		
							   //select * from [stack].[tfSelConsumerBalanceEDataByLsNumberAtMonth](69100131509, '20170101')
		Команда.CommandText = 	"select * from [stack].[tfSelInvoiceBalanceEDataByContractIdAtMonth] (" + ИдДоговораЮЛ + ", '" + лПериод + "')";
		
		adBigInt		= 20;	//Indicates an eight-byte signed integer (DBTYPE_I8).
		adTinyInt		= 16;	//Indicates a one-byte signed integer (DBTYPE_I1).
		adBoolean		= 11;	//Indicates a Boolean value (DBTYPE_BOOL).
		adParamInput	= 1;	//Default. Indicates that the parameter represents an input parameter.
		adParamOutput	= 2;	//Indicates that the parameter represents an output parameter.
		
		//Param1 = Команда.CreateParameter("@LsNumber",		adBigInt,	adParamInput,	100,	НомерЛС); 
		//Команда.Parameters.Append(Param1);
		
		//Сообщить(Команда.CommandText);
		ЗаписиSQL = Команда.Execute();
		
		Если ЗаписиSQL.EOF() Тогда
			//убрать за собой
			ЗаписиSQL = Неопределено;
			Команда = Неопределено;
			//Сообщить("Запрос не вернул ни одной строки", СтатусСообщения.Важное);
			Возврат Неопределено; // ошибка 
		КонецЕсли;
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Ид");
		ТЗ.Колонки.Добавить("Дата");
		ТЗ.Колонки.Добавить("Номер");
		ТЗ.Колонки.Добавить("ПолныйНомер");
		ТЗ.Колонки.Добавить("ВидСчета");
		ТЗ.Колонки.Добавить("НомерИсправления");
		ТЗ.Колонки.Добавить("Аналитика");
		ТЗ.Колонки.Добавить("Тема");
		ТЗ.Колонки.Добавить("Сальдо");
		ТЗ.Колонки.Добавить("Пени");
		//ТЗ.Колонки.Добавить("");
		Пока ЗаписиSQL.EOF() = 0 Цикл
			
			//[stack].[tfSelConsumerBalanceEDataByLsNumberAtMonth]
			//Входные параметры:
			//@LsNumber bigint,     -- Номер ЛС (по которому необходимо получить информацию)
			//@Month smalldatetime  -- Месяц (первое число месяца), на конец которого задолженность (сальдо)

			//Возвращаемые столбцы:
			//[BalanceMonth],                                   -- Месяц, за который долг
			//[SvcNumber],                                           -- Номер услуги
			//[SvcShortName],                                   -- Краткое наименование услуги
			//[SvcLongName],                                      -- Полное наименование услуги
			//[MoneyBalanceValue],                      -- Сальдо (сумма задолженности/переплаты в рублях, переплата – со знаком «-»)
			//[ConsumptionBalanceValue]         -- Объем (кВт.ч)

			//Пример вызова функции в SQL-менеджере:
			НовСтр = ТЗ.Добавить();
			НовСтр.Ид					= Формат(ЗаписиSQL.Fields("Id").Value, "ЧГ=0");
			НовСтр.Дата					= ЗаписиSQL.Fields("Date").Value;
			НовСтр.Номер				= ЗаписиSQL.Fields("Number").Value;
			НовСтр.ПолныйНомер			= ЗаписиSQL.Fields("FullNumber").Value;
			НовСтр.ВидСчета				= ЗаписиSQL.Fields("TypeNumber").Value;
			НовСтр.НомерИсправления		= ЗаписиSQL.Fields("CorrectNumber").Value;
			НовСтр.Аналитика			= ЗаписиSQL.Fields("AnalytStr").Value;
			НовСтр.Тема					= ЗаписиSQL.Fields("ThemeStr").Value;
			НовСтр.Сальдо				= ЗаписиSQL.Fields("MoneyBalanceValue").Value;
			НовСтр.Пени					= Ложь;
			//НовСтр. = ЗаписиSQL.Fields("").Value;
			
			ЗаписиSQL.MoveNext();	
		КонецЦикла;
		
		Возврат ТЗ;
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	
	
КонецФункции


 //табличная функция для получения информации о заданных на ЛС платежах, учитываемых после указанного периода
Функция ПолучитьТаблицуОплатФЛ(НомерЛС, ЮЛФЛ, лДата = Неопределено) Экспорт
	
	лПериод = ПолучитьСтрокуПериода(лДата);
	Если Не ЗначениеЗаполнено(лПериод) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КодНастроек = ПолучитьКодНастроекБДИзНомераЛС(НомерЛС, ЮЛФЛ);
	СтруктураНастроек = АЭС_Стек.ПолучитьНастройкиСоединенияSQL(КодНастроек);
	
	Если СтруктураНастроек = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не СтруктураНастроек.РазрешитьЧтение Тогда
		Сообщить("Чтение из СТЕК не разрешено!");
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		//Provider=SQLOLEDB.1
		Соединение = Новый COMОбъект("ADODB.Connection");
	    Соединение.Open("Provider="		+ СтруктураНастроек.ИмяПровайдера + ";
				|Persist Security Info=False;
				|User ID="			+ СтруктураНастроек.ИмяПользователя + ";
				|Password="			+ СтруктураНастроек.ПарольПользователя + ";
				|Initial Catalog="	+ СтруктураНастроек.ИмяБазы + ";
				//|=" + СтруктураНастроек. + ";
				|Data Source="		+ СтруктураНастроек.АдресСервера + ";");
	Исключение
		Сообщить(ОписаниеОшибки());
		Соединение = Неопределено;
	КонецПопытки;
	
	Если Соединение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	Попытка
		
		Команда = Новый COMОбъект("ADODB.Command");
		
		Команда.ActiveConnection = Соединение;
		Команда.CommandType = 1; //вызываем таб.функцию как запрос
		
		//Входные параметры:
		//@LsNumber bigint,     -- Номер ЛС (по которому необходимо получить информацию)
		//@Month smalldatetime  -- Месяц (первое число месяца), после которого (начиная со следующего) необходимо получить информацию о платежах (например, закрытый месяц для ЛС)
		
							   //select * from [stack].[tfSelConsumerBalanceEDataByLsNumberAtMonth](69100131509, '20170101')
		Команда.CommandText = 	"select * from [stack].[tfSelConsumerPaymentDataByLsNumberAfterMonth] (" + НомерЛС + ", '" + лПериод + "')";
		
		adBigInt		= 20;	//Indicates an eight-byte signed integer (DBTYPE_I8).
		adTinyInt		= 16;	//Indicates a one-byte signed integer (DBTYPE_I1).
		adBoolean		= 11;	//Indicates a Boolean value (DBTYPE_BOOL).
		adParamInput	= 1;	//Default. Indicates that the parameter represents an input parameter.
		adParamOutput	= 2;	//Indicates that the parameter represents an output parameter.
		
		//Param1 = Команда.CreateParameter("@LsNumber",		adBigInt,	adParamInput,	100,	НомерЛС); 
		//Команда.Parameters.Append(Param1);
		
		//Сообщить(Команда.CommandText);
		ЗаписиSQL = Команда.Execute();
		
		Если ЗаписиSQL.EOF() Тогда
			//убрать за собой
			ЗаписиSQL = Неопределено;
			Команда = Неопределено;
			//Сообщить("Запрос не вернул ни одной строки", СтатусСообщения.Важное);
			Возврат Неопределено; // ошибка 
		КонецЕсли;
		
		ТЗ = Новый ТаблицаЗначений;
		
		
		ТЗ.Колонки.Добавить("ДатаПлатежа");
		ТЗ.Колонки.Добавить("МесяцПлатежа");
		ТЗ.Колонки.Добавить("СуммаПлатежа");
		ТЗ.Колонки.Добавить("ИсточникПлатежаКраткое");
		ТЗ.Колонки.Добавить("ИсточникПлатежаПолное");
		ТЗ.Колонки.Добавить("ПериодОплатыНачальный");
		ТЗ.Колонки.Добавить("ПериодОплатыКонечный");
		ТЗ.Колонки.Добавить("ТипПлатежа");
		ТЗ.Колонки.Добавить("НомерУслуги");
		ТЗ.Колонки.Добавить("УслугаКраткое");
		ТЗ.Колонки.Добавить("УслугаПолное");
		//ТЗ.Колонки.Добавить("");
		
		Пока ЗаписиSQL.EOF() = 0 Цикл
			

			//Возвращаемые столбцы:
			//[PayDate],          -- Дата платежа
			//[PayMonth],         -- Месяц платежа (в котором учтен)
			//[PayValue],         -- Сумма платежа (в рублях)
			//[PayerShortName],   -- Краткое наименование источника платежа
			//[PayerLongName],    -- Полное наименование источника платежа
			//[BPayPeriod],       -- Начальный оплачиваемый период
			//[EPayPeriod],       -- Конечный оплачиваемый период
			//[PayType],          -- Тип платежа (аналогичен входному параметру в процедуре [stack].[pAddPaydeskPayment])
			//[PaySvcNumber],     -- Номер услуги (по которой платеж)
			//[PaySvcShortName],  -- Краткое наименование услуги (по которой платеж)
			//[PaySvcLongName]    -- Полное наименование услуги (по которой платеж)
			
			//Пример вызова функции в SQL-менеджере:
			//select * from [stack].[tfSelConsumerPaymentDataByLsNumberAfterMonth](69100131509, '20161201')
			
			НовСтр = ТЗ.Добавить();
			НовСтр.ДатаПлатежа				= ЗаписиSQL.Fields("PayDate").Value;
			НовСтр.МесяцПлатежа				= ЗаписиSQL.Fields("PayMonth").Value;
			НовСтр.СуммаПлатежа				= ЗаписиSQL.Fields("PayValue").Value;
			НовСтр.ИсточникПлатежаКраткое	= ЗаписиSQL.Fields("PayerShortName").Value;
			НовСтр.ИсточникПлатежаПолное	= ЗаписиSQL.Fields("PayerLongName").Value;
			НовСтр.ПериодОплатыНачальный	= ЗаписиSQL.Fields("BPayPeriod").Value;
			НовСтр.ПериодОплатыКонечный		= ЗаписиSQL.Fields("EPayPeriod").Value;
			НовСтр.ТипПлатежа				= ПрочеркЕслиNULL(ЗаписиSQL, "PayType");
			НовСтр.НомерУслуги				= ПрочеркЕслиNULL(ЗаписиSQL, "PaySvcNumber");
			НовСтр.УслугаКраткое			= ЗаписиSQL.Fields("PaySvcShortName").Value;
			НовСтр.УслугаПолное				= ЗаписиSQL.Fields("PaySvcLongName").Value;
			
			//НовСтр. = ЗаписиSQL.Fields("").Value;
			
			ЗаписиSQL.MoveNext();	
		КонецЦикла;
		
		Возврат ТЗ;
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	
	
КонецФункции

Функция ПолучитьСтрокуПериода(лДата) 
	
	Если ЗначениеЗаполнено(лДата) Тогда
		лПериод = лДата;
	Иначе
		лПериод = ДобавитьМесяц(ТекущаяДата(), -1);
	КонецЕсли;
	
	Если Год(лПериод) < 2000 Или Год(лПериод) > 2100 Тогда
		Возврат "";
	КонецЕсли;
	
	лПериод = Формат(НачалоМесяца(лПериод), "ДФ=yyyyMMdd");

	Возврат лПериод;
	
КонецФункции

Функция ПрочеркЕслиNULL(ЗаписиSQL, ИмяПоля)
	
	ТекЗнч = ЗаписиSQL.Fields(ИмяПоля).Value;
	
	Если ТекЗнч = NULL Или ТекЗнч = "" Тогда
		Возврат "-";
	Иначе
		Возврат ТекЗнч;
	КонецЕсли;
	
КонецФункции

// Регламентное задание. Отправляет по 10 чеков ККМ в СТЭК.
//
// Le8niD 13012016
Процедура АЭС_ОтправкаПлатежейВСТЕК(Порция = Неопределено) Экспорт
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///защита от запуска выгрузки из тестовой базы, если забыли поставить галку "Блокировка рег.заданий..."///////
	/// или если не отработала процедура ПроверитьУстановитьПараметрыТестовойБазы 
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////
	лПараметры = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединенияИнформационнойБазы());
	
	//Возврат;
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ИмяТекБазы = "Файловая";//назовем ее так
	Иначе
		ИмяТекБазы = СокрЛП(НРег(лПараметры.Ref));
	КонецЕсли;
	
	//ИмяБазыИзКонстанты = Константы.АЭС_ИмяБазы.Получить();
	
	Отладка = Истина;// в случае отладки - не происходит подключения к базе СТЕК и не происходит Execute
	
	Если Не АЭС_Сервер.ЭтоТестоваяБаза() Тогда
		Отладка = Ложь;
	//ИначеЕсли НРег(ИмяТекБазы) <> НРег(ИмяБазыИзКонстанты) Тогда
	//	// на случай включенных рег.заданий в тестовой базе
	//	Возврат;
	//ИначеЕсли НРег(ИмяТекБазы) <> НРег("ut_aes_msk") Тогда
	//	Возврат;
	КонецЕсли;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// запрос порции нужно делать только по тем записям в настройках которых
	//		разрешена запись
	//  	настройка не помечена на удаление
	//		код начинается с "0" или "1" (фл/юл)
	// иначе "выбрать первые 10" может давать один и тот же результат и никогда не выгрузиться
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АЭС_НастройкиБазДанных.Код
				   |ИЗ
				   |	Справочник.АЭС_НастройкиБазДанных КАК АЭС_НастройкиБазДанных
				   |ГДЕ
				   |	(АЭС_НастройкиБазДанных.РазрешитьЗапись Или &Отладка)
				   |	И НЕ АЭС_НастройкиБазДанных.ПометкаУдаления
				   |	И (ПОДСТРОКА(АЭС_НастройкиБазДанных.Код, 1, 1) = ""0""
				   |			ИЛИ ПОДСТРОКА(АЭС_НастройкиБазДанных.Код, 1, 1) = ""1"")";
				   
	Запрос.УстановитьПараметр("Отладка", Отладка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	СписокПрефиксовЛС = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокПрефиксовЛС.Добавить(Прав(Выборка.Код, 2));
	КонецЦикла;
	
	// выгрузка по ЮЛ пока отключена
	ВыгружатьЮЛ = Ложь;
	

	
	ЗаписьЖурналаРегистрации("ЗагрузкаЧековККМВСТЕК.Начало", УровеньЖурналаРегистрации.Информация, , , 	"Начата загрузка чеков ККМ в СТЕК");
	
	УстановитьПривилегированныйРежим(Истина);
	
	////////////////////////////////////////////// если включается выгрузка ЮЛ в СТЕК
	////////////////////////////////////////////// то изменить процедуру ПолучитьСуммуНаличныхНевыгруженныхПлатежей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	АЭС_ОчередьОтправкиПлатежейВСТЕК.ПрефиксЛС КАК ПрефиксЛС,
	|	АЭС_ОчередьОтправкиПлатежейВСТЕК.Платеж КАК Платеж,
	|	ВЫБОР
	|		КОГДА АЭС_ОчередьОтправкиПлатежейВСТЕК.Платеж.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|	КОНЕЦ КАК ЮридическоеФизическоеЛицо,
	|	АЭС_ОчередьОтправкиПлатежейВСТЕК.НомерСтрокиТЧ
	|ИЗ
	|	РегистрСведений.АЭС_ОчередьОтправкиПлатежейВСТЕК КАК АЭС_ОчередьОтправкиПлатежейВСТЕК
	|ГДЕ
	|	АЭС_ОчередьОтправкиПлатежейВСТЕК.Выгружать = ИСТИНА
	|	И ВЫБОР
	|			КОГДА &ВыгружатьЮЛ
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ АЭС_ОчередьОтправкиПлатежейВСТЕК.Платеж.Контрагент.ЮрФизЛицо <> ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		КОНЕЦ
	|	И НАЧАЛОПЕРИОДА(АЭС_ОчередьОтправкиПлатежейВСТЕК.Платеж.Дата, ДЕНЬ) = &ТекДата
	|	И АЭС_ОчередьОтправкиПлатежейВСТЕК.ПрефиксЛС В(&СписокПрефиксовЛС)
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрСведений.АЭС_ОчередьОтправкиПлатежейВСТЕК
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Платеж)
	|ПО
	|	ЮридическоеФизическоеЛицо,
	|	ПрефиксЛС";
	
	//Рег.заданием выгружаются только сегодняшние платежи
	//если выгрузка происходит позже, то выгружать вручную обработкой - для контроля
	Если Отладка Тогда
		Запрос.УстановитьПараметр("ТекДата", НачалоДня(Константы.АЭС_ДатаВыгрузкиПлатежейВСТЕК.Получить()))
	Иначе
		Запрос.УстановитьПараметр("ТекДата", НачалоДня(ТекущаяДата()));
	КонецЕсли;
	Запрос.УстановитьПараметр("ВыгружатьЮЛ", ВыгружатьЮЛ);
	Запрос.УстановитьПараметр("СписокПрефиксовЛС", СписокПрефиксовЛС);
	
	ТекПорция = 0;
	Если ЗначениеЗаполнено(Порция) Тогда
		ТекПорция = Порция;
	Иначе
		ТекПорция = Константы.АЭС_ПорцияВыгрузкиПлатежейВСТЕК.Получить();
	КонецЕсли;
	Если ТекПорция > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ ПЕРВЫЕ 10", "ВЫБРАТЬ ПЕРВЫЕ " + ТекПорция);
	Иначе
		//для сравнения с количеством выгруженных - ниже
		ТекПорция = 10;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЮЛФЛ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	Если ВыборкаЮЛФЛ.Количество() = 0 тогда
		
		ЗаписьЖурналаРегистрации("ЗагрузкаЧековККМВСТЕК.Окончание", УровеньЖурналаРегистрации.Информация, , , 	"Нет данных для выгрузки");

		Возврат;	
		
	Конецесли;
	
	// группировка выборки идет сначала по ЮЛ/ФЛ, потом по ФОП (префиксу)
	// таким образом выгружаются сначала (например) 
	ТекВремя = ТекущаяДата();	
	СчетчикВыгруженных = 0;
	СчетчикВыборки = 0;
	Пока ВыборкаЮЛФЛ.Следующий() Цикл
		
		ВыборкаПреф = ВыборкаЮЛФЛ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаПреф.Следующий() Цикл
			
			КодНастроек = ПолучитьКодНастроекБДИзНомераЛС(ВыборкаПреф.ПрефиксЛС, ВыборкаЮЛФЛ.ЮридическоеФизическоеЛицо); 
			СтруктураНастроек =	ПолучитьНастройкиСоединенияSQL(КодНастроек);///!!!! передавать отладку
			
			Если Не СтруктураНастроек.РазрешитьЗапись И Не Отладка Тогда
				// для этой базы запись не разрешена, переходим к следующему ФОП
				Сообщить("Запись в СТЕК не разрешена!");
				Продолжить;
			КонецЕсли;
			
			ПодключениеСТЕК = ПолучитьСоединениеСSQL(СтруктураНастроек);
			
			Если ПодключениеСТЕК = Неопределено И Не Отладка Тогда
				ЗаписьЖурналаРегистрации("ЗагрузкаЧековККМВСТЕК.Окончание", УровеньЖурналаРегистрации.Предупреждение, ,,
				"Не удалось подключиться к базе СТЕК");
				Продолжить;;
			КонецЕсли;
			
			
			Выборка = ВыборкаПреф.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				СчетчикВыборки = СчетчикВыборки + 1;
				Если ВыгрузитьПлатежВСтек(Выборка.Платеж, Выборка.НомерСтрокиТЧ, ПодключениеСТЕК, Отладка) Тогда
					СчетчикВыгруженных = СчетчикВыгруженных + 1;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЦикла;
	
	Если СчетчикВыборки <> СчетчикВыгруженных Тогда
		АЭС_Сервер.СообщениеАдминистратору("Количество в выборке для выгрузки в СТЕК " + СчетчикВыборки + ". Выгружено " + СчетчикВыгруженных);
	КонецЕсли;
	
	Длителность = Строка(ТекущаяДата() - ТекВремя) + " сек";
	ЗаписьЖурналаРегистрации("ЗагрузкаЧековККМВСТЕК", УровеньЖурналаРегистрации.Информация, , ,
	"Завершена загрузка чеков ККМ в СТЕК. " + ТекПорция + " за " + Длителность);

	//****** ОбращенияКоллЦентра ****** ОбращенияКоллЦентра ******
	ПолучитьНеобработанныеОбращенияКоллЦентраНаСервере();
	ВыгрузитьСостояниеБизнесПроцессовЗаданийНаСервере();

	
КонецПроцедуры


Функция ПолучитьКодНастроекБДИзНомераЛС(НомерЛС, ЮЛФЛ)
	
	//НомерЛС - номер лицевого счета или префикс ФОП

	Если ЮЛФЛ = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		// это ЮЛ (не ФЛ)
		Рез = "0" + Лев(НомерЛС, 2);
		
	ИначеЕсли ЮЛФЛ = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		
		Рез = "1" + Лев(НомерЛС, 2);
		
	Иначе
		Рез = Неопределено;
	КонецЕсли;
	
	
	Возврат Рез;
	//Если ПрефФОП = "46"
	//	Или ПрефФОП = "51"
	//	Или ПрефФОП = ""
	//	Или ПрефФОП = ""
	
КонецФункции // ПолучитьПрефиксИзНомепраЛС()

Процедура ПередатьЕмайлВСтекВФоне(НомерЛС,Емайл) Экспорт	
	Соединение = Неопределено;
	Если Соединение = Неопределено Тогда		
		КодНастроек = ПолучитьКодНастроекБДИзНомераЛС(НомерЛС, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		СтруктураНастроек = АЭС_Стек.ПолучитьНастройкиСоединенияSQL(КодНастроек);
		
		Если СтруктураНастроек = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Не СтруктураНастроек.РазрешитьЧтение Тогда
			Сообщить("Чтение из СТЕК не разрешено!");
			Возврат;
		КонецЕсли;
		
		
		Попытка
			//Provider=SQLOLEDB.1
			Соединение = Новый COMОбъект("ADODB.Connection");
			Соединение.Open("Provider="		+ СтруктураНастроек.ИмяПровайдера + ";
			|Persist Security Info=False;
			|User ID="			+ СтруктураНастроек.ИмяПользователя + ";
			|Password="			+ СтруктураНастроек.ПарольПользователя + ";
			|Initial Catalog="	+ СтруктураНастроек.ИмяБазы + ";
			//|=" + СтруктураНастроек. + ";
			|Data Source="		+ СтруктураНастроек.АдресСервера + ";");
		Исключение
			Возврат;
			Соединение = Неопределено;
		КонецПопытки;
		
		Если Соединение = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	Команда = Новый COMОбъект("ADODB.Command");
	//Команда.ActiveConnection = Соединение;
	//Команда.CommandText = "set nocount on";
	//Записи = Команда.Execute();
	
	
	//!!!!Команда = Новый COMОбъект("ADODB.Command");
	Команда.ActiveConnection = Соединение;
	Команда.CommandType = 4; //хранимая процедура
	//Команда.CommandText = "exec [stack].[pGetConsumerDataByLsNumber] @LsNumber, @LsExisting out, @LsStateCode out";
	//Команда.CommandText = "[stack].[pGetConsumerDataByLsNumber]";
	Команда.CommandText = 	"stack.pSetEmailByLS";
	
	adBigInt		= 20;	//Indicates an eight-byte signed integer (DBTYPE_I8).
	adTinyInt		= 16;	//Indicates a one-byte signed integer (DBTYPE_I1).
	adBoolean		= 11;	//Indicates a Boolean value (DBTYPE_BOOL).
	adParamInput	= 1;	//Default. Indicates that the parameter represents an input parameter.
	adParamOutput	= 2;	//Indicates that the parameter represents an output parameter.
	adVarChar		= 200;//Indicates a string value.
	adInteger  		= 3;
	//СуществуетЛС = Неопределено;
	//СтатусЛС = Неопределено;
	//АдресЛС = Неопределено;
	//ФИОЛС = Неопределено;
	//Пар = Cmd.CreateParameter(Name, Value_Type, Param_type, Param_Lenght, Param_Value);
	//Param1 = Команда.CreateParameter("@LsNumber",		adBigInt,	adParamInput,	100,	Формат(ЛС, "ЧГ=0")); 
	
	//@LsNumber bigint,                  -- Номер ЛС (входной)
	//@LsExisting bit = null out,        -- Признак наличия ЛС (1 – есть, 0 - нет)
	//@LsStateCode tinyint = null out    -- Состояние ЛС (0 – используется, 1- не проживает, 2 - закрыт)
	//@AdrStr varchar(500) = null out,   -- Строка адреса
	//@AbName varchar(256) = null out    -- ФИО абонента (нанимателя)
	
	Попытка
		
		Param1 = Команда.CreateParameter("@LS",		adBigInt,	adParamInput,	100,	НомерЛС); 
		Команда.Parameters.Append(Param1);
		
		Param2 = Команда.CreateParameter("@EMAIL",		adVarChar,	adParamInput,	30,	Емайл);
		Команда.Parameters.Append(Param2);
		
		Информация = 0;
		Param3 = Команда.CreateParameter("@RESULT",		adInteger,	adParamOutput,	50,	Информация);
		Команда.Parameters.Append(Param3);
		
		Записи = Команда.Execute();
		
		Информация = Команда.Parameters(2).Value;
		
	Исключение		
		Возврат;
	КонецПопытки;
	
	
КонецПроцедуры

Процедура ПередатьЕмайлВСтек(НомерЛС,Емайл) Экспорт
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
    ПараметрыВыполнения = Новый Массив;
    ПараметрыВыполнения.Добавить(НомерЛС);
    ПараметрыВыполнения.Добавить(Емайл);
    
    ФоновыеЗадания.Выполнить("АЭС_Стек.ПередатьЕмайлВСтекВФоне",ПараметрыВыполнения,УникальныйИдентификатор);
	
КонецПроцедуры	



//КоллЦентр  **************************************************************************************************************************************************************
#Область КоллЦентр
  
Процедура ПолучитьНеобработанныеОбращенияКоллЦентраНаСервере()
	ТЗ = Неопределено;
	Порция = 11;
	Смещение = 0;
	Соединение = Неопределено;
	//Пока АЭС_КоллЦентр.ПолучитьНеобработанныеОбращения() Цикл
	Пока ПолучитьНеобработанныеОбращения(ТЗ, Порция, Смещение, Соединение) Цикл
	КонецЦикла;
	
	Если ТЗ <> Неопределено Тогда
		
		//ЭтотОбъект.ТаблицаОбращений.Загрузить(ТЗ);
		
		Для Каждого стрТЗ Из ТЗ Цикл
			СоздатьБизнесПроцесс_Задание_ДляКоллЦентра(стрТЗ);
		КонецЦикла;
	КонецЕсли;
	
	
	
КонецПроцедуры

Функция ПолучитьСоединениеСБазойКолцентра(КодНастройки)
	
	СтруктураНастроек = АЭС_Стек.ПолучитьНастройкиСоединенияSQL(КодНастройки);
	
	Если СтруктураНастроек = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не СтруктураНастроек.РазрешитьЧтение Тогда
		Сообщить("Чтение из колл-центра не разрешено!");
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяДрайвера			= ?(ЗначениеЗаполнено(СтруктураНастроек.ИмяПровайдера), СтруктураНастроек.ИмяПровайдера, "MySQL ODBC 3.51 Driver");
	АдресСервера		= СтруктураНастроек.АдресСервера;
	ИмяБазы				= СтруктураНастроек.ИмяБазы;
	ИмяПользователя		= СтруктураНастроек.ИмяПользователя;
	ПарольПользователя	= СтруктураНастроек.ПарольПользователя;
	Попытка
		
		Соединение = Новый COMОбъект("ADODB.Connection");
		СтрокаСоединенияСАстерискСервером   = 	"DRIVER={" + ИмяДрайвера + "};SERVER=" + АдресСервера + ";Port=3306;DATABASE=" + ИмяБазы + ";UID=" + ИмяПользователя + ";PWD=" + ПарольПользователя + ";";
		Соединение.ConnectionString = СтрокаСоединенияСАстерискСервером;
		Соединение.Open();
	Исключение
		Сообщить(ОписаниеОшибки());
		Соединение = Неопределено;
	КонецПопытки;

	Возврат Соединение;
	
КонецФункции

&НаСервере
Функция ПолучитьНеобработанныеОбращения(ТЗ, Порция, Смещение, Соединение) Экспорт

	ПолучатьСледующуюПорцию = Ложь;
	
	Если Соединение = Неопределено Тогда
		Соединение = ПолучитьСоединениеСБазойКолцентра("КЦ")
	КонецЕсли;
	
	Если Соединение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	Попытка
		//Сообщить("Выполнение запроса");
		Команда = Новый COMОбъект("ADODB.Command");
		Команда.ActiveConnection = Соединение;
		Команда.CommandType = 1; //вызываем таб.функцию как запрос   use atomcc;|
		
		
		Команда.CommandText = "set names cp1251;";
		Команда.Execute();
		
		Команда.CommandText = "call getAppeals(" + Порция + ", " + Смещение + ");";
		
		ЗаписиSQL = Команда.Execute();
		
		Если ЗаписиSQL.EOF() Тогда
			//убрать за собой
			ЗаписиSQL = Неопределено;
			Команда = Неопределено;
			//Сообщить("Запрос не вернул ни одной строки", СтатусСообщения.Важное);
			Возврат ПолучатьСледующуюПорцию; // ошибка 
		КонецЕсли;
		
		Если ТЗ = Неопределено Тогда
			
			ТЗ = Новый ТаблицаЗначений;
			
			ТЗ.Колонки.Добавить("id");
			ТЗ.Колонки.Добавить("theme_id");
			ТЗ.Колонки.Добавить("text");
			ТЗ.Колонки.Добавить("comment");
			ТЗ.Колонки.Добавить("user_phone");
			ТЗ.Колонки.Добавить("email");
			ТЗ.Колонки.Добавить("operator_login");
			ТЗ.Колонки.Добавить("operator_phone");
			ТЗ.Колонки.Добавить("region_id");
			ТЗ.Колонки.Добавить("ls");
			ТЗ.Колонки.Добавить("address");
			ТЗ.Колонки.Добавить("channel_id");
			ТЗ.Колонки.Добавить("external_id");
			ТЗ.Колонки.Добавить("c1_external_id");
			ТЗ.Колонки.Добавить("status_id");
			ТЗ.Колонки.Добавить("created_at");
			ТЗ.Колонки.Добавить("updated_at");
			ТЗ.Колонки.Добавить("completion_date");
			ТЗ.Колонки.Добавить("answer_id");
			
		КонецЕсли;
		СчТекПорции = 0;
		Пока ЗаписиSQL.EOF() = 0 Цикл
			СчТекПорции = СчТекПорции + 1;
			//Для Каждого Зап Из ЗаписиSQL.Fields Цикл
			//	Сообщить(ТипЗнч(Зап.Value));
			//КонецЦикла;
			
			НовСтр = ТЗ.Добавить();
			НовСтр.id 				=	ЗаписиSQL.Fields("id").Value;
			НовСтр.theme_id			=	ЗаписиSQL.Fields("theme_id").Value;
			//!!!!НовСтр.text 			=	ЗаписиSQL.Fields("text").Value;
			НовСтр.comment			=	ЗаписиSQL.Fields("comment").Value;
			НовСтр.user_phone		=	ЗаписиSQL.Fields("user_phone").Value;
			НовСтр.email			=	ЗаписиSQL.Fields("email").Value;
			НовСтр.operator_login	=	ЗаписиSQL.Fields("operator_login").Value;
			//НовСтр.operator_phone	=	ЗаписиSQL.Fields("operator_phone").Value;
			НовСтр.region_id		=	ЗаписиSQL.Fields("region_id").Value;
			НовСтр.ls				=	ЗаписиSQL.Fields("ls").Value;
			НовСтр.address		 	=	ЗаписиSQL.Fields("address").Value;
			НовСтр.channel_id		=	ЗаписиSQL.Fields("channel_id").Value;
			//НовСтр.external_id	 	=	ЗаписиSQL.Fields("external_id").Value;
			НовСтр.c1_external_id	=	ЗаписиSQL.Fields("1c_external_id").Value;
			НовСтр.status_id		=	ЗаписиSQL.Fields("status_id").Value;
			НовСтр.created_at		=	ЗаписиSQL.Fields("created_at").Value;
			НовСтр.updated_at		=	ЗаписиSQL.Fields("updated_at").Value;
			НовСтр.completion_date	=	ЗаписиSQL.Fields("completion_date").Value;
			НовСтр.answer_id		=	ЗаписиSQL.Fields("answer_id").Value;
			
			//ЗаписиSQL.Fields(0).Name
			ЗаписиSQL.MoveNext();	
			
			Смещение = Смещение + 1;
			
		КонецЦикла;
		
		Если СчТекПорции < Порция Тогда
			ПолучатьСледующуюПорцию = Ложь;
		Иначе
			ПолучатьСледующуюПорцию = Истина;
		КонецЕсли;
		
	Исключение
		Сообщить(ОписаниеОшибки());
		ПолучатьСледующуюПорцию  = Ложь;
	КонецПопытки;

	Возврат ПолучатьСледующуюПорцию;
	
КонецФункции // ПолучитьНеобработанныеОбращения()

&НаСервере
Функция СоздатьБизнесПроцесс_Задание_ДляКоллЦентра(стрТЗ)

	Попытка
		ЧслУИД = Число(стрТЗ.id);  	//ТаблицаОбращений[стрТЗ].id);
		УИД = Формат(ЧслУИД, "ЧГ=0");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;	
	КонецПопытки;
	
	Попытка
		НачатьТранзакцию();
		
		БизнесПроцессСсылка = БизнесПроцессы.Задание.НайтиПоРеквизиту("НомерОбращенияКоллЦентра", УИД);
		Если ЗначениеЗаполнено(БизнесПроцессСсылка) И Не БизнесПроцессСсылка.ПометкаУдаления Тогда
			//пока возврат
			Возврат Ложь;
			//!!!! возможно потом удалять/прерывать и создавать новый,
			//БизнесПроцессОб = БизнесПроцессСсылка.ПолучитьОбъект();
			//БизнесПроцессОб.Удалить();
		Иначе
			БизнесПроцессОб = БизнесПроцессы.Задание.СоздатьБизнесПроцесс();
			БизнесПроцессОб.Дата = ТекущаяДата();

		КонецЕсли;
		
		
		
		//БизнесПроцессОб.Предмет = СтрокаТаблицы.Документ;
		БизнесПроцессОб.Предмет = СоздатьПустойЗаказПокупателя(БизнесПроцессОб, стрТЗ.region_id);
		БизнесПроцессОб.Исполнитель = ПолучитьИсполнителяПоDepartmentID(стрТЗ.department_id);
		БизнесПроцессОб.Проверяющий = ПолучитьПроверяющегоПоDepartmentID(стрТЗ.department_id);
		БизнесПроцессОб.НаПроверке = Истина;
		БизнесПроцессОб.Наименование = "Обращение №" + УИД + ". Замена/установка ПУ";
		БизнесПроцессОб.Содержание = ПолучитьОписаниеЗадачи(стрТЗ);
		БизнесПроцессОб.СрокИсполнения	= ТекущаяДата() + 86400;	// пока сутки
		БизнесПроцессОб.СрокПроверки	= ТекущаяДата() + 86400*2;	// пока 2 суток
		БизнесПроцессОб.Автор = Справочники.Пользователи.НайтиПоНаименованию("Колл-центр");
		БизнесПроцессОб.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		
		//новые реквизиты БП
		БизнесПроцессОб.НомерОбращенияКоллЦентра = УИД;
		БизнесПроцессОб.ВыгружатьВКоллЦентр = Истина;
		
		
		БизнесПроцессОб.Записать();
		
		БизнесПроцессОб.Старт();
		
		ЗафиксироватьТранзакцию();
		
		
	
	Исключение
		ОтменитьТранзакцию();
		//Сообщить(ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("СозданиеБП_Задание_ДляКоллЦентра", УровеньЖурналаРегистрации.Информация, , ,	""+ОписаниеОшибки());

		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	

КонецФункции // СозданиеЗадачКоллЦентра()

Функция СоздатьПустойЗаказПокупателя(БизнесПроцессОб, ПрефиксРегиона)

	Если Ложь Тогда БизнесПроцессОб = БизнесПроцессы.Задание.СоздатьБизнесПроцесс(); КонецЕсли;
	
	//!!!!нет времени объяснять :)
	мСоответствиеОрганизаций = Новый Соответствие;
	мСоответствиеОрганизаций.Вставить("46", Справочники.Организации.НайтиПоНаименованию("КурскАтомЭнергоСбыт"));
	мСоответствиеОрганизаций.Вставить("51", Справочники.Организации.НайтиПоНаименованию("КолАтомЭнергоСбыт"));
	мСоответствиеОрганизаций.Вставить("67", Справочники.Организации.НайтиПоНаименованию("СмоленскАтомЭнергоСбыт"));
	мСоответствиеОрганизаций.Вставить("69", Справочники.Организации.НайтиПоНаименованию("ТверьАтомЭнергоСбыт"));
	//мСоответствиеОрганизаций.Вставить("", Справочники.Организации.НайтиПоНаименованию(""));
	
	ЗаказОб = Документы.ЗаказКлиента.СоздатьДокумент();
	//ЗаказОб.Организация = БизнесПроцессОб.Исполнитель.ФОП.в
	ЗаказОб.Заполнить(БизнесПроцессОб);
	ЗаказОб.Дата = ТекущаяДата();
	ЗаказОб.Организация = мСоответствиеОрганизаций[ПрефиксРегиона];
	ЗаказОб.ОбменДанными.Загрузка = Истина;
	ЗаказОб.Записать();
	
	Возврат ЗаказОб.Ссылка;
	
КонецФункции // СоздатьПустойЗаказПокупателя()


&НаСервере
Функция ПолучитьИсполнителяПоDepartmentID(department_id)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураПредприятияДополнительныеРеквизиты.Ссылка
	|ПОМЕСТИТЬ НайденноеПодразделение
	|ИЗ
	|	Справочник.СтруктураПредприятия.ДополнительныеРеквизиты КАК СтруктураПредприятияДополнительныеРеквизиты
	|ГДЕ
	|	СтруктураПредприятияДополнительныеРеквизиты.Свойство.Наименование = ""ИдПодразделения (Структура предприятия)""
	|	И СтруктураПредприятияДополнительныеРеквизиты.Значение = &Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПредприятияДополнительныеРеквизиты.Значение
	|ИЗ
	|	Справочник.СтруктураПредприятия.ДополнительныеРеквизиты КАК СтруктураПредприятияДополнительныеРеквизиты
	|ГДЕ
	|	СтруктураПредприятияДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				НайденноеПодразделение.Ссылка
	|			ИЗ
	|				НайденноеПодразделение КАК НайденноеПодразделение)
	|	И СтруктураПредприятияДополнительныеРеквизиты.Свойство.Наименование = ""Ответственный оператор участка (Структура предприятия)""";
	
	Запрос.УстановитьПараметр("Значение", department_id);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	//Найденное
	
	Если ТЗ.Количество() = 1 Тогда
		Рез = ТЗ[0].Значение;
	Иначе
		Рез = Неопределено
	КонецЕсли;
	
	Возврат Рез;
	
	
КонецФункции // ПолучитьОтветственногоПоDepartmentID(стрТЗ.department_id)

&НаСервере
Функция ПолучитьПроверяющегоПоDepartmentID(department_id)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураПредприятияДополнительныеРеквизиты.Ссылка
	|ПОМЕСТИТЬ НайденноеПодразделение
	|ИЗ
	|	Справочник.СтруктураПредприятия.ДополнительныеРеквизиты КАК СтруктураПредприятияДополнительныеРеквизиты
	|ГДЕ
	|	СтруктураПредприятияДополнительныеРеквизиты.Свойство.Наименование = ""ИдПодразделения (Структура предприятия)""
	|	И СтруктураПредприятияДополнительныеРеквизиты.Значение = &Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПредприятияДополнительныеРеквизиты.Значение
	|ИЗ
	|	Справочник.СтруктураПредприятия.ДополнительныеРеквизиты КАК СтруктураПредприятияДополнительныеРеквизиты
	|ГДЕ
	|	СтруктураПредприятияДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				НайденноеПодразделение.Ссылка
	|			ИЗ
	|				НайденноеПодразделение КАК НайденноеПодразделение)
	|	И СтруктураПредприятияДополнительныеРеквизиты.Свойство.Наименование = ""Проверяющий исполнение задачи (Структура предприятия)""";
	
	Запрос.УстановитьПараметр("Значение", department_id);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	//Найденное
	
	Если ТЗ.Количество() = 1 Тогда
		Рез = ТЗ[0].Значение;
	Иначе
		Рез = Неопределено
	КонецЕсли;
	
	Возврат Рез;
	
	
КонецФункции // ПолучитьОтветственногоПоDepartmentID(стрТЗ.department_id)

Функция ПолучитьОписаниеЗадачи(стрТЗ)
	Рез = "";
	Рез = Рез + Символы.ПС + "Тел.: "					+ стрТЗ.user_phone;
	Рез = Рез + Символы.ПС + "л/с: "					+ стрТЗ.ls;
	//Рез = Рез + Символы.ПС + стрТЗ.fio;
	Рез = Рез + Символы.ПС + "Адрес: "					+ стрТЗ.address;
	Рез = Рез + Символы.ПС + "Доп. информация:"			+ стрТЗ.comment;
	Рез = Рез + Символы.ПС + "Оператора колл-центра: "	+ стрТЗ.operator_login;
	//Рез = Рез + Символы.ПС + стрТЗ.;
	Возврат СокрЛП(Рез);
КонецФункции


//************* выгрузка ********************************************************************
Процедура ВыгрузитьСостояниеБизнесПроцессовЗаданийНаСервере()
	
	Соединение = Неопределено;
	//Для Каждого ЭлСписка Из Элементы.СписокБизнесПроцессов.ВыделенныеСтроки Цикл
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задание.Ссылка,
		|	Задание.ВерсияДанных,
		|	Задание.ПометкаУдаления,
		|	Задание.Номер,
		|	Задание.Дата,
		|	Задание.Завершен,
		|	Задание.ВедущаяЗадача,
		|	Задание.Стартован,
		|	Задание.Автор,
		|	Задание.Важность,
		|	Задание.Выполнено,
		|	Задание.ГлавнаяЗадача,
		|	Задание.ДатаЗавершения,
		|	Задание.Исполнитель,
		|	Задание.Наименование,
		|	Задание.НаПроверке,
		|	Задание.НомерИтерации,
		|	Задание.Подтверждено,
		|	Задание.Предмет,
		|	Задание.Проверяющий,
		|	Задание.РезультатВыполнения,
		|	Задание.Содержание,
		|	Задание.Состояние,
		|	Задание.СрокИсполнения,
		|	Задание.СрокПроверки,
		|	Задание.АвторСтрокой,
		|	Задание.ВнешнееЗадание,
		|	Задание.ЗадачаИсточник,
		|	Задание.СодержаниеПредмета,
		|	Задание.ОсновнойОбъектАдресации,
		|	Задание.ОсновнойОбъектАдресацииПроверяющий,
		|	Задание.ДополнительныйОбъектАдресации,
		|	Задание.ДополнительныйОбъектАдресацииПроверяющий,
		|	Задание.ГруппаИсполнителейЗадач,
		|	Задание.ГруппаИсполнителейЗадачПроверяющий,
		|	Задание.НомерОбращенияКоллЦентра,
		|	Задание.ВыгружатьВКоллЦентр,
		|	Задание.Представление
		|ИЗ
		|	БизнесПроцесс.Задание КАК Задание
		|ГДЕ
		|	Задание.ВыгружатьВКоллЦентр = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВыгрузитьЗаданиеКоллЦентра(ВыборкаДетальныеЗаписи, Соединение);
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
		
		
	//КонецЦикла;
	
КонецПроцедуры

Функция ВыгрузитьЗаданиеКоллЦентра(БизнесПроцессЗадание, Соединение)
	
	Если Ложь Тогда БизнесПроцессЗадание = БизнесПроцессы.Задание.ПустаяСсылка(); КонецЕсли;
	
	//status_id - идентификатор статуса, возможные значения:
	//1 - Не обработано
	//2 - В процессе
	//3 – Обработано
	
	Статус = 1;// по умолчани.
	
	Если БизнесПроцессЗадание.Выполнено И БизнесПроцессЗадание.Подтверждено И БизнесПроцессЗадание.ВыгружатьВКоллЦентр Тогда
		Статус = 3;
	ИначеЕсли ЕстьЗадачаПроверить(БизнесПроцессЗадание) Тогда
		Статус = 2;
	КонецЕсли;
	
	Если Соединение = Неопределено Тогда
		Соединение = ПолучитьСоединениеСБазойКолцентра("КЦ")
	КонецЕсли;
	
	Попытка
		//Сообщить("Выполнение запроса");
		Команда = Новый COMОбъект("ADODB.Command");
		Команда.ActiveConnection = Соединение;
		Команда.CommandType = 1; //вызываем таб.функцию как запрос   use atomcc;|
		
		
		//Команда.CommandText = "set names cp1251;";
		//Команда.Execute();
		
		Команда.CommandText = "call updateAppeal(" + БизнесПроцессЗадание.НомерОбращенияКоллЦентра + ", """ + Строка(БизнесПроцессЗадание.УникальныйИдентификатор()) + """, " + Статус + ");";
		
		ЗаписиSQL = Команда.Execute();
		//если Execute прошел успешно, то снимаем признак ВыгружатьВКоллЦентр 
		
		
		Если Статус = 3 Тогда
			БизнесПроцессОб = БизнесПроцессЗадание.ПолучитьОбъект();
			БизнесПроцессОб.ВыгружатьВКоллЦентр = Ложь;
			БизнесПроцессОб.Записать();
		КонецЕсли;
		
	Исключение
	//	Сообщить(ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("СозданиеБП_Задание_ДляКоллЦентра", УровеньЖурналаРегистрации.Информация, , ,	""+ОписаниеОшибки());
	КонецПопытки;
КонецФункции // ВыгрузитьЗаданиеКоллЦентра()



Функция ЕстьЗадачаПроверить(БизнесПроцессЗадание) 
	//!!!!оптимизировать
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессЗадание);
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Задание.ТочкиМаршрута.Проверить);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Рез = Истина;		
	Иначе
		Рез = Ложь;
	КонецЕсли;;
	
	Возврат Рез;
	
КонецФункции




 #КонецОбласти 


