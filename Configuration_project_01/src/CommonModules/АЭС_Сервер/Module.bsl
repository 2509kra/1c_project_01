// обработчики подписок на события

Функция ПартнерНашеОПФилиалПоЧисловомуПрефиксу(ЧислПрефикс) Экспорт
	
	Если ЧислПрефикс = "46" Тогда
		Рез = Справочники.Партнеры.КурскАтомЭнергоСбыт;
	ИначеЕсли ЧислПрефикс = "51" Тогда
		Рез = Справочники.Партнеры.КолАтомЭнергоСбыт;
	ИначеЕсли ЧислПрефикс = "67" Тогда
		Рез = Справочники.Партнеры.СмоленскАтомЭнергоСбыт;
	ИначеЕсли ЧислПрефикс = "69" Тогда
		Рез = Справочники.Партнеры.ТверьАтомЭнергоСбыт;
	Иначе
		Рез = Неопределено;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции
Функция ЧисловойПрефиксФОП(Партнер) Экспорт
	
	Если Партнер = Справочники.Партнеры.КурскАтомЭнергоСбыт Тогда
		Рез = "46";
	ИначеЕсли Партнер = Справочники.Партнеры.КолАтомЭнергоСбыт Тогда
		Рез = "51";
	ИначеЕсли Партнер = Справочники.Партнеры.СмоленскАтомЭнергоСбыт Тогда
		Рез = "67";
	ИначеЕсли Партнер = Справочники.Партнеры.ТверьАтомЭнергоСбыт Тогда
		Рез = "69";
	Иначе
		Рез = Неопределено;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции


Процедура АЭС_ПередЗаписьюЭлементаСправочникаПередЗаписью(Источник, Отказ) Экспорт
	
	ТипЗначенияИсточника = ТипЗнч(Источник);
	
	Если ТипЗначенияИсточника = Тип("СправочникОбъект.Контрагенты") Тогда
		
		Если Ложь Тогда Источник = Справочники.Контрагенты.СоздатьЭлемент(); КонецЕсли;
		
		ЧислПрефикс = Лев(Источник.Код, 2);
		Источник.НомерЛС = Источник.Код;
		Источник.Партнер = ПартнерНашеОПФилиалПоЧисловомуПрефиксу(ЧислПрефикс);
		
	ИначеЕсли ТипЗначенияИсточника = Тип("СправочникОбъект.Пользователи") Тогда 
		
		Если Ложь Тогда Источник = Справочники.Пользователи.СоздатьЭлемент(); КонецЕсли;
		
		Если ПараметрыСеанса.ТекущийПользователь.ФОП <> Справочники.Партнеры.АтомЭнергоСбытЦА
			И Источник.ФОП = ПараметрыСеанса.ТекущийПользователь.ФОП Тогда
			Сообщить("Пользователю ФОП нельзя создавть пользователей других ФОП");
			Отказ = Истина;
		КонецЕсли;
		
	//ИначеЕсли ТипЗначенияИсточника = Тип("СправочникОбъект.") Тогда
	
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ФормаДокументаЧекККМ_ПриСозданииНаСервере(Объект, Элементы) Экспорт
	
	ЭтоНовый = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	Если ЭтоНовый Тогда
		Объект.Товары.Очистить();
		Объект.СчетчикиПоказания.Очистить();
		Объект.НомерЛС = Неопределено;
	КонецЕсли;
	
	ПолеЭлементВидПлатежа = Неопределено;
	
	Элементы.АЭС_ГруппаОплатаПоОсновнойДеятельности.Видимость = Ложь;
	Элементы.АЭС_ГруппаОплатаПоАгентскойДеятельности.Видимость = Ложь;
	Элементы.АЭС_ГруппаПродажаПоДоговоруКомиссии.Видимость = Ложь;
	Элементы.АЭС_ГруппаПродажаТоваров.Видимость = Ложь;
	Элементы.АЭС_ГруппаВозмещениеРасходовПоРешениюСудаИлиДобровольно.Видимость = Ложь;
	Элементы.АЭС_ГруппаИныеОперации.Видимость = Ложь;
	Элементы.АЭС_ГруппаОплатаОтФизлицВПользу3хЛиц.Видимость = Ложь;
	
	Элементы.АЭС_ГруппаСуммаОплаты.Видимость = Ложь;
	Элементы.ПартнерДляЛС.Видимость = Ложь;
	Элементы.ЮЛФЛ.Видимость = Ложь;
	
	Элементы.Товары.Видимость = Ложь;
	Элементы.АЭС_ПередачаПоказаний.Видимость = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ВидОплаты) Тогда
		
		
	ИначеЕсли Объект.ВидОплаты = Справочники.АЭС_ВидОплаты.ОсновнаяДеятельность Тогда
		
		Если ЭтоНовый Тогда
			Объект.ПартнерДляЛС = ПараметрыСеанса.ТекущийПользователь.ФОП;
		КонецЕсли;
			
		Элементы.АЭС_ГруппаОплатаПоОсновнойДеятельности.Видимость = Истина;
		
		Элементы.ПартнерДляЛС.ТолькоПросмотр = Ложь;
		
		Элементы.ПартнерДляЛС.Видимость = Истина;
		Элементы.ЮЛФЛ.Видимость = Истина;
		Элементы.АЭС_ГруппаСуммаОплаты.Видимость = Истина;
		
		
		Элементы.Товары.Видимость = Ложь;
		Элементы.АЭС_ПередачаПоказаний.Видимость = Истина;
		
		ПолеЭлементВидПлатежа = Элементы.ВидПлатежаОД;
		
	ИначеЕсли Объект.ВидОплаты = Справочники.АЭС_ВидОплаты.ИныеОперации Тогда
		
		//партнера кассир выбирает сам
		//список выбора меняется от вида платежа
		Если ЭтоНовый Тогда
			Объект.ПартнерДляЛС = Неопределено;
		КонецЕсли;
		
		Элементы.АЭС_ГруппаИныеОперации.Видимость = Истина;
		
		//Элементы.ПартнерДляЛС.Видимость = Истина;
		//Элементы.ЮЛФЛ.Видимость = Истина;
		
		//Элементы.ПартнерДляЛС.ТолькоПросмотр = Ложь;
		
		Элементы.АЭС_ГруппаСуммаОплаты.Видимость = Истина;
		
		
		
		Элементы.АЭС_ПередачаПоказаний.Видимость = Ложь;
		
		ПолеЭлементВидПлатежа = Элементы.ВидПлатежаИныеОперации;
		
		
	ИначеЕсли Объект.ВидОплаты = Справочники.АЭС_ВидОплаты.ПродажаСобственныхТоваров Тогда
		
		Если ЭтоНовый Тогда
			Объект.КонтрагентТоварыИныеОперации = Справочники.Контрагенты.РозничныйПокупатель;
		КонецЕсли;
		
		Элементы.АЭС_ГруппаПродажаТоваров.Видимость = Истина;
		Элементы.Товары.Видимость = Истина;
		
		ПолеЭлементВидПлатежа = Неопределено;

	ИначеЕсли Объект.ВидОплаты = Справочники.АЭС_ВидОплаты.ПродажаТоваровПоДоговоруКомиссииГруппа Тогда
		
		Элементы.АЭС_ГруппаПродажаТоваров.Видимость = Истина;
		
		Элементы.Товары.Видимость = Истина;
		
		ПолеЭлементВидПлатежа = Неопределено;

	ИначеЕсли Объект.ВидОплаты = Справочники.АЭС_ВидОплаты.ОтключениеПодключение Тогда
		
		Если ЭтоНовый Тогда
			Объект.ПартнерДляЛС = ПараметрыСеанса.ТекущийПользователь.ФОП;
		КонецЕсли;
		
		
		//пока аналогично основной деятельности
		Элементы.АЭС_ГруппаОплатаПоОсновнойДеятельности.Видимость = Истина;
		
		Элементы.ПартнерДляЛС.Видимость = Истина;
		Элементы.ЮЛФЛ.Видимость = Истина;
		Элементы.ПартнерДляЛС.ТолькоПросмотр = Ложь;
		
		Элементы.АЭС_ГруппаСуммаОплаты.Видимость = Истина;
		
		Элементы.АЭС_ПередачаПоказаний.Видимость = Ложь;
		
		Элементы.Товары.Видимость = Ложь;
		
		ПолеЭлементВидПлатежа = Элементы.ВидПлатежаОД;
		
	ИначеЕсли Объект.ВидОплаты = Справочники.АЭС_ВидОплаты.ВозмещениеРасходовПоРешениюСудаИлиДобровольно Тогда
		
		Если ЭтоНовый Тогда
			Объект.ПартнерДляЛС = ПараметрыСеанса.ТекущийПользователь.ФОП;
		КонецЕсли;
		
		Элементы.АЭС_ГруппаВозмещениеРасходовПоРешениюСудаИлиДобровольно.Видимость = Истина;
		
		Элементы.ПартнерДляЛС.ТолькоПросмотр = Ложь;
		Элементы.ПартнерДляЛС.Видимость = Истина;
		Элементы.ЮЛФЛ.Видимость = Истина;
		
		Элементы.АЭС_ГруппаСуммаОплаты.Видимость = Истина;
		
		
		Элементы.Товары.Видимость = Ложь;
		Элементы.АЭС_ПередачаПоказаний.Видимость = Ложь;// при оплате штрафов пеней - показания не передаем
		
		ПолеЭлементВидПлатежа = Элементы.ВидПлатежаВозмещение;
		
	ИначеЕсли  Объект.ВидОплаты = Справочники.АЭС_ВидОплаты.ПриемОплатыОтФизЛицВПользу3хЛиц_ПлатежныйАгент Тогда
		
		Если ЭтоНовый Тогда
			//партнера кассир выбирает сам
			//список выбора меняется от вида платежа
			Объект.ПартнерДляЛС = Неопределено;
		КонецЕсли;
		
		Элементы.АЭС_ГруппаОплатаОтФизлицВПользу3хЛиц.Видимость = Истина;
		
		Элементы.ПартнерДляЛС.ТолькоПросмотр = Ложь;
		Элементы.ПартнерДляЛС.Видимость = Истина;
		Элементы.ЮЛФЛ.Видимость = Истина;
		
		Элементы.АЭС_ГруппаСуммаОплаты.Видимость = Истина;
		
		
		Элементы.Товары.Видимость = Ложь;
		Элементы.АЭС_ПередачаПоказаний.Видимость = Истина;
		
		ПолеЭлементВидПлатежа = Элементы.ВидПлатежаАД;
		
		
	Иначе
		
		Если ЭтоНовый Тогда
			Объект.ПартнерДляЛС = Неопределено;
		КонецЕсли;
		
		Элементы.АЭС_ГруппаОплатаПоОсновнойДеятельности.Видимость = Ложь;
		Элементы.АЭС_ГруппаОплатаПоАгентскойДеятельности.Видимость = Ложь;
		Элементы.АЭС_ГруппаСуммаОплаты.Видимость = Ложь;

		Элементы.ПартнерДляЛС.Видимость = Ложь;
		Элементы.ЮЛФЛ.Видимость = Ложь;
		
		Элементы.Товары.Видимость = Истина;
		Элементы.АЭС_ПередачаПоказаний.Видимость = Ложь;
		
	КонецЕсли;
	
	
	СписокВыбораПодчиненных = ПолучитьСписокПодчиненныхВидовПлатежаПоВидуОплаты(Объект.ВидОплаты);
	Если ПолеЭлементВидПлатежа <> Неопределено Тогда
		ПолеЭлементВидПлатежа.СписокВыбора.Очистить();
		ПолеЭлементВидПлатежа.РежимВыбораИзСписка = Истина;
		Для Каждого Эл Из СписокВыбораПодчиненных Цикл
			ПолеЭлементВидПлатежа.СписокВыбора.Добавить(Эл.Значение);
		КонецЦикла;
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура ФормаДокументаЧекККМ_ВидОплатыПриИзмененииНаСервере(Объект, Элементы, СканированиеШК = Ложь) Экспорт
	
	ЭтоНовый = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	Если ЭтоНовый Тогда
		Объект.Товары.Очистить();
		Объект.СчетчикиПоказания.Очистить();
		Объект.НомерЛС = Неопределено;
	КонецЕсли;
	
	
	ПолеЭлементВидПлатежа = Неопределено;
	
	Элементы.АЭС_ГруппаОплатаПоОсновнойДеятельности.Видимость = Ложь;
	Элементы.АЭС_ГруппаОплатаПоАгентскойДеятельности.Видимость = Ложь;
	Элементы.АЭС_ГруппаПродажаПоДоговоруКомиссии.Видимость = Ложь;
	Элементы.АЭС_ГруппаПродажаТоваров.Видимость = Ложь;
	Элементы.АЭС_ГруппаВозмещениеРасходовПоРешениюСудаИлиДобровольно.Видимость = Ложь;
	Элементы.АЭС_ГруппаИныеОперации.Видимость = Ложь;
	Элементы.АЭС_ГруппаОплатаОтФизлицВПользу3хЛиц.Видимость = Ложь;
	
	Элементы.АЭС_ГруппаСуммаОплаты.Видимость = Ложь;
	Элементы.ПартнерДляЛС.Видимость = Ложь;
	Элементы.ЮЛФЛ.Видимость = Ложь;
	
	Элементы.Товары.Видимость = Ложь;
	Элементы.АЭС_ПередачаПоказаний.Видимость = Ложь;
	
	
	
	Если Не ЗначениеЗаполнено(Объект.ВидОплаты) Тогда
		
		
	ИначеЕсли Объект.ВидОплаты = Справочники.АЭС_ВидОплаты.ОсновнаяДеятельность Тогда
		
		Если ЭтоНовый Тогда
			Объект.ПартнерДляЛС = ПараметрыСеанса.ТекущийПользователь.ФОП;
		КонецЕсли;
			
		Элементы.АЭС_ГруппаОплатаПоОсновнойДеятельности.Видимость = Истина;
		
		Элементы.ПартнерДляЛС.ТолькоПросмотр = Ложь;
		
		Элементы.ПартнерДляЛС.Видимость = Истина;
		Элементы.ЮЛФЛ.Видимость = Истина;
		Элементы.АЭС_ГруппаСуммаОплаты.Видимость = Истина;
		
		
		Элементы.Товары.Видимость = Ложь;
		Элементы.АЭС_ПередачаПоказаний.Видимость = Истина;
		
		ПолеЭлементВидПлатежа = Элементы.ВидПлатежаОД;
		
	ИначеЕсли Объект.ВидОплаты = Справочники.АЭС_ВидОплаты.ИныеОперации Тогда
		
		//партнера кассир выбирает сам
		//список выбора меняется от вида платежа
		Если ЭтоНовый Тогда
			Объект.ПартнерДляЛС = Неопределено;
		КонецЕсли;
		
		Элементы.АЭС_ГруппаИныеОперации.Видимость = Истина;
		
		//Элементы.ПартнерДляЛС.Видимость = Истина;
		//Элементы.ЮЛФЛ.Видимость = Истина;
		
		//Элементы.ПартнерДляЛС.ТолькоПросмотр = Ложь;
		
		Элементы.АЭС_ГруппаСуммаОплаты.Видимость = Истина;
		
		
		
		Элементы.АЭС_ПередачаПоказаний.Видимость = Ложь;
		
		ПолеЭлементВидПлатежа = Элементы.ВидПлатежаИныеОперации;
		
		
	ИначеЕсли Объект.ВидОплаты = Справочники.АЭС_ВидОплаты.ПродажаСобственныхТоваров Тогда
		
		Если ЭтоНовый Тогда
			Объект.КонтрагентТоварыИныеОперации = Справочники.Контрагенты.РозничныйПокупатель;
		КонецЕсли;
		
		Элементы.АЭС_ГруппаПродажаТоваров.Видимость = Истина;
		Элементы.Товары.Видимость = Истина;
		
		ПолеЭлементВидПлатежа = Неопределено;

	ИначеЕсли Объект.ВидОплаты = Справочники.АЭС_ВидОплаты.ПродажаТоваровПоДоговоруКомиссииГруппа Тогда
		
		Элементы.АЭС_ГруппаПродажаТоваров.Видимость = Истина;
		
		Элементы.Товары.Видимость = Истина;
		
		ПолеЭлементВидПлатежа = Неопределено;

	ИначеЕсли Объект.ВидОплаты = Справочники.АЭС_ВидОплаты.ОтключениеПодключение Тогда
		
		Если ЭтоНовый Тогда
			Объект.ПартнерДляЛС = ПараметрыСеанса.ТекущийПользователь.ФОП;
		КонецЕсли;
		
		
		//пока аналогично основной деятельности
		Элементы.АЭС_ГруппаОплатаПоОсновнойДеятельности.Видимость = Истина;
		
		Элементы.ПартнерДляЛС.Видимость = Истина;
		Элементы.ЮЛФЛ.Видимость = Истина;
		Элементы.ПартнерДляЛС.ТолькоПросмотр = Ложь;//!!!!????хм
		
		Элементы.АЭС_ГруппаСуммаОплаты.Видимость = Истина;
		
		Элементы.АЭС_ПередачаПоказаний.Видимость = Ложь;
		
		Элементы.Товары.Видимость = Ложь;
		
		ПолеЭлементВидПлатежа = Элементы.ВидПлатежаОД;
		
	ИначеЕсли Объект.ВидОплаты = Справочники.АЭС_ВидОплаты.ВозмещениеРасходовПоРешениюСудаИлиДобровольно Тогда
		
		Если ЭтоНовый Тогда
			Объект.ПартнерДляЛС = ПараметрыСеанса.ТекущийПользователь.ФОП;
		КонецЕсли;
		
		Элементы.АЭС_ГруппаВозмещениеРасходовПоРешениюСудаИлиДобровольно.Видимость = Истина;
		
		Элементы.ПартнерДляЛС.ТолькоПросмотр = Ложь;
		Элементы.ПартнерДляЛС.Видимость = Истина;
		Элементы.ЮЛФЛ.Видимость = Истина;
		
		Элементы.АЭС_ГруппаСуммаОплаты.Видимость = Истина;
		
		
		Элементы.Товары.Видимость = Ложь;
		Элементы.АЭС_ПередачаПоказаний.Видимость = Ложь;// при оплате штрафов пеней - показания не передаем
		
		ПолеЭлементВидПлатежа = Элементы.ВидПлатежаВозмещение;
		
	ИначеЕсли  Объект.ВидОплаты = Справочники.АЭС_ВидОплаты.ПриемОплатыОтФизЛицВПользу3хЛиц_ПлатежныйАгент Тогда
		
		Если ЭтоНовый Тогда
			//партнера кассир выбирает сам
			//список выбора меняется от вида платежа
			Объект.ПартнерДляЛС = Неопределено;
		КонецЕсли;
		
		Элементы.АЭС_ГруппаОплатаОтФизлицВПользу3хЛиц.Видимость = Истина;
		
		Элементы.ПартнерДляЛС.ТолькоПросмотр = Ложь;
		Элементы.ПартнерДляЛС.Видимость = Истина;
		Элементы.ЮЛФЛ.Видимость = Истина;
		
		Элементы.АЭС_ГруппаСуммаОплаты.Видимость = Истина;
		
		
		Элементы.Товары.Видимость = Ложь;
		Элементы.АЭС_ПередачаПоказаний.Видимость = Истина;
		
		ПолеЭлементВидПлатежа = Элементы.ВидПлатежаАД;
		
		
	Иначе
		
		Если ЭтоНовый Тогда
			Объект.ПартнерДляЛС = Неопределено;
		КонецЕсли;
		
		Элементы.АЭС_ГруппаОплатаПоОсновнойДеятельности.Видимость = Ложь;
		Элементы.АЭС_ГруппаОплатаПоАгентскойДеятельности.Видимость = Ложь;
		Элементы.АЭС_ГруппаСуммаОплаты.Видимость = Ложь;

		Элементы.ПартнерДляЛС.Видимость = Ложь;
		Элементы.ЮЛФЛ.Видимость = Ложь;
		
		Элементы.Товары.Видимость = Истина;
		Элементы.АЭС_ПередачаПоказаний.Видимость = Ложь;
		
	КонецЕсли;
	
	
	СписокВыбораПодчиненных = ПолучитьСписокПодчиненныхВидовПлатежаПоВидуОплаты(Объект.ВидОплаты);
	Если ПолеЭлементВидПлатежа <> Неопределено Тогда
		ПолеЭлементВидПлатежа.СписокВыбора.Очистить();
		ПолеЭлементВидПлатежа.РежимВыбораИзСписка = Истина;
		Для Каждого Эл Из СписокВыбораПодчиненных Цикл
			ПолеЭлементВидПлатежа.СписокВыбора.Добавить(Эл.Значение);
		КонецЦикла;
	КонецЕсли;
	
	
	
КонецПроцедуры


Процедура ФормаДокументаАЭС_Платежи_ЛицевойСчетОсновнойДеятельностиПриИзмененииНаСервере(Объект, Элементы) Экспорт
	
	ТекстОшибки = "";
	Если Не ЗначениеЗаполнено(Объект.НомерЛС) И ЗначениеЗаполнено(Объект.ЛицевойСчет) Тогда
		//НомерЛС чека ккм заполняется при интерактивном измененении ЛС,а прии вводе ШК, придется дополнить:
		Объект.НомерЛС = Объект.ЛицевойСчет.НомерЛС;
	КонецЕсли;
		
	
	Если ЗначениеЗаполнено(Объект.НомерЛС) Тогда
		
		Возврат; //!!!!пока заглушка
		СтруктураСтатуса = Неопределено;
		//АЭС_Стек.ПолучитьСтатусЛицевогоСчета(Объект.ЛицевойСчет.НомерЛС, Объект.ЛицевойСчет.ЮридическоеФизическоеЛицо, Неопределено);
		
		Если СтруктураСтатуса = Неопределено Тогда
			ТекстОшибки = "Не удалось определить статус лицевого счета!";
		ИначеЕсли СтруктураСтатуса.СуществуетЛС Тогда
			Если СтруктураСтатуса.СтатусЛС = 0 
				Или СтруктураСтатуса.СтатусЛС = NULL //если в стеке нул - значит нормально все
				Тогда
				//используется
				Элементы.ЛицевойСчетОД.ЦветТекстаЗаголовка = WebЦвета.Зеленый;
			ИначеЕсли СтруктураСтатуса.СтатусЛС = 1 Тогда
				//не проживает
				Элементы.ЛицевойСчетОД.ЦветТекстаЗаголовка = WebЦвета.Желтый;
			ИначеЕсли СтруктураСтатуса.СтатусЛС = 2 Тогда
				//закрыт
				Элементы.ЛицевойСчетОД.ЦветТекстаЗаголовка = WebЦвета.Красный;
			Иначе
				Элементы.ЛицевойСчетОД.ЦветТекстаЗаголовка = WebЦвета.Синий;
				//ТекстОшибки = "Не верный статус лицевого счета!";
			КонецЕсли;
		Иначе
			ТекстОшибки = "Не найден номер лицевого счета!";	
		КонецЕсли;
	Иначе
		ТекстОшибки = "Не заполнен номер лицевого счета!";
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Элементы.ЛицевойСчетОД.ЦветТекстаЗаголовка = Новый Цвет();
		Сообщить(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаДокументаАЭС_Платежи_ЗаполнитьТаблицуСчетчиковИПоказанияИзСТЕК(Объект, Элементы, Перезаполнять = Истина) Экспорт
	
	ТекстСообщения = "";
	// пока коментим - номера ЛС нет в документе
	//Если Не ЗначениеЗаполнено(Объект.НомерЛС) И ЗначениеЗаполнено(Объект.Контрагент.ЛицевойСчет) Тогда
	//	//НомерЛС чека ккм заполняется при интерактивном измененении ЛС,а прии вводе ШК, придется дополнить:
	//	Объект.НомерЛС = Объект.ЛицевойСчет.НомерЛС;
	//КонецЕсли;
	
	
	//Перезаполнять - если это отложенный чек, перезаполнять не нужно;
	// перезаполн
	Если Перезаполнять Тогда
		Объект.СчетчикиПоказания.Очистить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент.НомерЛС) Тогда
		
		Если Перезаполнять Тогда
			ТаблицаСчетчиковПоказаний = АЭС_Стек.ПолучитьТаблицуСчетчиковИПоказаний(Объект.Контрагент.НомерЛС, Объект.Контрагент.ЮридическоеФизическоеЛицо);
		Иначе
			ТаблицаСчетчиковПоказаний = Объект.СчетчикиПоказания;
		КонецЕсли;
		
		Для Каждого Эл Из Элементы.СчетчикиПоказания.ПодчиненныеЭлементы Цикл
			Эл.ТолькоПросмотр = Истина;
		КонецЦикла;
		
		Если ТаблицаСчетчиковПоказаний = Неопределено Или ТаблицаСчетчиковПоказаний.Количество() = 0 Тогда
			ТекстСообщения = "Не удалось получить данные о счетчиках!";
		Иначе
			ШкальностьТарифность = 1;
			Для Каждого СЧТ Из ТаблицаСчетчиковПоказаний Цикл
				Если ШкальностьТарифность < СЧТ.ШкальностьТарифность Тогда
					ШкальностьТарифность = СЧТ.ШкальностьТарифность;	
				КонецЕсли;
			КонецЦикла;
			
			Если ШкальностьТарифность = 3 Тогда
				
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияПредыдущееПоказание1.Заголовок = "Ночь";
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияПредыдущееПоказание2.Заголовок = "Полупик";
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияПредыдущееПоказание3.Заголовок = "Пик";
				
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияТекущееПоказание1.Заголовок = "Текущее Ночь";
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияТекущееПоказание2.Заголовок = "Текущее Полупик";
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияТекущееПоказание3.Заголовок = "Текущее Пик";
				
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияТекущееПоказание1.ТолькоПросмотр = Ложь;
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияТекущееПоказание2.ТолькоПросмотр = Ложь;
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияТекущееПоказание3.ТолькоПросмотр = Ложь;
				
				
			ИначеЕсли ШкальностьТарифность = 2 Тогда
				
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияПредыдущееПоказание1.Заголовок = "День";
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияПредыдущееПоказание2.Заголовок = "Ночь";
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияПредыдущееПоказание3.Видимость = Ложь;
				
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияТекущееПоказание1.Заголовок = "Текущее День";
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияТекущееПоказание2.Заголовок = "Текущее Ночь";
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияТекущееПоказание3.Видимость = Ложь;
				
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияТекущееПоказание1.ТолькоПросмотр = Ложь;
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияТекущееПоказание2.ТолькоПросмотр = Ложь;
				
				
			ИначеЕсли ШкальностьТарифность = 1 Тогда
				
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияПредыдущееПоказание1.Заголовок = "Сутки";
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияПредыдущееПоказание2.Видимость = Ложь;
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияПредыдущееПоказание3.Видимость = Ложь;
				
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияТекущееПоказание1.Заголовок = "Текущее Сутки";
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияТекущееПоказание2.Видимость = Ложь;
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияТекущееПоказание3.Видимость = Ложь;
				
				Элементы.СчетчикиПоказания.ПодчиненныеЭлементы.СчетчикиПоказанияТекущееПоказание1.ТолькоПросмотр = Ложь;
				
			КонецЕсли;
			

			Если Перезаполнять Тогда
				//!!!!????Объект.СчетчикиПоказания.Очистить();
				Для Каждого стрТЗ Из ТаблицаСчетчиковПоказаний Цикл
					стрТЧ = Объект.СчетчикиПоказания.Добавить();
					ЗаполнитьЗначенияСвойств(стрТЧ, стрТЗ);
				КонецЦикла;
			КонецЕсли;			
			
		КонецЕсли;
	Иначе
		//ТекстСообщения = "Не заполнен номер лицевого счета!";
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыгружатьПлатежВСТЕК(Источник) 
	
	Если Ложь Тогда Источник = Документы.АЭС_Платежи.СоздатьДокумент();КонецЕсли;
	
	Если Источник.ОсновнаяДеятельность.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЗапретОтменыПроведенияПлатежа(ИсточникСсылка, Сообщать = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АЭС_ПлатежиОсновнаяДеятельность.ДокументПродажи.Ссылка,
	|	NULL КАК ДокументПродажиСсылка1
	|ИЗ
	|	Документ.АЭС_Платежи.ОсновнаяДеятельность КАК АЭС_ПлатежиОсновнаяДеятельность
	|ГДЕ
	|	АЭС_ПлатежиОсновнаяДеятельность.ДокументПродажи.Статус = &Статус
	|	И АЭС_ПлатежиОсновнаяДеятельность.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	АЭС_ПлатежиТовары.ДокументПродажи.Ссылка
	|ИЗ
	|	Документ.АЭС_Платежи.Товары КАК АЭС_ПлатежиТовары
	|ГДЕ
	|	АЭС_ПлатежиТовары.ДокументПродажи.Статус = &Статус
	|	И АЭС_ПлатежиТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыЧековККМ.Пробит);
	Запрос.УстановитьПараметр("Ссылка", ИсточникСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Рез = Ложь;
	Иначе
		Рез = Истина;
		Выб = РезультатЗапроса.Выбрать();
		Если Сообщать Тогда
			Сообщить("Запрещена отмена проведения! Есть пробитые чеки:");
			Пока Выб.Следующий() Цикл
				Сообщить(Выб.Ссылка);				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
		
	Возврат Рез;
	
КонецФункции

Функция ПроверитьУстановитьПараметрыТестовойБазы() Экспорт

	Рез = Ложь;
	УстановитьПривилегированныйРежим(Истина);//чтоб не курочить роли
	
	лПараметры = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединенияИнформационнойБазы());
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ИмяТекБазы = "Файловая";//назовем ее так
	Иначе
		ИмяТекБазы = СокрЛП(НРег(лПараметры.Ref));
	КонецЕсли;
	
	
	ИмяБазыИзКонстанты = Константы.АЭС_ИмяБазы.Получить();
	
	Если НРег(ИмяТекБазы) <> НРег(ИмяБазыИзКонстанты) Тогда
		
		Попытка
			НачатьТранзакцию();
			
			Если  ЗначениеЗаполнено(ИмяБазыИзКонстанты)//обходим первый запуск рабочей базы, когда константа еще не заполнена
				И СнятьФлагиРазрешенияЗаписиВСТЕК()
				Тогда
				Константы.АЭС_ИмяБазы.Установить(ИмяТекБазы);//устанавливаем
				
				ТекЗаголовок = Константы.ЗаголовокСистемы.Получить();
				Константы.ЗаголовокСистемы.Установить("*** ТЕСТ *** " + ТекЗаголовок + "(" + ИмяТекБазы + ")");
				
				
				ЗафиксироватьТранзакцию();
				Рез = Истина;// только здесь возврат
			Иначе
				Если ЗначениеЗаполнено(ИмяБазыИзКонстанты) Тогда
					// что-то сбойнуло при изменении
					ОтменитьТранзакцию();
				Иначе
					// имя пустое - это первый запуск
					// т.к. константу АЭС_ИмяБазы нельзя очистить
					// установим константу
					Константы.АЭС_ИмяБазы.Установить(ИмяТекБазы);//устанавливаем
					
					ЗафиксироватьТранзакцию();
					
					Рез = Истина;
				КонецЕсли;
			КонецЕсли;
			
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
	Иначе
		//имена равны
		Рез = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);//снимаем
	
	Возврат Рез;


КонецФункции // ()

Функция СнятьФлагиРазрешенияЗаписиВСТЕК()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АЭС_НастройкиБазДанных.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.АЭС_НастройкиБазДанных КАК АЭС_НастройкиБазДанных
	|ГДЕ
	|	ИСТИНА //пока все
	|	И АЭС_НастройкиБазДанных.РазрешитьЗапись";
	
	//Запрос.УстановитьПараметр("", );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		Если Ложь Тогда СпрОб = Справочники.АЭС_НастройкиБазДанных.СоздатьЭлемент(); КонецЕсли;
			
		СпрОб.РазрешитьЗапись = Ложь;
		СпрОб.АдресСервера = "10.1.1.28";// сейчас тестовые базы на srv-bd.aescorp.ru
		
		СпрОб.Записать();
		
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // СнятьФлагиРазрешенияЗаписиВСТЕК()

Функция ПолучитьНоменклатуруПоВидуОплаты(ВидОплаты, ВидПлатежа = Неопределено) Экспорт 

	//простите потомки за "НайтиПоКоду" :)
	
	Если ВидОплаты = Справочники.АЭС_ВидОплаты.ОсновнаяДеятельность Тогда
		//здесь только электороэнергия (по кр.мере пока )
		Возврат Справочники.Номенклатура.НайтиПоКоду("00000002299");
	ИначеЕсли ВидОплаты = Справочники.АЭС_ВидОплаты.ВозмещениеРасходовПоРешениюСудаИлиДобровольно Тогда
		
		Возврат Справочники.Номенклатура.ВозмещениеРасходовПоРешениюСудаИлиДобровольно;
		
	ИначеЕсли ВидОплаты = Справочники.АЭС_ВидОплаты.ПриемОплатыОтФизЛицВПользу3хЛиц_ПлатежныйАгент Тогда
		
		Возврат Справочники.Номенклатура.УслугаПриемаПлатежа;
		
	ИначеЕсли ВидОплаты = Справочники.АЭС_ВидОплаты.ОтключениеПодключение Тогда
		
		Если ВидПлатежа = Справочники.АЭС_ВидОплаты.Отключение Тогда
			Возврат Справочники.Номенклатура.НайтиПоКоду("00000006266");
		ИначеЕсли ВидПлатежа = Справочники.АЭС_ВидОплаты.Подключение Тогда
			Возврат Справочники.Номенклатура.НайтиПоКоду("00000005304");
		Иначе
			Возврат Неопределено;
		КонецЕсли; 
		
	ИначеЕсли ВидОплаты = Справочники.АЭС_ВидОплаты.ИныеОперации Тогда
		Возврат Справочники.Номенклатура.ПриемОплатыИныеОперации;
	//ИначеЕсли ВидОплаты = Справочники.АЭС_ВидОплаты. Тогда
	//	Возврат Справочники.Номенклатура.НайтиПоКоду("");
	
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПолучитьНоменклатуруПоВидуОплаты(Объект.ВидОплаты)()

//есть смысл перенести в модуль с повт.использованием
Функция ПолучитьНастройкиПлатежейПоНомеруУслуги(лОрганизация, лНомерУслуги, лДата = Неопределено, Пени) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АЭС_НастройкиПлатежейСрезПоследних.ВидДокумента КАК ВидДокумента,
	|	АЭС_НастройкиПлатежейСрезПоследних.ВидОплаты КАК ВидОплаты
	|ИЗ
	|	РегистрСведений.АЭС_НастройкиПлатежей.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ТипУслуги = &ТипУслуги
	|				И Пени = &Пени) КАК АЭС_НастройкиПлатежейСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", лДата);
	Запрос.УстановитьПараметр("Организация", лОрганизация);
	Запрос.УстановитьПараметр("ТипУслуги", лНомерУслуги);
	Запрос.УстановитьПараметр("Пени", Пени);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ВидОплаты",Неопределено);
	СтруктураРезультата.Вставить("ПризнакСпособаРасчета", Неопределено);
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		СтруктураРезультата = ОбработатьРезультатНастройкиПлатежей(лДата, Выборка.ВидОплаты, СтруктураРезультата);
	Иначе
		//м/б выдавать сообщение
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция ОбработатьРезультатНастройкиПлатежей(лДата, ВидОплаты, СтруктураРезультата) Экспорт
	ПризнакСпособаРасчета = ПолучитьПризнакиСпособаРасчета(лДата, ВидОплаты);
	СтруктураРезультата.Вставить("ПризнакСпособаРасчета", ПризнакСпособаРасчета);
	
	Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой и ВидОплаты = Справочники.АЭС_ВидОплаты.Электроэнергия_Аванс Тогда
		СтруктураРезультата.ВидОплаты = Справочники.АЭС_ВидОплаты.Электроэнергия;
	ИначеЕсли (ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная)
		и ВидОплаты = Справочники.АЭС_ВидОплаты.Электроэнергия Тогда 
		СтруктураРезультата.ВидОплаты = Справочники.АЭС_ВидОплаты.Электроэнергия_Аванс;
	Иначе
		СтруктураРезультата.ВидОплаты = ВидОплаты; 
	КонецЕсли;
	Возврат СтруктураРезультата;
КонецФункции

Функция ПолучитьПризнакиСпособаРасчета(ПериодПлатежаПо, ВидОплаты) Экспорт
	ПризнакСпособаРасчета = Неопределено;
	Если ПериодПлатежаПо<НачалоМесяца(ТекущаяДата()) ИЛИ 
		НЕ (ВидОплаты = Справочники.АЭС_ВидОплаты.Электроэнергия ИЛИ ВидОплаты = Справочники.АЭС_ВидОплаты.Электроэнергия_Аванс) Тогда  
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	Иначе
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
	КонецЕсли;
	Возврат ПризнакСпособаРасчета;
КонецФункции


Функция ПолучитьСписокПодчиненныхВидовПлатежаПоВидуОплаты(ВидОплаты)
	
	РезультатСписок = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ВидОплаты) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АЭС_ВидОплаты.Ссылка
		|ИЗ
		|	Справочник.АЭС_ВидОплаты КАК АЭС_ВидОплаты
		|ГДЕ
		|	АЭС_ВидОплаты.Ссылка В ИЕРАРХИИ(&ВидОплаты)
		|	И АЭС_ВидОплаты.Ссылка <> &ВидОплаты";
		
		Запрос.УстановитьПараметр("ВидОплаты", ВидОплаты);
		
		Результат = Запрос.Выполнить();
		
		РезультатСписок.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку(0));
		
	КонецЕсли;
	
	Возврат РезультатСписок;

КонецФункции

Процедура АЭС_ПриЗаписиПлатежаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Ложь Тогда Источник = Документы.АЭС_Платежи.СоздатьДокумент();КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Проведен	
		И Источник.Статус = Перечисления.СтатусыЧековККМ.Пробит
		И ВыгружатьПлатежВСТЕК(Источник)
		Тогда
		//ищем запись
		//если нет - добавляем с флагом "выгружать" и пустым идентификатором
		//если есть       
		//если не заполнен идентификатор - ставим флаг "выгружать"
		СписокВидовОплат = СписокВидовОплатВыгружаемыхВСТЕК();
		Если Ложь Тогда СписокВидовОплат = Новый СписокЗначений; КонецЕсли;
		
		Док = Источник.Ссылка;
		НЗ = РегистрыСведений.АЭС_ОчередьОтправкиПлатежейВСТЕК.СоздатьНаборЗаписей();
		НЗ.Отбор.Платеж.Установить(Док);
		НЗ.Прочитать();
		НЗКоличество = НЗ.Количество();
		НомерЛС = Источник.Контрагент.НомерЛС;
		ПрефНомерЛС = Лев(НомерЛС, 2);
		Если НЗКоличество = 0 Тогда
			Для Каждого стрТЧ Из Источник.ОсновнаяДеятельность Цикл
				
				//Если стрТЧ.ВидОплаты = Справочники.АЭС_ВидОплаты.Электроэнергия
				//	Или стрТЧ.ВидОплаты = Справочники.АЭС_ВидОплаты.Электроэнергия_Аванс
				//	Или стрТЧ.ВидОплаты = Справочники.АЭС_ВидОплаты.ПлатаЗаЭЭНаСодержаниеОИ
				//	Или стрТЧ.ВидОплаты = Справочники.АЭС_ВидОплаты.Пени 
				//	Или стрТЧ.ВидОплаты = Справочники.АЭС_ВидОплаты.БезучетноеПотребление
				//	Или стрТЧ.ВидОплаты = Справочники.АЭС_ВидОплаты.Госпошлина Тогда
				Если СписокВидовОплат.НайтиПоЗначению(стрТЧ.ВидОплаты) <> Неопределено
					Или ((ПрефНомерЛС = "51" Или ПрефНомерЛС = "67" Или ПрефНомерЛС = "46")// !!!! пока только для Мурманска, Смоленска и Курска
							И (стрТЧ.ВидОплаты = Справочники.АЭС_ВидОплаты.Отключение
							Или стрТЧ.ВидОплаты = Справочники.АЭС_ВидОплаты.Подключение))
					Тогда
					ЗаписьРС = НЗ.Добавить();
					ЗаписьРС.Платеж = Док;
					ЗаписьРС.Выгружать = Истина;
					ЗаписьРС.НомерСтрокиТЧ = стрТЧ.НомерСтроки;
					ЗаписьРС.ПрефиксЛС = Лев(НомерЛС, 2);
					ЗаписьРС.ИдентификаторПлатежаСТЕК = 0;
				КонецЕсли;
			КонецЦикла;
			Если НЗ.Количество() > 0 Тогда
				НЗ.Записать(Истина);
			КонецЕсли;
		ИначеЕсли НЗКоличество > 0 Тогда//это перепроведение
			
			//если в наборе количество записей отличается от количества строк ТЧ, то нужно проверить незаполненность ИдентификаторПлатежаСТЕК 
			//!!!!подумать что будет если изменить порядок строк в ТЧ
			Если НЗКоличество <> Источник.ОсновнаяДеятельность.Количество() Тогда
				
				// возможно добавили невыгружаемый видоплаты в табчасть "Основная деятельность"
				КолВыгружаемыхСтрок = 0;
				Для Каждого стрТЧ Из Источник.ОсновнаяДеятельность Цикл
					Если СписокВидовОплат.НайтиПоЗначению(стрТЧ.ВидОплаты) <> Неопределено Тогда
						КолВыгружаемыхСтрок = КолВыгружаемыхСтрок + 1;
					КонецЕсли;
				КонецЦикла;
				Если НЗКоличество <> КолВыгружаемыхСтрок Тогда
					Для каждого ЗаписьРС Из НЗ Цикл
						Если ЗначениеЗаполнено(ЗаписьРС.ИдентификаторПлатежаСТЕК) Тогда
							Отказ = Истина;
							Сообщить("По некоторым строкам уже произошла выгрузка в СТЕК - изменение количества строк запрещено!");
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если Не Отказ Тогда
				
				Для каждого ЗаписьРС Из НЗ Цикл
					
					Если ЗначениеЗаполнено(ЗаписьРС.ИдентификаторПлатежаСТЕК) Тогда
					Иначе
						ЗаписьРС.Выгружать = Истина;
						ЗаписьРС.ПрефиксЛС = Лев(Источник.Контрагент.НомерЛС, 2);
					КонецЕсли;
					
				КонецЦикла;
				НЗ.Записать(истина);
			КонецЕсли;
		Иначе
			Отказ = Истина;
			Сообщить("Ошибка регистра АЭС_ОчередьОтправкиПлатежейВСТЕК");
		КонецЕсли;
		
	ИначеЕсли Не Источник.Проведен И Источник.Ссылка.Проведен Тогда 
		
		// если есть хоть один пробитый чек или проведенный ПКО - отменять нельзя
		Отказ = Отказ Или ЗапретОтменыПроведенияПлатежа(Источник.Ссылка);
		
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура СообщениеАдминистратору(ТекстСообщения) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	МЗ = РегистрыСведений.АЭС_СообщенияАдминистратору.СоздатьМенеджерЗаписи();
	МЗ.Период = ТекущаяДата();
	МЗ.ГУИД = Новый УникальныйИдентификатор;
	МЗ.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	МЗ.Сообщение = ТекстСообщения;
	МЗ.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьУслугуСТЕКПоНомеру(НомерУслуги, Организация, Пени, НаименованиеКраткое = "", НаименованиеПолное = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АЭС_УслугиСТЕК.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.АЭС_УслугиСТЕК КАК АЭС_УслугиСТЕК
	|ГДЕ
	|	АЭС_УслугиСТЕК.НомерУслуги = &НомерУслуги
	|	И АЭС_УслугиСТЕК.Организация = &Организация
	|	И АЭС_УслугиСТЕК.Пени = &Пени";
	
	
	Запрос.УстановитьПараметр("НомерУслуги",	НомерУслуги);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Пени",	Пени);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Результат = СоздатьУслугуСТЕКПоНомеру(НомерУслуги, Организация, НаименованиеКраткое, НаименованиеПолное, Пени);
	Иначе
		
		Выб = РезультатЗапроса.Выбрать();
		Выб.Следующий();
		Результат = Выб.Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Функция СоздатьУслугуСТЕКПоНомеру(НомерУслуги, Организация, НаименованиеКраткое, НаименованиеПолное, Пени)
	
	УстановитьПривилегированныйРежим(Истина);
	НоваяУслуга = Справочники.АЭС_УслугиСТЕК.СоздатьЭлемент();
	НоваяУслуга.НомерУслуги = НомерУслуги;
	НоваяУслуга.Организация = Организация;
	НоваяУслуга.Наименование = НаименованиеКраткое;
	НоваяУслуга.НаименованиеПолное = НаименованиеПолное;
	НоваяУслуга.Пени = Пени;
	//НоваяУслуга.Номенклатура = ПолучитьНоменклатуруПоНаименованиюУслуги(НаименованиеКраткое, НаименованиеПолное);
	Попытка
		НоваяУслуга.Записать();
	    Рез = НоваяУслуга.Ссылка;
	Исключение
		Сообщить(ОписаниеОшибки());
		Рез = Неопределено;
	КонецПопытки;
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Рез;
	
КонецФункции

Функция ПолучитьНоменклатуруПоНаименованиюУслуги(НаименованиеКраткое, НаименованиеПолное) Экспорт
	
	Если ЗначениеЗаполнено(НаименованиеКраткое) Тогда
		НаименованиеПоиска = СокрЛП(НаименованиеКраткое);
	ИначеЕсли ЗначениеЗаполнено(НаименованиеПолное) Тогда
		НаименованиеПоиска = СокрЛП(НаименованиеПолное);
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
	//ищем номенклатуру-услугу по первому слову наименования услуги
	//Позиция первого пробела
	Поз1 = СтрНайти(НаименованиеПоиска, " ");
	Поз2 = СтрНайти(НаименованиеПоиска, ":");
	
	Если Поз1 > 0 И Поз2 > 0 Тогда
		Поз = Мин(Поз1, Поз2);
	ИначеЕсли Поз1 > 0 Тогда
		Поз = Поз1;
	ИначеЕсли Поз2 > 0 Тогда
		Поз = Поз2;
	КонецЕсли;
		
	
	
	НаименованиеПараметр = Сред(НаименованиеПоиска, 1, Поз - 1);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Наименование ПОДОБНО &Наименование
	|	И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеПараметр + "%");
	
	Результат = Запрос.Выполнить();
	//
	
	Если Результат.Пустой() Тогда
		//м/б создавать?7!!!!
	Иначе
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() > 0 Тогда
			СообщениеАдминистратору("Найдено несколько номенклатур-услуг по началу наименования: " + НаименованиеПараметр);
		КонецЕсли;
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;	
	
	
	
КонецФункции

Процедура УдалениеДокументовЧекККМ(Объект) Экспорт
	Для Каждого СТЧ из Объект Цикл
		Ошибка = УдалитьЧекККМ(СТЧ.ДокументПродажи);
		Если Не Ошибка Тогда
			СТЧ.ДокументПродажи = Документы.ЧекККМ.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция УдалитьЧекККМ(ДокументПродажи)Экспорт
	Если Не Документы.ЧекККМ.СтатусДокумента(ДокументПродажи) = Перечисления.СтатусыЧековККМ.Пробит И НЕ ДокументПродажи = Неопределено Тогда
		Если ЗначениеЗаполнено(ДокументПродажи) Тогда
			ДокОбъект = ДокументПродажи.ПолучитьОбъект();
			Если НЕ ДокОбъект = Неопределено Тогда 
				ДокОбъект.ПометкаУдаления = Истина;
				ДокОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

Функция ПолучитьСуммуНаличностиВКассеККМ(КассаККМ)Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДенежныеСредстваВКассахККМОстатки.СуммаОстаток КАК СуммаОстаток,
	               |	ДенежныеСредстваВКассахККМОстатки.СуммаАгОстаток
	               |ИЗ
	               |	РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(&Дата, КассаККМ = &КассаККМ) КАК ДенежныеСредстваВКассахККМОстатки";

	Запрос.УстановитьПараметр("Дата", КонецДня(ТекущаяДата())+1);
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	НаличностьВКассеККМ = Новый Структура;
	
	Если Выборка.Следующий() Тогда
		НаличностьВКассеККМ.Вставить("Сумма", Выборка.СуммаОстаток - ?(Выборка.СуммаАгОстаток>0, Выборка.СуммаАгОстаток, 0));
		НаличностьВКассеККМ.Вставить("СуммаАг", Выборка.СуммаАгОстаток);
		Возврат НаличностьВКассеККМ;
	Иначе
		Возврат НаличностьВКассеККМ;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПрефиксДокументаПоУчетнойПолитике(Источник, Префикс, ТипЗнчИсточник = Неопределено) Экспорт 
	
	Если ТипЗнчИсточник = Неопределено Тогда
		ТипЗнчИсточник = ТипЗнч(Источник);
	КонецЕсли;
	
	ТекстОшибки = "";
	Если ТипЗнчИсточник = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
		Или ТипЗнчИсточник = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
	
    	Если Ложь Тогда Источник = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент() КонецЕсли;

		Если Источник.АгентскийПлатеж Тогда
			Префикс = "А";
		Иначе
			Префикс = "";
		КонецЕсли;
		
		Префикс = Префикс + Источник.Организация.КодФОП;
		
		//добавляем код подразделения
		ИмяДопРеквизита = "Код подразделения (Структура предприятия)";
		ВладелецРеквизита = Источник.Касса.Подразделение;
		ТекРеквизит = ПолучитьЗначениеДопРеквизита(ИмяДопРеквизита, ВладелецРеквизита, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекРеквизит) Тогда
			Если СтрДлина(ТекРеквизит)  = 1 Тогда
				ТекРеквизит = "0" + ТекРеквизит;
			КонецЕсли;
			Префикс = Префикс + ТекРеквизит;
		КонецЕсли;
		Префикс = Префикс + "-";
		//добавляем порядковый номер кассового аппарата
		ИмяДопРеквизита = "Порядковый номер ККМ";
		ВладелецРеквизита = Источник.Касса;
		ТекРеквизит = ПолучитьЗначениеДопРеквизита(ИмяДопРеквизита, ВладелецРеквизита, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекРеквизит) Тогда
			Если СтрДлина(ТекРеквизит)  = 1 Тогда
				ТекРеквизит = "0" + ТекРеквизит;
			КонецЕсли;
			Префикс = Префикс + ТекРеквизит;
		КонецЕсли;
		
		Префикс = Префикс + "/";
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Сообщить(ТекстОшибки);
		СообщениеАдминистратору(ТекстОшибки);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеДопРеквизита(ИмяДопРеквизита, ВладелецРеквизита, ТекстОшибки = Неопределено)
	
	Результат = Неопределено;
	
	Если ТекстОшибки = Неопределено Тогда
		ТекстОшибки = "";
	КонецЕсли;
	
	ПВХ_КодПодразделения = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяДопРеквизита);
	Если ЗначениеЗаполнено(ПВХ_КодПодразделения) Тогда
		
		МассивРеквизитов = Новый Массив;
		МассивРеквизитов.Добавить(ПВХ_КодПодразделения);
		
		ЗначенияРеквизитовНоменклатуры = УправлениеСвойствами.ПолучитьЗначенияСвойств(ВладелецРеквизита, Истина, Ложь, МассивРеквизитов);
		Если ЗначенияРеквизитовНоменклатуры.Количество() = 1 Тогда
			Результат = ЗначенияРеквизитовНоменклатуры[0].Значение;
		ИначеЕсли ЗначенияРеквизитовНоменклатуры.Количество() = 0 Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + "Не заполнен доп.реквизит: " + ИмяДопРеквизита;	
		Иначе
			ТекстОшибки = ТекстОшибки + Символы.ПС + "Несколько доп.реквизитов: " + ИмяДопРеквизита;	
		КонецЕсли;
	Иначе
		ТекстОшибки = ТекстОшибки + Символы.ПС + "Не найден доп.реквизит: " + ИмяДопРеквизита;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначенияСвойства(ИмяСвойства, ВладелецСвойства, ТекстОшибки = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект = &Объект
	|	И ДополнительныеСведения.Свойство.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Объект", ВладелецСвойства);
	Запрос.УстановитьПараметр("Наименование", ИмяСвойства);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Значение;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЭтоТестоваяБаза() Экспорт 
	
	лПараметры = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединенияИнформационнойБазы());

	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ИмяТекБазы = "Файловая";//назовем ее так
	Иначе
		ИмяТекБазы = СокрЛП(НРег(лПараметры.Ref));
	КонецЕсли;
	
	Если НРег(ИмяТекБазы) = "ut_aes_msk" ИЛИ НРег(ИмяТекБазы) = "ut_aes_msk_new" Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

		
КонецФункции

Функция СписокВидовОплатВыгружаемыхВСТЕК() Экспорт 
	
	СЗ = Новый СписокЗначений;
	
	СЗ.Добавить(Справочники.АЭС_ВидОплаты.Электроэнергия);
	СЗ.Добавить(Справочники.АЭС_ВидОплаты.Электроэнергия_Аванс);
	СЗ.Добавить(Справочники.АЭС_ВидОплаты.ПлатаЗаЭЭНаСодержаниеОИ);
	СЗ.Добавить(Справочники.АЭС_ВидОплаты.Пени);
	СЗ.Добавить(Справочники.АЭС_ВидОплаты.БезучетноеПотребление);
	СЗ.Добавить(Справочники.АЭС_ВидОплаты.Госпошлина);
	СЗ.Добавить(Справочники.АЭС_ВидОплаты.ПриемУслугОтФизЛицВПользуПринципалаПоАгентскомуДоговору);
	СЗ.Добавить(Справочники.АЭС_ВидОплаты.ПроцентПоРеструктуризированнойЗадолженности);
	СЗ.Добавить(Справочники.АЭС_ВидОплаты.Отключение);
	СЗ.Добавить(Справочники.АЭС_ВидОплаты.Подключение);
	СЗ.Добавить(Справочники.АЭС_ВидОплаты.ПениПоСудебномуАкту);
	
	Возврат СЗ;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивПартнеровПоУмолчанию() Экспорт
	Партнеры = Новый Массив;
	Партнеры.Добавить(Справочники.Партнеры.КурскАтомЭнергоСбыт);
	Партнеры.Добавить(Справочники.Партнеры.КолАтомЭнергоСбыт);
	Партнеры.Добавить(Справочники.Партнеры.ТверьАтомЭнергоСбыт);
	Партнеры.Добавить(Справочники.Партнеры.СмоленскАтомЭнергоСбыт);
	Возврат Партнеры;
КонецФункции

Функция ПолучитьИформациюОКомиссии(Дата, ВходящиеДанные)Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АЭС_КомиссияНоменклатурыСрезПоследних.НоменклатураКомиссии КАК НоменклатураКомиссии,
	               |	АЭС_КомиссияНоменклатурыСрезПоследних.ВидОплатыКомиссии КАК ВидОплатыКомиссии,
	               |	АЭС_КомиссияНоменклатурыСрезПоследних.ПроцентКомиссии КАК ПроцентКомиссии,
	               |	АЭС_КомиссияНоменклатурыСрезПоследних.СпособРасчетаКомиссии КАК СпособРасчетаКомиссии,
	               |	АЭС_КомиссияНоменклатурыСрезПоследних.ПроцентКомиссии КАК ПроцентКомиссии1,
	               |	АЭС_КомиссияНоменклатурыСрезПоследних.Мин КАК Мин,
	               |	АЭС_КомиссияНоменклатурыСрезПоследних.Макс КАК Макс,
	               |	АЭС_КомиссияНоменклатурыСрезПоследних.УдержаниеИзСуммыПеричисления КАК УдержаниеИзСуммыПеричисления
	               |ИЗ
	               |	РегистрСведений.АЭС_КомиссияНоменклатуры.СрезПоследних(
	               |			&Дата,
	               |			Номенклатура = &Номенклатура
	               |				И ВидОплаты = &ВидОплаты
	               |				И Партнер = &Партнер
	               |				И Организация = &Организация) КАК АЭС_КомиссияНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номенклатура", ВходящиеДанные.Номенклатура);
	Запрос.УстановитьПараметр("ВидОплаты", ВходящиеДанные.ВидОплаты);
	Запрос.УстановитьПараметр("Организация", ВходящиеДанные.Организация);
	Запрос.УстановитьПараметр("Партнер", ВходящиеДанные.Партнер);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.УдержаниеИзСуммыПеричисления Тогда 
			Продолжить;
		КонецЕсли;
		ВыходныеДанный = Новый Структура;
		ВыходныеДанный.Вставить("НоменклатураКомиссии", Выборка.НоменклатураКомиссии);
		ВыходныеДанный.Вставить("ВидОплатыКомиссии", Выборка.ВидОплатыКомиссии);
		Если Выборка.СпособРасчетаКомиссии = Перечисления.АЭС_СпособоРасчетаКомиссии.ПроцентОтСуммы Тогда 
			СуммаКомиссии = Окр(ВходящиеДанные.Сумма/100 * Выборка.ПроцентКомиссии,2);
			Если СуммаКомиссии< Выборка.Мин и ЗначениеЗаполнено(Выборка.Мин) Тогда 
				СуммаКомиссии= Выборка.Мин;
			КонецЕсли;
			Если СуммаКомиссии > Выборка.Макс и ЗначениеЗаполнено(Выборка.Макс) Тогда 
				СуммаКомиссии= Выборка.Макс;
			КонецЕсли;
			
			ВыходныеДанный.Вставить("СуммаКомиссии", СуммаКомиссии);
		Иначе
			ВыходныеДанный.Вставить("СуммаКомиссии", Выборка.Мин);
		КонецЕсли;
	КонецЦикла;
	Возврат ВыходныеДанный;
КонецФункции

Процедура АЭС_ЗагрузкаКонтрагентов() Экспорт
	//поиск файла 
	Путь = "D:\1С_Exchange\1C_UT\";
	Маска = "*.dbf";
	НайденныеФайлы = НайтиФайлы(Путь, Маска, Истина);
	
	Для Каждого мСТР из НайденныеФайлы Цикл
		Кталог = СтрЗаменить(мСТР.Путь,Путь,"");
		Если Не ЗначениеЗаполнено(Кталог) Тогда
			Продолжить;
		КонецЕсли;
		КодПартнера = Лев(Кталог,11);	
		ДатаДанных  = Дата(Сред(СтрЗаменить(Кталог,КодПартнера,""),2,8));
		Патрнер		= Справочники.Партнеры.НайтиПоКоду(КодПартнера);
		Если Не ЗначениеЗаполнено(Патрнер) Тогда
			Продолжить;
		КонецЕсли;
		
		КС = Новый КвалификаторыСтроки(500);
		КЧ = Новый КвалификаторыЧисла(15,2);
		КД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);	
		Массив = Новый Массив;                            
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
		Массив.Очистить();
		Массив.Добавить(Тип("Число"));
		ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , КЧ);
		Массив.Очистить();
		Массив.Добавить(Тип("Дата"));
		ОписаниеТиповД = Новый ОписаниеТипов(Массив, , КД);
		Массив.Очистить();
		Массив.Добавить(Тип("Булево"));
		ОписаниеТиповБулево = Новый ОписаниеТипов(Массив);
		Массив.Очистить();
		Массив.Добавить(Тип("СправочникСсылка.Партнеры"));
		ОписаниеТиповПартнер = Новый ОписаниеТипов(Массив);
		
		ТЗ = Новый ТаблицаЗначений;	
		ТЗ.Колонки.Добавить("Партнер", ОписаниеТиповПартнер);
		ТЗ.Колонки.Добавить("ЛС", ОписаниеТиповС);
		ТЗ.Колонки.Добавить("ФИО", ОписаниеТиповС);
		ТЗ.Колонки.Добавить("Адрес", ОписаниеТиповС);
		ТЗ.Колонки.Добавить("ПризнакОплатыПоСчетчику", ОписаниеТиповБулево);
		ТЗ.Колонки.Добавить("ПоследниеПоказания", ОписаниеТиповЧ);
		ТЗ.Колонки.Добавить("ДатаПоследнейОплаты", ОписаниеТиповД);
		ТЗ.Колонки.Добавить("Задолженность", ОписаниеТиповЧ);
		ТЗ.Колонки.Добавить("Начислено", ОписаниеТиповЧ);
		
		ФайлДБФ = Новый XBase;
		ФайлДБФ.Кодировка = КодировкаXBase.OEM;
		ФайлДБФ.ОткрытьФайл(мСТР.ПолноеИмя);
		ФайлДБФ.Первая();
		
		Пока Не ФайлДБФ.ВКонце() Цикл
			СтруктураДанных = ТЗ.Добавить();
			СтруктураДанных.Партнер					= Патрнер;
			СтруктураДанных.ЛС						= ФайлДБФ.LSHET;
			СтруктураДанных.ФИО 					= ФайлДБФ.FIO;
			СтруктураДанных.Адрес 					= ФайлДБФ.ADRES;
			СтруктураДанных.ПризнакОплатыПоСчетчику	= ФайлДБФ.PR_STH;
			СтруктураДанных.ПоследниеПоказания		= ФайлДБФ.LAST_P;
			СтруктураДанных.ДатаПоследнейОплаты		= ФайлДБФ.DATE_P;
			СтруктураДанных.Задолженность			= ФайлДБФ.SUMMA;
			СтруктураДанных.Начислено				= ФайлДБФ.TEKSUMMA;
			ФайлДБФ.Следующая();
		КонецЦикла;
		ФайлДБФ.ЗакрытьФайл();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Контрагенты.Партнер,
		|	Контрагенты.ЛС,
		|	Контрагенты.ФИО,
		|	Контрагенты.Адрес,
		|	Контрагенты.ПризнакОплатыПоСчетчику,
		|	Контрагенты.ПоследниеПоказания,
		|	Контрагенты.ДатаПоследнейОплаты,
		|	Контрагенты.Задолженность,
		|	Контрагенты.Начислено
		|ПОМЕСТИТЬ ВТ_Список
		|ИЗ
		|	&МассивДанных КАК Контрагенты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	ВТ_Список.Партнер,
		|	ВТ_Список.ЛС,
		|	ВТ_Список.ФИО,
		|	ВТ_Список.Адрес,
		|	ВТ_Список.ПризнакОплатыПоСчетчику,
		|	ВТ_Список.ПоследниеПоказания,
		|	ВТ_Список.ДатаПоследнейОплаты,
		|	ВТ_Список.Задолженность,
		|	ВТ_Список.Начислено
		|ИЗ
		|	ВТ_Список КАК ВТ_Список
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ВТ_Список.Партнер = Контрагенты.Партнер
		|			И ВТ_Список.ЛС = Контрагенты.НомерЛС";
		
		Запрос.УстановитьПараметр("МассивДанных", ТЗ);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Контрагент = null Тогда
				Контрагент							= Справочники.Контрагенты.СоздатьЭлемент();
				Контрагент.ЮрФизЛицо 				= Перечисления.ЮрФизЛицо.ФизЛицо;
				Контрагент.Партнер					= Выборка.Партнер;
				Контрагент.НомерЛС					= Выборка.ЛС;
				Контрагент.Наименование				= Выборка.ФИО;
				Контрагент.НаименованиеПолное		= Выборка.ФИО;
				Контрагент.АдресЛС					= Выборка.Адрес;
				КонтактнаяИнформация				= Контрагент.КонтактнаяИнформация.Добавить();
				КонтактнаяИнформация.Тип			= Перечисления.ТипыКонтактнойИнформации.Адрес;
				КонтактнаяИнформация.Вид			= Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				КонтактнаяИнформация.Представление	= Выборка.Адрес;
				Контрагент.Записать();
			Иначе
				Контрагент = Выборка.Контрагент;
			КонецЕсли;
			НаборЗаписей = РегистрыСведений.АЭС_ДанныеКонтрагентов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(ДатаДанных);
			НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
			
			НоваяЗапись							= НаборЗаписей.Добавить();
			НоваяЗапись.Период 					= ДатаДанных;
			НоваяЗапись.Контрагент 				= Контрагент;
			НоваяЗапись.ПризнакОплатыПоСчетчику = Выборка.ПризнакОплатыПоСчетчику;
			НоваяЗапись.ПоследниеПоказания		= Выборка.ПоследниеПоказания;
			НоваяЗапись.ДатаПоследнейОплаты		= Выборка.ДатаПоследнейОплаты;
			НоваяЗапись.Задолженность			= Выборка.Задолженность;
			НоваяЗапись.Начислено				= Выборка.Начислено;
			
			НаборЗаписей.Записать(); 
		КонецЦикла;

		УдалитьФайлы(мСТР.ПолноеИмя);
	КонецЦикла;
	
	
	
КонецПроцедуры

Процедура АЭС_ПередЗаписьюДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") И Источник.Проведен И Источник.Дата > НачалоДня(ТекущаяДата()) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	АЭС_ПлатежиТовары.ВидОплаты
		               |ИЗ
		               |	Документ.АЭС_Платежи.Товары КАК АЭС_ПлатежиТовары
		               |ГДЕ
		               |	АЭС_ПлатежиТовары.СозданныйПКО = &Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	АЭС_ПлатежиТовары.ВидОплаты";
		
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	АЭС_ПлатежиСторонниеУслуги.Ссылка.АгентскийПлатеж КАК АгентскийПлатеж,
		               |	АЭС_ПлатежиСторонниеУслуги.Секция КАК Секция
		               |ИЗ
		               |	Документ.АЭС_Платежи.СторонниеУслуги КАК АЭС_ПлатежиСторонниеУслуги
		               |ГДЕ
		               |	АЭС_ПлатежиСторонниеУслуги.СозданныйПКО = &Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	АЭС_ПлатежиСторонниеУслуги.Ссылка.АгентскийПлатеж,
		               |	АЭС_ПлатежиСторонниеУслуги.Секция";
		
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		
		ВыборкаАгент = Запрос.Выполнить().Выбрать();	
		
		
		
		Если Выборка.Следующий() Тогда
			Если (Не Выборка.ВидОплаты.Родитель = Справочники.АЭС_ВидОплаты.ПродажаСобственныхТоваров и Не Выборка.ВидОплаты.Родитель = Справочники.АЭС_ВидОплаты.ПродажаТоваровПоДоговоруКомиссииГруппа) Тогда
				Получатель = ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП.НайтиПоКоду("БК");
				ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Источник);  
			КонецЕсли;
		ИначеЕсли ВыборкаАгент.Следующий() Тогда 
			Если (Не Источник.Организация = Справочники.Организации.НайтиПоНаименованию("КурскАтомЭнергоСбыт") и ВыборкаАгент.АгентскийПлатеж = Истина) ИЛИ Не ВыборкаАгент.Секция = 8 Тогда
				Получатель = ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП.НайтиПоКоду("БК");
				ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Источник);
			КонецЕсли;
		Иначе
			Получатель = ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП.НайтиПоКоду("БК");
			ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Источник);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") И НЕ Источник.Проведен И Источник.Дата > НачалоДня(ТекущаяДата()) Тогда
		Получатель = ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП.НайтиПоКоду("БК");
		ПланыОбмена.УдалитьРегистрациюИзменений(Получатель,Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") И Источник.Дата > НачалоДня(ТекущаяДата())Тогда 
		Получатель = ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятияКОРП.НайтиПоКоду("БК");
		Если Источник.Проведен Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Источник);
		Иначе
			ПланыОбмена.УдалитьРегистрациюИзменений(Получатель,Источник);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


#Область АЭСдополнительняПрефиксацияДокСчфкт
//***** по письму от РожковаРС: Пн 05.02.2018 13:56 - ТЗ_1С ТОРГ_нумерация СЧФ с 01.01.2018.pdf
// вызов док.СчетФактураВыданный.МодульОбекта - Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
// вставить в конце процедуры:
//	Если ЭтоНовый() И Не ЗначениеЗаполнено(Номер) Тогда
//		УстановитьНовыйНомер(); 
//	
//		ЭтотОбъект.Номер = АЭС_Сервер.АЭС_ПолучитьНовыйНомерСчФкт(ЭтотОбъект); // АЭС Николай 2018-02-12
//	
//	КонецЕсли;
//	// АЭС Николай 2018-02-12 (((((((((((((((((( на случай перепроведения с очищением номера
//	Если не ЭтоНовый() И Не ЗначениеЗаполнено(Номер) Тогда
//		ЭтотОбъект.Номер = АЭС_Сервер.АЭС_ПолучитьНовыйНомерСчФкт(ЭтотОбъект); 
//	КонецЕсли;
//	//)))))))))))))))))))))
//	ИдентификаторПлатежа = ОбщегоНазначенияУТ.ПолучитьУникальныйИдентификаторПлатежа(ЭтотОбъект);
//	
//КонецПроцедуры

&НаСервере
Функция АЭС_ПолучитьНовыйНомерСчФкт(источник) экспорт
	Префикс = АЭС_Префикс(источник);
	Если СтрДлина(СокрЛП(Префикс)) = 0 Тогда 
		Возврат источник.Номер;
	КонецЕсли;	
	Если СтрДлина(СтрЗаменить(Префикс,"/","")) = 5 Тогда 
		//находим по филиалу макс номер
		ПрефиксФилиала = Лев(Префикс,2);
		МаксНумер = АЭС_ПолучитьПоследнийНомерСчФ(ПрефиксФилиала,НачалоГода(источник.Дата), источник.Подразделение);
		//проверяем свободный номер
		НовыйНомер = АЭС_СобратьНомерСчф(Префикс,источник,МаксНумер);
		Пока АЭС_ПроверитьНомерСчф(НовыйНомер,источник) Цикл 
			МаксНумер = МаксНумер + 1;
			НовыйНомер = АЭС_СобратьНомерСчф(Префикс,источник,МаксНумер);
		КонецЦикла;
		Возврат НовыйНомер;	
	КонецЕсли;
КонецФункции

Функция АЭС_СобратьНомерСчф(Префикс,источник,НомерДока) 
	результат = "";
	Если ТипЗнч(источник) = Тип("ДокументОбъект.СчетФактураВыданный") Или ТипЗнч(источник) = Тип("ДокументОбъект.СчетФактураВыданныйАванс") Тогда 
		результат = Префикс+Формат(НомерДока,"ЧЦ=6; ЧВН=; ЧГ=");
		Если ТипЗнч(источник) = Тип("ДокументОбъект.СчетФактураВыданныйАванс") Тогда 
			Если Прав(результат,2) = "АВ" Тогда 
			Иначе 
				результат = результат + "АВ";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат результат;
КонецФункции

Функция АЭС_ПроверитьНомерСчф(Номер,док)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПОДСТРОКА(СчетФактураВыданный.Номер, 1, 12) КАК НомерПоФилиалу
		|ПОМЕСТИТЬ вт_номера
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.Проведен = ИСТИНА
		|	И СчетФактураВыданный.Дата >= &Дата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПОДСТРОКА(СчетФактураВыданныйАванс.Номер, 1, 12) 
		|ИЗ
		|	Документ.СчетФактураВыданныйАванс КАК СчетФактураВыданныйАванс
		|ГДЕ
		|	СчетФактураВыданныйАванс.Дата >= &Дата
		|	И СчетФактураВыданныйАванс.Проведен = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_номера.НомерПоФилиалу
		|ИЗ
		|	вт_номера КАК вт_номера
		|ГДЕ
		|	вт_номера.НомерПоФилиалу = &Номер";
	Запрос.УстановитьПараметр("Дата", НачалоГода(док.Дата));
	Запрос.УстановитьПараметр("Номер", Лев(Номер,12));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	Возврат Ложь;
КонецФункции


Функция АЭС_ПолучитьПоследнийНомерСчФ(ПрефФилиала,ДокГод, Подразделение)
	Результат = 1;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПОДСТРОКА(ВложенныйЗапрос.Номер, 7, 6) КАК Номер
		|ИЗ
		|	(ВЫБРАТЬ
		|		СчетФактураВыданный.Номер КАК Номер
		|	ИЗ
		|		Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|	ГДЕ
		|		СчетФактураВыданный.Дата >= &ДокГод
		|		И СчетФактураВыданный.Проведен = ИСТИНА
		|		И СчетФактураВыданный.Подразделение = &Подразделение
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СчетФактураВыданныйАванс.Номер
		|	ИЗ
		|		Документ.СчетФактураВыданныйАванс КАК СчетФактураВыданныйАванс
		|	ГДЕ
		|		СчетФактураВыданныйАванс.Дата >= &ДокГод
		|		И СчетФактураВыданныйАванс.Проведен = ИСТИНА
		|		И СчетФактураВыданныйАванс.Подразделение = &Подразделение) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.Номер ПОДОБНО &Фп + ""%""
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номер УБЫВ";
	Запрос.УстановитьПараметр("Фп", ПрефФилиала);
	Запрос.УстановитьПараметр("ДокГод", НачалоГода(ДокГод));
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		НомерПоследний = ВыборкаДетальныеЗаписи.номер;
	КонецЕсли;
		НомерПоследний = АЭС_оставитьЦифры(НомерПоследний);
	Попытка
		Результат = Число(НомерПоследний);
	Исключение
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция АЭС_оставитьЦифры(СтрОчистки)
	Ч = "0123456789";
	С = СтрОчистки;
	р = "";
	Пока Не СтрДлина(с)=0 Цикл 
		х = Лев(с,1);
		с = Сред(с,2);
		Если Не СтрНайти(ч,х)=0 Тогда 
			р=р+х;
		КонецЕсли;
	КонецЦикла;
	Возврат р;
КонецФункции



Функция АЭС_Префикс(источник,СтарыйПрефикс = "") экспорт
	//если Ложь Тогда источник = Документы.СчетФактураВыданный.СоздатьДокумент().Ссылка; КонецЕсли;
	Результат = СтарыйПрефикс;
	Если ТипЗнч(источник) = Тип("ДокументОбъект.СчетФактураВыданный") или ТипЗнч(источник) = Тип("ДокументОбъект.СчетФактураВыданныйАванс") 
		Тогда 
		Результат = "";
		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("КодДляНумерации_СчетФактуры");
		
		// с начала берем подразделение из документа основание(любой док может окааться)
		Подразделение = Неопределено;
		Если ЗначениеЗаполнено(источник.ДокументОснование) Тогда 
			Попытка
				Подразделение = источник.ДокументОснование.Подразделение;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Подразделение) Тогда // если основание отсутсвует или незаполнено подразделение, то берем из СФ
		 	Подразделение = источник.Подразделение;
		КонецЕсли;
		
		Результат = АЭС_ПолучитьДопСвед(Подразделение,Свойство) + Результат;
		
		Если ЗначениеЗаполнено(Подразделение.Родитель) Тогда 
			Подразделение = Подразделение.Родитель;
			Результат = АЭС_ПолучитьДопСвед(Подразделение,Свойство) + Результат;
			Если ЗначениеЗаполнено(Подразделение.Родитель) Тогда 
				Подразделение = Подразделение.Родитель;
				Результат = АЭС_ПолучитьДопСвед(Подразделение,Свойство) + Результат;
			КонецЕсли;
		КонецЕсли;
		Если Результат = "" Тогда 
			Результат = СтарыйПрефикс;	
		Иначе 
			Результат = Результат +Лев("00000",5-СтрДлина(Результат))+ "/";
		КонецЕсли;
		
	КонецЕсли;
	Возврат Результат;
КонецФункции


Функция АЭС_ПолучитьДопСвед(Объект,Свойство)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеСведения.Значение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект = &Объект
		|	И ДополнительныеСведения.Свойство = &Свойство";
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Свойство", Свойство);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Значение;
	КонецЦикла;
	Возврат "";
КонецФункции


Процедура АЭС_ПолучитьДоговор(Документ, Договор)Экспорт
	Если Документ = Неопределено Тогда 
		Возврат;	
	КонецЕсли;
	Если Документ.Метаданные().Реквизиты.Найти("Договор")<> Неопределено Тогда
		Если ЗначениеЗаполнено(Документ.Договор) Тогда
			Договор = Документ.Договор;
		КонецЕсли;
	ИначеЕсли Документ.Метаданные().Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
		Если ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
			АЭС_ПолучитьДоговор(Документ.ДокументОснование, Договор);
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Договор) И Документ.Метаданные().ТабличныеЧасти.Найти("РасшифровкаПлатежа")<>Неопределено Тогда
		Если Документ.РасшифровкаПлатежа.Количество()>0 Тогда 
			Для  Каждого СТЧ Из Документ.РасшифровкаПлатежа Цикл
				Если ТипЗнч(СТЧ.ОснованиеПлатежа) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
					Договор = СТЧ.ОснованиеПлатежа;
				Иначе
					АЭС_ПолучитьДоговор(СТЧ.ОснованиеПлатежа, Договор);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти
