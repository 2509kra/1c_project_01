
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	лПараметры = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединенияИнформационнойБазы());
	
	//Возврат;
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ИмяТекБазы = "Файловая";//назовем ее так
	Иначе
		ИмяТекБазы = СокрЛП(НРег(лПараметры.Ref));
	КонецЕсли;
	
	
	Если Найти(НРег(ИмяТекБазы), "test") > 0 Тогда
		Отладка = Истина;
	Иначе
		Отладка = Ложь;
	КонецЕсли;
	
	Объект.Отладка = Отладка;
	Элементы.Отладка.Видимость = Отладка;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНеобработанныеОбращенияКоллЦентраНаСервере()
	
	//ТЗ = АЭС_КоллЦентр.ПолучитьНеобработанныеОбращения();
	
	ТЗ = Неопределено;
	Порция = 11;
	Смещение = 0;
	Соединение = Неопределено;
	//Пока АЭС_КоллЦентр.ПолучитьНеобработанныеОбращения() Цикл
	Пока ПолучитьНеобработанныеОбращения(ТЗ, Порция, Смещение, Соединение) Цикл
	КонецЦикла;
		
	//ТЗ = Новый ТаблицаЗначений;
	//ТЗ.за
	Если ТЗ <> Неопределено Тогда
		ЭтотОбъект.ТаблицаОбращений.Загрузить(ТЗ);
	КонецЕсли;
	
	
	//Если ТЗ <> Неопределено Тогда
	//	//ЗначениеВДанныеФормы(ТЗ, ТаблицаОбращений);
	//	ЗначениеВРеквизитФормы(ТЗ, "ТаблицаОбращений"); 
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНеобработанныеОбращенияКоллЦентра(Команда)
	ПолучитьНеобработанныеОбращенияКоллЦентраНаСервере();
КонецПроцедуры



&НаСервере
Процедура СоздатьЗадачиНаСервере()
	
	Для Каждого стрТЗ Из Элементы.ТаблицаОбращений.ВыделенныеСтроки Цикл
		//СоздатьЗадачуКоллЦентра(стрТЗ) = Задачи недостаточно, будем делать БП
		СоздатьБизнесПроцесс_Задание_ДляКоллЦентра(стрТЗ);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьЗадачи(Команда)
	СоздатьЗадачиНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьИсполнителяПоDepartmentID(department_id)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураПредприятияДополнительныеРеквизиты.Ссылка
	|ПОМЕСТИТЬ НайденноеПодразделение
	|ИЗ
	|	Справочник.СтруктураПредприятия.ДополнительныеРеквизиты КАК СтруктураПредприятияДополнительныеРеквизиты
	|ГДЕ
	|	СтруктураПредприятияДополнительныеРеквизиты.Свойство.Наименование = ""ИдПодразделения (Структура предприятия)""
	|	И СтруктураПредприятияДополнительныеРеквизиты.Значение = &Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПредприятияДополнительныеРеквизиты.Значение
	|ИЗ
	|	Справочник.СтруктураПредприятия.ДополнительныеРеквизиты КАК СтруктураПредприятияДополнительныеРеквизиты
	|ГДЕ
	|	СтруктураПредприятияДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				НайденноеПодразделение.Ссылка
	|			ИЗ
	|				НайденноеПодразделение КАК НайденноеПодразделение)
	|	И СтруктураПредприятияДополнительныеРеквизиты.Свойство.Наименование = ""Ответственный оператор участка (Структура предприятия)""";
	
	Запрос.УстановитьПараметр("Значение", department_id);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	//Найденное
	
	Если ТЗ.Количество() = 1 Тогда
		Рез = ТЗ[0].Значение;
	Иначе
		Рез = Неопределено
	КонецЕсли;
	
	Возврат Рез;
	
	
КонецФункции // ПолучитьОтветственногоПоDepartmentID(стрТЗ.department_id)

&НаСервере
Функция ПолучитьПроверяющегоПоDepartmentID(department_id)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураПредприятияДополнительныеРеквизиты.Ссылка
	|ПОМЕСТИТЬ НайденноеПодразделение
	|ИЗ
	|	Справочник.СтруктураПредприятия.ДополнительныеРеквизиты КАК СтруктураПредприятияДополнительныеРеквизиты
	|ГДЕ
	|	СтруктураПредприятияДополнительныеРеквизиты.Свойство.Наименование = ""ИдПодразделения (Структура предприятия)""
	|	И СтруктураПредприятияДополнительныеРеквизиты.Значение = &Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПредприятияДополнительныеРеквизиты.Значение
	|ИЗ
	|	Справочник.СтруктураПредприятия.ДополнительныеРеквизиты КАК СтруктураПредприятияДополнительныеРеквизиты
	|ГДЕ
	|	СтруктураПредприятияДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				НайденноеПодразделение.Ссылка
	|			ИЗ
	|				НайденноеПодразделение КАК НайденноеПодразделение)
	|	И СтруктураПредприятияДополнительныеРеквизиты.Свойство.Наименование = ""Проверяющий исполнение задачи (Структура предприятия)""";
	
	Запрос.УстановитьПараметр("Значение", department_id);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	//Найденное
	
	Если ТЗ.Количество() = 1 Тогда
		Рез = ТЗ[0].Значение;
	Иначе
		Рез = Неопределено
	КонецЕсли;
	
	Возврат Рез;
	
	
КонецФункции // ПолучитьОтветственногоПоDepartmentID(стрТЗ.department_id)

&НаСервере
Функция СоздатьБизнесПроцесс_Задание_ДляКоллЦентра(стрТЗ)

	Попытка
		ЧслУИД = Число(ТаблицаОбращений[стрТЗ].id);
		УИД = Формат(ЧслУИД, "ЧГ=0");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;	
	КонецПопытки;
	
	Попытка
		НачатьТранзакцию();
		
		БизнесПроцессСсылка = БизнесПроцессы.Задание.НайтиПоРеквизиту("НомерОбращенияКоллЦентра", УИД);
		Если ЗначениеЗаполнено(БизнесПроцессСсылка) И Не БизнесПроцессСсылка.ПометкаУдаления Тогда
			//пока возврат
			Возврат Ложь;
			//!!!! возможно потом удалять/прерывать и создавать новый,
			//БизнесПроцессОб = БизнесПроцессСсылка.ПолучитьОбъект();
			//БизнесПроцессОб.Удалить();
		Иначе
			БизнесПроцессОб = БизнесПроцессы.Задание.СоздатьБизнесПроцесс();
			БизнесПроцессОб.Дата = ТекущаяДата();

		КонецЕсли;
		
		
		
		//БизнесПроцессОб.Предмет = СтрокаТаблицы.Документ;
		БизнесПроцессОб.Предмет = СоздатьПустойЗаказПокупателя(БизнесПроцессОб, ТаблицаОбращений[стрТЗ].region_id);
		БизнесПроцессОб.Исполнитель = ПолучитьИсполнителяПоDepartmentID (ТаблицаОбращений[стрТЗ].department_id);
		БизнесПроцессОб.Проверяющий = ПолучитьПроверяющегоПоDepartmentID(ТаблицаОбращений[стрТЗ].department_id);
		БизнесПроцессОб.НаПроверке = Истина;
		БизнесПроцессОб.Наименование = "Обращение №" + УИД + ". Замена/установка ПУ";
		БизнесПроцессОб.Содержание = ПолучитьОписаниеЗадачи(ТаблицаОбращений[стрТЗ]);
		БизнесПроцессОб.СрокИсполнения	= ТекущаяДата() + 86400;	// пока сутки
		БизнесПроцессОб.СрокПроверки	= ТекущаяДата() + 86400*2;	// пока 2 суток
		БизнесПроцессОб.Автор = Справочники.Пользователи.НайтиПоНаименованию("Колл-центр");
		БизнесПроцессОб.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		
		//новые реквизиты БП
		БизнесПроцессОб.НомерОбращенияКоллЦентра = УИД;
		БизнесПроцессОб.ВыгружатьВКоллЦентр = Истина;
		
		
		БизнесПроцессОб.Записать();
		
		БизнесПроцессОб.Старт();
		
		ЗафиксироватьТранзакцию();
		
		
	
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	

КонецФункции // СозданиеЗадачКоллЦентра()

&НаСервере
Функция СоздатьПустойЗаказПокупателя(БизнесПроцессОб, ПрефиксРегиона)

	Если Ложь Тогда БизнесПроцессОб = БизнесПроцессы.Задание.СоздатьБизнесПроцесс(); КонецЕсли;
	
	//!!!!нет времени объяснять :)
	мСоответствиеОрганизаций = Новый Соответствие;
	мСоответствиеОрганизаций.Вставить("46", Справочники.Организации.НайтиПоНаименованию("КурскАтомЭнергоСбыт"));
	мСоответствиеОрганизаций.Вставить("51", Справочники.Организации.НайтиПоНаименованию("КолАтомЭнергоСбыт"));
	мСоответствиеОрганизаций.Вставить("67", Справочники.Организации.НайтиПоНаименованию("СмоленскАтомЭнергоСбыт"));
	мСоответствиеОрганизаций.Вставить("69", Справочники.Организации.НайтиПоНаименованию("ТверьАтомЭнергоСбыт"));
	//мСоответствиеОрганизаций.Вставить("", Справочники.Организации.НайтиПоНаименованию(""));
	
	ЗаказОб = Документы.ЗаказКлиента.СоздатьДокумент();
	//ЗаказОб.Организация = БизнесПроцессОб.Исполнитель.ФОП.в
	ЗаказОб.Заполнить(БизнесПроцессОб);
	ЗаказОб.Дата = ТекущаяДата();
	ЗаказОб.Организация = мСоответствиеОрганизаций[ПрефиксРегиона];
	ЗаказОб.ОбменДанными.Загрузка = Истина;
	ЗаказОб.Записать();
	
	Возврат ЗаказОб.Ссылка;
	
КонецФункции // СоздатьПустойЗаказПокупателя()


//процедуры ниже - перенести в АЭС_КоллЦентр
&НаСервере
Функция ПолучитьСоединениеСБазойКолцентра(КодНастройки)
	
	СтруктураНастроек = АЭС_Стек.ПолучитьНастройкиСоединенияSQL(КодНастройки);
	
	Если СтруктураНастроек = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не СтруктураНастроек.РазрешитьЧтение Тогда
		Сообщить("Чтение из колл-центра не разрешено!");
		Возврат Неопределено;
	КонецЕсли;
	
	
	//Попытка
	//	//Provider=SQLOLEDB.1
	//	Соединение = Новый COMОбъект("ADODB.Connection");
	//	Соединение.Open("Provider="		+ СтруктураНастроек.ИмяПровайдера + ";
	//	|Persist Security Info=False;
	//	|User ID="			+ СтруктураНастроек.ИмяПользователя + ";
	//	|Password="			+ СтруктураНастроек.ПарольПользователя + ";
	//	|Initial Catalog="	+ СтруктураНастроек.ИмяБазы + ";
	//	//|=" + СтруктураНастроек. + ";
	//	|Data Source="		+ СтруктураНастроек.АдресСервера + ";");
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//	Соединение = Неопределено;
	//КонецПопытки;
	//
	//Если Соединение = Неопределено Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	ИмяДрайвера			= ?(ЗначениеЗаполнено(СтруктураНастроек.ИмяПровайдера), СтруктураНастроек.ИмяПровайдера, "MySQL ODBC 3.51 Driver");
	АдресСервера		= СтруктураНастроек.АдресСервера;
	ИмяБазы				= СтруктураНастроек.ИмяБазы;
	ИмяПользователя		= СтруктураНастроек.ИмяПользователя;
	ПарольПользователя	= СтруктураНастроек.ПарольПользователя;
	Попытка
		
		Соединение = Новый COMОбъект("ADODB.Connection");
		//СтрокаСоединенияСАстерискСервером   =  
		//"DRIVER={MySQL ODBC 5.3 ANSI Driver};SERVER=10.46.2.66;Port=3306;DATABASE=atomcc;UID=user1c;PWD=Fj4Fdjf4bs;";
		//|Option=3;";
		//СтрокаСоединенияСАстерискСервером   = 	"DRIVER={MySQL ODBC 3.51 Driver};SERVER=10.46.2.66;Port=3306;DATABASE=atomcc;UID=user1c;PWD=Fj4Fdjf4bs;";
		СтрокаСоединенияСАстерискСервером   = 	"DRIVER={" + ИмяДрайвера + "};SERVER=" + АдресСервера + ";Port=3306;DATABASE=" + ИмяБазы + ";UID=" + ИмяПользователя + ";PWD=" + ПарольПользователя + ";";
		
		Соединение.ConnectionString = СтрокаСоединенияСАстерискСервером;
		
		//     |Persist Security Info=False;
//                                 driver={SQL Server};
		Соединение.Open();
		//"DRIVER={MySQL Driver};
		//				|SERVER=10.46.2.66;
		//				|UID=user1c;
		//				|PWD=Fj4Fdjf4bs;
		//				|DATABASE=atomcc;");
		//Сообщить("подключено");
	Исключение
		Сообщить(ОписаниеОшибки());
		Соединение = Неопределено;
	КонецПопытки;

	Возврат Соединение;
	
КонецФункции

&НаСервере
Функция ПолучитьНеобработанныеОбращения(ТЗ, Порция, Смещение, Соединение) Экспорт

	ПолучатьСледующуюПорцию = Ложь;
	
	Если Соединение = Неопределено Тогда
		Соединение = ПолучитьСоединениеСБазойКолцентра("КЦ")
	КонецЕсли;
	
	Если Соединение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	Попытка
		//Сообщить("Выполнение запроса");
		Команда = Новый COMОбъект("ADODB.Command");
		Команда.ActiveConnection = Соединение;
		Команда.CommandType = 1; //вызываем таб.функцию как запрос   use atomcc;|
		
		
		Команда.CommandText = "set names cp1251;";
		Команда.Execute();
		
		Команда.CommandText = "call getAppeals(" + Порция + ", " + Смещение + ");";
		
		ЗаписиSQL = Команда.Execute();
		
		Если ЗаписиSQL.EOF() Тогда
			//убрать за собой
			ЗаписиSQL = Неопределено;
			Команда = Неопределено;
			//Сообщить("Запрос не вернул ни одной строки", СтатусСообщения.Важное);
			Возврат ПолучатьСледующуюПорцию; // ошибка 
		КонецЕсли;
		
		Если ТЗ = Неопределено Тогда
			
			ТЗ = Новый ТаблицаЗначений;
			
			ТЗ.Колонки.Добавить("id");
			ТЗ.Колонки.Добавить("theme_id");
			ТЗ.Колонки.Добавить("text");
			ТЗ.Колонки.Добавить("comment");
			ТЗ.Колонки.Добавить("user_phone");
			ТЗ.Колонки.Добавить("email");
			ТЗ.Колонки.Добавить("operator_login");
			ТЗ.Колонки.Добавить("operator_phone");
			ТЗ.Колонки.Добавить("region_id");
			ТЗ.Колонки.Добавить("ls");
			ТЗ.Колонки.Добавить("address");
			ТЗ.Колонки.Добавить("channel_id");
			ТЗ.Колонки.Добавить("external_id");
			ТЗ.Колонки.Добавить("c1_external_id");
			ТЗ.Колонки.Добавить("status_id");
			ТЗ.Колонки.Добавить("created_at");
			ТЗ.Колонки.Добавить("updated_at");
			ТЗ.Колонки.Добавить("completion_date");
			ТЗ.Колонки.Добавить("answer_id");
			
		КонецЕсли;
		СчТекПорции = 0;
		Пока ЗаписиSQL.EOF() = 0 Цикл
			СчТекПорции = СчТекПорции + 1;
			//Для Каждого Зап Из ЗаписиSQL.Fields Цикл
			//	Сообщить(ТипЗнч(Зап.Value));
			//КонецЦикла;
			
			НовСтр = ТЗ.Добавить();
			НовСтр.id 				=	ЗаписиSQL.Fields("id").Value;
			НовСтр.theme_id			=	ЗаписиSQL.Fields("theme_id").Value;
			//!!!!НовСтр.text 			=	ЗаписиSQL.Fields("text").Value;
			НовСтр.comment			=	ЗаписиSQL.Fields("comment").Value;
			НовСтр.user_phone		=	ЗаписиSQL.Fields("user_phone").Value;
			НовСтр.email			=	ЗаписиSQL.Fields("email").Value;
			НовСтр.operator_login	=	ЗаписиSQL.Fields("operator_login").Value;
			//НовСтр.operator_phone	=	ЗаписиSQL.Fields("operator_phone").Value;
			НовСтр.region_id		=	ЗаписиSQL.Fields("region_id").Value;
			НовСтр.ls				=	ЗаписиSQL.Fields("ls").Value;
			НовСтр.address		 	=	ЗаписиSQL.Fields("address").Value;
			НовСтр.channel_id		=	ЗаписиSQL.Fields("channel_id").Value;
			//НовСтр.external_id	 	=	ЗаписиSQL.Fields("external_id").Value;
			НовСтр.c1_external_id	=	ЗаписиSQL.Fields("1c_external_id").Value;
			НовСтр.status_id		=	ЗаписиSQL.Fields("status_id").Value;
			НовСтр.created_at		=	ЗаписиSQL.Fields("created_at").Value;
			НовСтр.updated_at		=	ЗаписиSQL.Fields("updated_at").Value;
			НовСтр.completion_date	=	ЗаписиSQL.Fields("completion_date").Value;
			НовСтр.answer_id		=	ЗаписиSQL.Fields("answer_id").Value;
			
			//ЗаписиSQL.Fields(0).Name
			ЗаписиSQL.MoveNext();	
			
			Смещение = Смещение + 1;
			
		КонецЦикла;
		
		Если СчТекПорции < Порция Тогда
			ПолучатьСледующуюПорцию = Ложь;
		Иначе
			ПолучатьСледующуюПорцию = Истина;
		КонецЕсли;
		
	Исключение
		Сообщить(ОписаниеОшибки());
		ПолучатьСледующуюПорцию  = Ложь;
	КонецПопытки;

	Возврат ПолучатьСледующуюПорцию;
	
КонецФункции // ПолучитьНеобработанныеОбращения()

Функция ПолучитьОписаниеЗадачи(стрТЗ)
	
	//НовСтр.id 			=	ЗаписиSQL.Fields("id").Value;
	//НовСтр.theme_id		=	ЗаписиSQL.Fields("theme_id").Value;
	////!!!!НовСтр.text 		=	ЗаписиSQL.Fields("text").Value;
	//НовСтр.comment		=	ЗаписиSQL.Fields("comment").Value;
	//НовСтр.user_phone		=	ЗаписиSQL.Fields("user_phone").Value;
	//НовСтр.email			=	ЗаписиSQL.Fields("email").Value;
	//НовСтр.operator_login	=	ЗаписиSQL.Fields("operator_login").Value;
	////НовСтр.operator_phone	=	ЗаписиSQL.Fields("operator_phone").Value;
	//НовСтр.region_id		=	ЗаписиSQL.Fields("region_id").Value;
	//НовСтр.ls				=	ЗаписиSQL.Fields("ls").Value;
	//НовСтр.address		=	ЗаписиSQL.Fields("address").Value;
	//НовСтр.channel_id		=	ЗаписиSQL.Fields("channel_id").Value;
	////НовСтр.external_id	 	=	ЗаписиSQL.Fields("external_id").Value;
	//НовСтр.c1_external_id	=	ЗаписиSQL.Fields("1c_external_id").Value;
	//НовСтр.status_id		=	ЗаписиSQL.Fields("status_id").Value;
	//НовСтр.created_at		=	ЗаписиSQL.Fields("created_at").Value;
	//НовСтр.updated_at		=	ЗаписиSQL.Fields("updated_at").Value;
	//НовСтр.completion_date=	ЗаписиSQL.Fields("completion_date").Value;
	//НовСтр.answer_id		=	ЗаписиSQL.Fields("answer_id").Value;
	Рез = "";
	
	Рез = Рез + Символы.ПС + "Тел.: "					+ стрТЗ.user_phone;
	Рез = Рез + Символы.ПС + "л/с: "					+ стрТЗ.ls;
	//Рез = Рез + Символы.ПС + стрТЗ.fio;
	Рез = Рез + Символы.ПС + "Адрес: "					+ стрТЗ.address;
	Рез = Рез + Символы.ПС + "Доп. информация:"			+ стрТЗ.comment;
	Рез = Рез + Символы.ПС + "Оператора колл-центра: "	+ стрТЗ.operator_login;
	//Рез = Рез + Символы.ПС + стрТЗ.;

	Возврат СокрЛП(Рез);
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Попытка
	
		Файл = Новый Файл(ПолучитьИспользуемоеИмяФайлаНаСервере());
		ВремяИзм = Файл.ПолучитьВремяИзменения();
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " (" + ВремяИзм + ")";
	
	Исключение
	
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ПолучитьИспользуемоеИмяФайлаНаСервере()
	
	//Возврат РеквизитФормыВЗначение("Объект").ПолучитьИспользуемоеИмяФайла();
	Возврат РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла
	
КонецФункции

&НаСервере
Функция ВыгрузитьЗаданиеКоллЦентра(БизнесПроцессЗадание, Соединение)
	
	Если Ложь Тогда БизнесПроцессЗадание = БизнесПроцессы.Задание.ПустаяСсылка(); КонецЕсли;
	
	//status_id - идентификатор статуса, возможные значения:
	//1 - Не обработано
	//2 - В процессе
	//3 – Обработано
	
	Если БизнесПроцессЗадание.Выполнено И БизнесПроцессЗадание.Подтверждено И БизнесПроцессЗадание.ВыгружатьВКоллЦентр Тогда
		Статус = 3;
	ИначеЕсли БизнесПроцессЗадание.Выполнено Тогда
		Статус = 2;
	Иначе
		Статус = 1;
	КонецЕсли;
	
	Если Соединение = Неопределено Тогда
		Соединение = ПолучитьСоединениеСБазойКолцентра("КЦ")
	КонецЕсли;
	
	Попытка
		//Сообщить("Выполнение запроса");
		Команда = Новый COMОбъект("ADODB.Command");
		Команда.ActiveConnection = Соединение;
		Команда.CommandType = 1; //вызываем таб.функцию как запрос   use atomcc;|
		
		
		//Команда.CommandText = "set names cp1251;";
		//Команда.Execute();
		
		Команда.CommandText = "call updateAppeal(" + БизнесПроцессЗадание.НомерОбращенияКоллЦентра + ", """ + Строка(БизнесПроцессЗадание.УникальныйИдентификатор()) + """, " + Статус + ");";
		
		ЗаписиSQL = Команда.Execute();
		//если Execute прошел успешно, то снимаем признак ВыгружатьВКоллЦентр 
		
		
		Если Статус = 3 Тогда
			БизнесПроцессОб = БизнесПроцессЗадание.ПолучитьОбъект();
			БизнесПроцессОб.ВыгружатьВКоллЦентр = Ложь;
			БизнесПроцессОб.Записать();
		КонецЕсли;
		
	Исключение
		Сообщить(ОписаниеОшибки());
		
	КонецПопытки;
	
	
КонецФункции // ВыгрузитьЗаданиеКоллЦентра()

&НаСервере
Процедура ВыгрузитьСостояниеБизнесПроцессовЗаданийНаСервере()
	
	Соединение = Неопределено;
	Для Каждого ЭлСписка Из Элементы.СписокБизнесПроцессов.ВыделенныеСтроки Цикл
		ВыгрузитьЗаданиеКоллЦентра(ЭлСписка, Соединение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСостояниеБизнесПроцессовЗаданий(Команда)
	ВыгрузитьСостояниеБизнесПроцессовЗаданийНаСервере();
КонецПроцедуры


