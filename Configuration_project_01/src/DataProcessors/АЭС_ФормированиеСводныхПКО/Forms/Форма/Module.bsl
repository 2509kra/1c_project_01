
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокКассККМ = Справочники.НастройкиРМК.НайтиПоРеквизиту("РабочееМесто",МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента()).КассыККМ;	
	
	Если СписокКассККМ.Количество() = 0 Тогда
		Отказ = Истина;
		Сообщить("Для текущего рабочего места не настроено РМК!");
		Возврат;
	ИначеЕсли СписокКассККМ.Количество() = 1 тогда
		Объект.КассаККМ = СписокКассККМ[0].КассаККМ;
		ЭтотОбъект.Элементы.КассаККМ.ТолькоПросмотр = Истина;
	Иначе
		СписокВыбора = ЭтотОбъект.Элементы.КассаККМ.СписокВыбора;
		СписокВыбора.Очистить();
		Для Каждого стрТЗ Из СписокКассККМ Цикл
			СписокВыбора.Добавить(стрТЗ.КассаККМ);
		КонецЦикла;
		
	КонецЕсли;
	
	Объект.Дата = ТекущаяДата();
	
	Если РольДоступна("ПолныеПрава") Тогда
		ЭтотОбъект.Элементы.КассаККМ.ТолькоПросмотр = Ложь;	
	КонецЕсли;
	
	//ЭтотОбъект.Элементы.ОчиститьТабчастиПометитьНаУдалениеПКО.Видимость = АЭС_Сервер.ЭтоТестоваяБаза();
	ЭтотОбъект.Элементы.ОчиститьТабчастиПометитьНаУдалениеПКО.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	      КассаККМПриИзмененииНаСервере();
	
КонецПроцедуры
&НаСервере
Процедура КассаККМПриИзмененииНаСервере()
	
	
КонецПроцедуры




&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПКОНаСервере() //Содаем и заполненные реквизиты ПКО !Кроме СУММ+СуммНДС и ставки ндс! 
	
	Попытка
		// обходим элементы
		// считаем сумму наХХХХХХ
		// получаем список документовобъектов
		//СоответствиеПрефиксов = ПолучитьСоответствиеПрефиксовПКО();
		
		НачатьТранзакцию();
		
		ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
		ТаблицаПКО = Объект.ДокументыДляОбработки.Выгрузить();
		
		ТаблицаПКО.Свернуть("Секция, ВидОплаты, ПризнакСпособаРасчета, Аналитика, ПКО, АгентскийПлатеж", "Сумма, СуммаНДС");
		//!!!!формировать здесь текст ВТомЧислеНДС для каждого ПКО по табчастям Товары несколькких чеков
		Для Каждого стрТЗ Из ТаблицаПКО Цикл
			ДокПКО = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ДокПКО.Организация = Объект.Организация;
			ДокПКО.Валюта = ВалютаРегл;
			ДокПКО.Касса = Объект.КассаПолучатель;
			ДокПКО.КассаККМ = Объект.КассаККМ;
			ДокПКО.Дата = КонецДня(Объект.Дата);
			ДокПКО.ХозяйственнаяОперация = Объект.ВидОперацииПКО;
			ДокПКО.АгентскийПлатеж = стрТЗ.АгентскийПлатеж;
			//ДокПКО.СуммаДокумента = стрТЗ.Сумма;//предварительно считаем сумму, пересчитаем при проведении
			ДокПКО.СтатьяДвиженияДенежныхСредств = стрТЗ.ВидОплаты.СтатьяДДСДляСводногоПКО;
			ДокПКО.Основание = ПолучитьТекстОснования(стрТЗ.ВидОплаты, стрТЗ.ПризнакСпособаРасчета, стрТЗ.Аналитика);
			//ДокПКО.ВТомЧислеНДС = "В т.ч. НДС "+ Формат(стрТЗ.СуммаНДС,"ЧДЦ=2; ЧРГ=");
			//для печатной формы кусочег:
			ДокПКО.Кассир = Объект.Кассир;
			ДокПКО.ГлавныйБухгалтер	= Объект.ГлавныйБухгалтер ;
			Если стрТЗ.ВидОплаты = Справочники.АЭС_ВидОплаты.УстановкаСнятиеПУ Тогда
				Если ТипЗнч(стрТЗ.Аналитика) = Тип("ПеречислениеСсылка.ЮридическоеФизическоеЛицо") Тогда
					ДокПКО.ПринятоОт = Объект.ПринятоОт;
				Иначе
					ДокПКО.ПринятоОт = стрТЗ.Аналитика.Наименование;
				КонецЕсли;
			Иначе
				ДокПКО.ПринятоОт = Объект.ПринятоОт;
			КонецЕсли;
			ДокПКО.Приложение = Объект.Приложение;
			
			ЗаполнитьКонтрагента(ДокПКО, стрТЗ.ВидОплаты, стрТЗ.Аналитика);
			//
			//ЗаполнитьРасшифровкуПлатежа(ДокПКО, стрТЗ.ВидОплаты);
			//ДокПКО.УстановитьНовыйНомер(СоответствиеПрефиксов[стрТЗ.АгентскийПлатеж]);
			
			//СтруктураАналитики = Новый Структура;
			//СтруктураАналитики.Вставить("Договор",ДокПКО.Договор); 
			//СтруктураАналитики.Вставить("Контрагент",ДокПКО.Контрагент); 
			//СтруктураАналитики.Вставить("Партнер",ДокПКО.Контрагент.Партнер); 
			//СтруктураАналитики.Вставить("НаправлениеДеятельности",ДокПКО.НаправлениеДеятельности); 
			//СтруктураАналитики.Вставить("Организация",ДокПКО.Организация); 
			//РегистрыСведений.АналитикаУчетаПоПартнерам.СоздатьКлючАналитики(СтруктураАналитики);

			ДокПКО.Записать(РежимЗаписиДокумента.Запись);
			стрТЗ.ПКО = ДокПКО.Ссылка;
		КонецЦикла;
		
		Для Каждого стрТЗ Из Объект.ДокументыДляОбработки Цикл //проставляем ПКО на против чеков
			Отбор = Новый Структура("Секция, ВидОплаты, ПризнакСпособаРасчета, Аналитика, АгентскийПлатеж", стрТЗ.Секция, стрТЗ.ВидОплаты, стрТЗ.ПризнакСпособаРасчета, стрТЗ.Аналитика, стрТЗ.АгентскийПлатеж);
			МассивСтрок = ТаблицаПКО.НайтиСтроки(Отбор);
			Если МассивСтрок.Количество() = 1 Тогда
				стрТЗ.ПКО = МассивСтрок[0].ПКО;
				//А.М.А. не нашел метос использование реквизита СозданныйПКО документа Чек ККМ 
				//Объект_ЧекККМ = стрТЗ.ДокументПродажи.ПолучитьОбъект();
				//Объект_ЧекККМ.СозданныйПКО = МассивСтрок[0].ПКО;
				//Объект_ЧекККМ.Записать(РежимЗаписиДокумента.Запись);
			Иначе
				ВызватьИсключение "Количество найденных строк равно " + МассивСтрок.Количество();
			КонецЕсли;
		КонецЦикла;
		
			
		
		Элементы.СоздатьПКОПоступлениеИзКассыККМ.Доступность = Ложь;
		Элементы.ПровестиПКО.Доступность = Истина;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПКО(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		Или Не ЗначениеЗаполнено(Объект.КассаПолучатель)
		Или Не ЗначениеЗаполнено(Объект.ВидОперацииПКО) Тогда
		Сообщить("Не заполнены обязательные поля!");
		
		Возврат;
		
	КонецЕсли;
	
	СоздатьПКОНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапроса()

	ЗапросТекст = 
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК Отметка,
	|	АЭС_ПлатежиОсновнаяДеятельность.ДокументПродажи КАК ДокументПродажи,
	|	АЭС_ПлатежиОсновнаяДеятельность.Секция КАК Секция,
	|	АЭС_ПлатежиОсновнаяДеятельность.ВидОплаты КАК ВидОплаты,
	|	АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент КАК Контрагент,
	|	СУММА(АЭС_ПлатежиОсновнаяДеятельность.Сумма) КАК Сумма,
	|	АЭС_ПлатежиОсновнаяДеятельность.ДокументПродажи.СуммаДокумента КАК ОбщаяСуммаПлатежа,
	|	АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Статус КАК Статус,
	|	АЭС_ПлатежиОсновнаяДеятельность.АгентскийПлатеж КАК АгентскийПлатеж,
	|	АЭС_ПлатежиОсновнаяДеятельность.СозданныйПКО КАК ПКО,
	|	АЭС_ПлатежиОсновнаяДеятельность.СтавкаНДС КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	АЭС_ПлатежиОсновнаяДеятельность.НомерСтроки КАК НомерСтрокиПлатежа,
	|	""ОсновнаяДеятельность"" КАК ТабЧастьПлатежа,
	|	АЭС_ПлатежиОсновнаяДеятельность.Ссылка КАК ДокументПлатежа,
	|	ВЫБОР
	|		КОГДА АЭС_ПлатежиОсновнаяДеятельность.ВидОплаты.ТипАналитикиДляСводногоПКО = ""КонсигнантПринципал""
	|			ТОГДА АЭС_ПлатежиОсновнаяДеятельность.ИсполнительУслуг
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АЭС_ПлатежиОсновнаяДеятельность.ВидОплаты.ТипАналитикиДляСводногоПКО = ""ЮЛ""
	|					ТОГДА ВЫБОР
	|							КОГДА АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|								ТОГДА АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент
	|							ИНАЧЕ АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент.ЮридическоеФизическоеЛицо
	|						КОНЕЦ
	|				КОГДА АЭС_ПлатежиОсновнаяДеятельность.ВидОплаты.ТипАналитикиДляСводногоПКО = ""ФЛ""
	|					ТОГДА ВЫБОР
	|							КОГДА АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|								ТОГДА АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент
	|							ИНАЧЕ АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент.ЮридическоеФизическоеЛицо
	|						КОНЕЦ
	|				КОГДА АЭС_ПлатежиОсновнаяДеятельность.ВидОплаты.ТипАналитикиДляСводногоПКО = ""ЮЛФЛ""
	|					ТОГДА АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент
	|				ИНАЧЕ АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент.ЮридическоеФизическоеЛицо
	|			КОНЕЦ
	|	КОНЕЦ КАК Аналитика,
	|	АЭС_ПлатежиОсновнаяДеятельность.ДокументПродажи.Кассир КАК Кассир,
	|	АЭС_ПлатежиОсновнаяДеятельность.ПризнакСпособаРасчета КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.АЭС_Платежи.ОсновнаяДеятельность КАК АЭС_ПлатежиОсновнаяДеятельность
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|		ПО АЭС_ПлатежиОсновнаяДеятельность.ДокументПродажи = ЧекККМВозврат.ЧекККМ
	|			И (ЧекККМВозврат.Проведен = ИСТИНА)
	|ГДЕ
	|	АЭС_ПлатежиОсновнаяДеятельность.ДокументПродажи.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И АЭС_ПлатежиОсновнаяДеятельность.Ссылка.КассаККМ = &КассаККМ
	|	И НАЧАЛОПЕРИОДА(АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Дата, ДЕНЬ) = &Дата
	|	И (АЭС_ПлатежиОсновнаяДеятельность.СозданныйПКО = ЗНАЧЕНИЕ(Документ.ПриходныйКассовыйОрдер.ПустаяСсылка)
	|			ИЛИ АЭС_ПлатежиОсновнаяДеятельность.СозданныйПКО.Проведен = ЛОЖЬ
	|			ИЛИ АЭС_ПлатежиОсновнаяДеятельность.СозданныйПКО.ПометкаУдаления = ИСТИНА)
	|	И (ЧекККМВозврат.Ссылка ЕСТЬ NULL
	|			ИЛИ НЕ ЧекККМВозврат.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
	|	И АЭС_ПлатежиОсновнаяДеятельность.ДокументПродажи.ФормаОплаты <> &ПлатежнаяКарта
	|
	|СГРУППИРОВАТЬ ПО
	|	АЭС_ПлатежиОсновнаяДеятельность.ДокументПродажи,
	|	АЭС_ПлатежиОсновнаяДеятельность.ВидОплаты,
	|	АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент,
	|	АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Статус,
	|	АЭС_ПлатежиОсновнаяДеятельность.Секция,
	|	АЭС_ПлатежиОсновнаяДеятельность.ДокументПродажи.СуммаДокумента,
	|	АЭС_ПлатежиОсновнаяДеятельность.СозданныйПКО,
	|	АЭС_ПлатежиОсновнаяДеятельность.СтавкаНДС,
	|	АЭС_ПлатежиОсновнаяДеятельность.НомерСтроки,
	|	АЭС_ПлатежиОсновнаяДеятельность.Ссылка,
	|	АЭС_ПлатежиОсновнаяДеятельность.АгентскийПлатеж,
	|	ВЫБОР
	|		КОГДА АЭС_ПлатежиОсновнаяДеятельность.ВидОплаты.ТипАналитикиДляСводногоПКО = ""КонсигнантПринципал""
	|			ТОГДА АЭС_ПлатежиОсновнаяДеятельность.ИсполнительУслуг
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АЭС_ПлатежиОсновнаяДеятельность.ВидОплаты.ТипАналитикиДляСводногоПКО = ""ЮЛ""
	|					ТОГДА ВЫБОР
	|							КОГДА АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|								ТОГДА АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент
	|							ИНАЧЕ АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент.ЮридическоеФизическоеЛицо
	|						КОНЕЦ
	|				КОГДА АЭС_ПлатежиОсновнаяДеятельность.ВидОплаты.ТипАналитикиДляСводногоПКО = ""ФЛ""
	|					ТОГДА ВЫБОР
	|							КОГДА АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|								ТОГДА АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент
	|							ИНАЧЕ АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент.ЮридическоеФизическоеЛицо
	|						КОНЕЦ
	|				КОГДА АЭС_ПлатежиОсновнаяДеятельность.ВидОплаты.ТипАналитикиДляСводногоПКО = ""ЮЛФЛ""
	|					ТОГДА АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент
	|				ИНАЧЕ АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент.ЮридическоеФизическоеЛицо
	|			КОНЕЦ
	|	КОНЕЦ,
	|	АЭС_ПлатежиОсновнаяДеятельность.ДокументПродажи.Кассир,
	|	АЭС_ПлатежиОсновнаяДеятельность.ПризнакСпособаРасчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	АЭС_ПлатежиТовары.ДокументПродажи,
	|	АЭС_ПлатежиТовары.Секция,
	|	АЭС_ПлатежиТовары.ВидОплаты,
	|	АЭС_ПлатежиТовары.Ссылка.Контрагент,
	|	СУММА(АЭС_ПлатежиТовары.Сумма),
	|	АЭС_ПлатежиТовары.ДокументПродажи.СуммаДокумента,
	|	АЭС_ПлатежиТовары.Ссылка.Статус,
	|	АЭС_ПлатежиТовары.Ссылка.АгентскийПлатеж,
	|	АЭС_ПлатежиТовары.СозданныйПКО,
	|	АЭС_ПлатежиТовары.СтавкаНДС,
	|	СУММА(АЭС_ПлатежиТовары.СуммаНДС),
	|	АЭС_ПлатежиТовары.НомерСтроки,
	|	""Товары"",
	|	АЭС_ПлатежиТовары.Ссылка,
	|	ВЫБОР
	|		КОГДА АЭС_ПлатежиТовары.ВидОплаты.ТипАналитикиДляСводногоПКО = ""ЮЛ""
	|			ТОГДА ВЫБОР
	|					КОГДА АЭС_ПлатежиТовары.Ссылка.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|						ТОГДА АЭС_ПлатежиТовары.Ссылка.Контрагент
	|					ИНАЧЕ АЭС_ПлатежиТовары.Ссылка.Контрагент.ЮридическоеФизическоеЛицо
	|				КОНЕЦ
	|		КОГДА АЭС_ПлатежиТовары.ВидОплаты.ТипАналитикиДляСводногоПКО = ""ФЛ""
	|			ТОГДА ВЫБОР
	|					КОГДА АЭС_ПлатежиТовары.Ссылка.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|						ТОГДА АЭС_ПлатежиТовары.Ссылка.Контрагент
	|					ИНАЧЕ АЭС_ПлатежиТовары.Ссылка.Контрагент.ЮридическоеФизическоеЛицо
	|				КОНЕЦ
	|		КОГДА АЭС_ПлатежиТовары.ВидОплаты.ТипАналитикиДляСводногоПКО = ""ЮЛФЛ""
	|			ТОГДА АЭС_ПлатежиТовары.Ссылка.Контрагент
	|		КОГДА АЭС_ПлатежиТовары.ВидОплаты.ТипАналитикиДляСводногоПКО = ""КонсигнантПринципал""
	|			ТОГДА АЭС_ПлатежиТовары.КонсигнантПринципал
	|		ИНАЧЕ АЭС_ПлатежиТовары.Ссылка.Контрагент.ЮридическоеФизическоеЛицо
	|	КОНЕЦ,
	|	АЭС_ПлатежиТовары.ДокументПродажи.Кассир,
	|	АЭС_ПлатежиТовары.ПризнакСпособаРасчета
	|ИЗ
	|	Документ.АЭС_Платежи.Товары КАК АЭС_ПлатежиТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|		ПО АЭС_ПлатежиТовары.ДокументПродажи = ЧекККМВозврат.ЧекККМ
	|ГДЕ
	|	АЭС_ПлатежиТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И АЭС_ПлатежиТовары.Ссылка.КассаККМ = &КассаККМ
	|	И НАЧАЛОПЕРИОДА(АЭС_ПлатежиТовары.Ссылка.Дата, ДЕНЬ) = &Дата
	|	И (АЭС_ПлатежиТовары.СозданныйПКО = ЗНАЧЕНИЕ(Документ.ПриходныйКассовыйОрдер.ПустаяСсылка)
	|			ИЛИ АЭС_ПлатежиТовары.СозданныйПКО.Проведен = ЛОЖЬ
	|			ИЛИ АЭС_ПлатежиТовары.СозданныйПКО.ПометкаУдаления = ИСТИНА)
	|	И (ЧекККМВозврат.Ссылка ЕСТЬ NULL
	|			ИЛИ НЕ ЧекККМВозврат.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
	|	И АЭС_ПлатежиТовары.ДокументПродажи.ФормаОплаты <> &ПлатежнаяКарта
	|
	|СГРУППИРОВАТЬ ПО
	|	АЭС_ПлатежиТовары.ДокументПродажи,
	|	АЭС_ПлатежиТовары.Секция,
	|	АЭС_ПлатежиТовары.ВидОплаты,
	|	АЭС_ПлатежиТовары.Ссылка.Контрагент,
	|	АЭС_ПлатежиТовары.ДокументПродажи.СуммаДокумента,
	|	АЭС_ПлатежиТовары.Ссылка.Статус,
	|	АЭС_ПлатежиТовары.Ссылка.АгентскийПлатеж,
	|	АЭС_ПлатежиТовары.СозданныйПКО,
	|	АЭС_ПлатежиТовары.СтавкаНДС,
	|	АЭС_ПлатежиТовары.НомерСтроки,
	|	АЭС_ПлатежиТовары.Ссылка,
	|	ВЫБОР
	|		КОГДА АЭС_ПлатежиТовары.ВидОплаты.ТипАналитикиДляСводногоПКО = ""ЮЛ""
	|			ТОГДА ВЫБОР
	|					КОГДА АЭС_ПлатежиТовары.Ссылка.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|						ТОГДА АЭС_ПлатежиТовары.Ссылка.Контрагент
	|					ИНАЧЕ АЭС_ПлатежиТовары.Ссылка.Контрагент.ЮридическоеФизическоеЛицо
	|				КОНЕЦ
	|		КОГДА АЭС_ПлатежиТовары.ВидОплаты.ТипАналитикиДляСводногоПКО = ""ФЛ""
	|			ТОГДА ВЫБОР
	|					КОГДА АЭС_ПлатежиТовары.Ссылка.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|						ТОГДА АЭС_ПлатежиТовары.Ссылка.Контрагент
	|					ИНАЧЕ АЭС_ПлатежиТовары.Ссылка.Контрагент.ЮридическоеФизическоеЛицо
	|				КОНЕЦ
	|		КОГДА АЭС_ПлатежиТовары.ВидОплаты.ТипАналитикиДляСводногоПКО = ""ЮЛФЛ""
	|			ТОГДА АЭС_ПлатежиТовары.Ссылка.Контрагент
	|		КОГДА АЭС_ПлатежиТовары.ВидОплаты.ТипАналитикиДляСводногоПКО = ""КонсигнантПринципал""
	|			ТОГДА АЭС_ПлатежиТовары.КонсигнантПринципал
	|		ИНАЧЕ АЭС_ПлатежиТовары.Ссылка.Контрагент.ЮридическоеФизическоеЛицо
	|	КОНЕЦ,
	|	АЭС_ПлатежиТовары.ДокументПродажи.Кассир,
	|	АЭС_ПлатежиТовары.ПризнакСпособаРасчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	АЭС_ПлатежиСторонниеУслуги.ДокументПродажи,
	|	АЭС_ПлатежиСторонниеУслуги.Секция,
	|	АЭС_ПлатежиСторонниеУслуги.ВидОплаты,
	|	АЭС_ПлатежиСторонниеУслуги.Ссылка.Контрагент,
	|	СУММА(АЭС_ПлатежиСторонниеУслуги.Сумма),
	|	АЭС_ПлатежиСторонниеУслуги.ДокументПродажи.СуммаДокумента,
	|	АЭС_ПлатежиСторонниеУслуги.Ссылка.Статус,
	|	АЭС_ПлатежиСторонниеУслуги.Ссылка.АгентскийПлатеж,
	|	АЭС_ПлатежиСторонниеУслуги.СозданныйПКО,
	|	АЭС_ПлатежиСторонниеУслуги.СтавкаНДС,
	|	СУММА(АЭС_ПлатежиСторонниеУслуги.СуммаНДС),
	|	АЭС_ПлатежиСторонниеУслуги.НомерСтроки,
	|	""СторонниеУслуги"",
	|	АЭС_ПлатежиСторонниеУслуги.Ссылка,
	|	ВЫБОР
	|		КОГДА АЭС_ПлатежиСторонниеУслуги.ВидОплаты.ТипАналитикиДляСводногоПКО = ""КонсигнантПринципал""
	|			ТОГДА АЭС_ПлатежиСторонниеУслуги.Ссылка.Партнер
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АЭС_ПлатежиСторонниеУслуги.ВидОплаты.ТипАналитикиДляСводногоПКО = ""ЮЛ""
	|					ТОГДА ВЫБОР
	|							КОГДА АЭС_ПлатежиСторонниеУслуги.Ссылка.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|								ТОГДА АЭС_ПлатежиСторонниеУслуги.Ссылка.Контрагент
	|							ИНАЧЕ АЭС_ПлатежиСторонниеУслуги.Ссылка.Контрагент.ЮридическоеФизическоеЛицо
	|						КОНЕЦ
	|				КОГДА АЭС_ПлатежиСторонниеУслуги.ВидОплаты.ТипАналитикиДляСводногоПКО = ""ФЛ""
	|					ТОГДА ВЫБОР
	|							КОГДА АЭС_ПлатежиСторонниеУслуги.Ссылка.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|								ТОГДА АЭС_ПлатежиСторонниеУслуги.Ссылка.Контрагент
	|							ИНАЧЕ АЭС_ПлатежиСторонниеУслуги.Ссылка.Контрагент.ЮридическоеФизическоеЛицо
	|						КОНЕЦ
	|				КОГДА АЭС_ПлатежиСторонниеУслуги.ВидОплаты.ТипАналитикиДляСводногоПКО = ""ЮЛФЛ""
	|					ТОГДА АЭС_ПлатежиСторонниеУслуги.Ссылка.Контрагент
	|				ИНАЧЕ АЭС_ПлатежиСторонниеУслуги.Ссылка.Контрагент.ЮридическоеФизическоеЛицо
	|			КОНЕЦ
	|	КОНЕЦ,
	|	АЭС_ПлатежиСторонниеУслуги.ДокументПродажи.Кассир,
	|	АЭС_ПлатежиСторонниеУслуги.ПризнакСпособаРасчета
	|ИЗ
	|	Документ.АЭС_Платежи.СторонниеУслуги КАК АЭС_ПлатежиСторонниеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|		ПО АЭС_ПлатежиСторонниеУслуги.ДокументПродажи = ЧекККМВозврат.ЧекККМ
	|ГДЕ
	|	АЭС_ПлатежиСторонниеУслуги.ДокументПродажи.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И АЭС_ПлатежиСторонниеУслуги.Ссылка.КассаККМ = &КассаККМ
	|	И НАЧАЛОПЕРИОДА(АЭС_ПлатежиСторонниеУслуги.Ссылка.Дата, ДЕНЬ) = &Дата
	|	И (АЭС_ПлатежиСторонниеУслуги.СозданныйПКО = ЗНАЧЕНИЕ(Документ.ПриходныйКассовыйОрдер.ПустаяСсылка)
	|			ИЛИ АЭС_ПлатежиСторонниеУслуги.СозданныйПКО.Проведен = ЛОЖЬ
	|			ИЛИ АЭС_ПлатежиСторонниеУслуги.СозданныйПКО.ПометкаУдаления = ИСТИНА)
	|	И (ЧекККМВозврат.Ссылка ЕСТЬ NULL
	|			ИЛИ НЕ ЧекККМВозврат.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
	|	И АЭС_ПлатежиСторонниеУслуги.ДокументПродажи.ФормаОплаты <> &ПлатежнаяКарта
	|
	|СГРУППИРОВАТЬ ПО
	|	АЭС_ПлатежиСторонниеУслуги.ДокументПродажи,
	|	АЭС_ПлатежиСторонниеУслуги.Секция,
	|	АЭС_ПлатежиСторонниеУслуги.ВидОплаты,
	|	АЭС_ПлатежиСторонниеУслуги.Ссылка.Контрагент,
	|	АЭС_ПлатежиСторонниеУслуги.ДокументПродажи.СуммаДокумента,
	|	АЭС_ПлатежиСторонниеУслуги.Ссылка.Статус,
	|	АЭС_ПлатежиСторонниеУслуги.Ссылка.АгентскийПлатеж,
	|	АЭС_ПлатежиСторонниеУслуги.СозданныйПКО,
	|	АЭС_ПлатежиСторонниеУслуги.СтавкаНДС,
	|	АЭС_ПлатежиСторонниеУслуги.НомерСтроки,
	|	АЭС_ПлатежиСторонниеУслуги.Ссылка,
	|	ВЫБОР
	|		КОГДА АЭС_ПлатежиСторонниеУслуги.ВидОплаты.ТипАналитикиДляСводногоПКО = ""КонсигнантПринципал""
	|			ТОГДА АЭС_ПлатежиСторонниеУслуги.Ссылка.Партнер
	|		ИНАЧЕ ВЫБОР
	|				КОГДА АЭС_ПлатежиСторонниеУслуги.ВидОплаты.ТипАналитикиДляСводногоПКО = ""ЮЛ""
	|					ТОГДА ВЫБОР
	|							КОГДА АЭС_ПлатежиСторонниеУслуги.Ссылка.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|								ТОГДА АЭС_ПлатежиСторонниеУслуги.Ссылка.Контрагент
	|							ИНАЧЕ АЭС_ПлатежиСторонниеУслуги.Ссылка.Контрагент.ЮридическоеФизическоеЛицо
	|						КОНЕЦ
	|				КОГДА АЭС_ПлатежиСторонниеУслуги.ВидОплаты.ТипАналитикиДляСводногоПКО = ""ФЛ""
	|					ТОГДА ВЫБОР
	|							КОГДА АЭС_ПлатежиСторонниеУслуги.Ссылка.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|								ТОГДА АЭС_ПлатежиСторонниеУслуги.Ссылка.Контрагент
	|							ИНАЧЕ АЭС_ПлатежиСторонниеУслуги.Ссылка.Контрагент.ЮридическоеФизическоеЛицо
	|						КОНЕЦ
	|				КОГДА АЭС_ПлатежиСторонниеУслуги.ВидОплаты.ТипАналитикиДляСводногоПКО = ""ЮЛФЛ""
	|					ТОГДА АЭС_ПлатежиСторонниеУслуги.Ссылка.Контрагент
	|				ИНАЧЕ АЭС_ПлатежиСторонниеУслуги.Ссылка.Контрагент.ЮридическоеФизическоеЛицо
	|			КОНЕЦ
	|	КОНЕЦ,
	|	АЭС_ПлатежиСторонниеУслуги.ДокументПродажи.Кассир,
	|	АЭС_ПлатежиСторонниеУслуги.ПризнакСпособаРасчета";
	
	Возврат ЗапросТекст;	
	
КонецФункции // ПолучитьТекстЗапроса()

&НаСервере
Процедура ОбновитьСписокДокументовНаСервере()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ПолучитьТекстЗапроса();
	
	Запрос.УстановитьПараметр("КассаККМ",		Объект.КассаККМ);
	Запрос.УстановитьПараметр("Дата",			Объект.Дата);
	Запрос.УстановитьПараметр("ПлатежнаяКарта",	Перечисления.ФормыОплаты.ПлатежнаяКарта);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	// Коля :) 2017-05-27
	Объект.ДокументыДляОбработки.Очистить();
	Элементы.СоздатьПКОПоступлениеИзКассыККМ.Доступность = Ложь;
	Элементы.ПровестиПКО.Доступность = Ложь;
	
	Пока Выборка.Следующий() Цикл
		НовСтр = Объект.ДокументыДляОбработки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
		СтавкаНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(НовСтр.СтавкаНДС);
		НовСтр.СуммаНДС = НовСтр.Сумма - 100 * НовСтр.Сумма / (100+СтавкаНДС);
		НовСтр.ПКО = Неопределено;
		Если Не Выборка.Кассир.Пустая() И Объект.Кассир.Пустая() Тогда //для печатной формы
			Объект.Кассир = Выборка.Кассир;
		КонецЕсли;
		Если Выборка.ТабЧастьПлатежа = "СторонниеУслуги" и НЕ Выборка.Секция = 8 Тогда 
			НовСтр.АгентскийПлатеж = Ложь;
		КонецЕсли;
		НовСтр.ПризнакСпособаРасчета = Выборка.ПризнакСпособаРасчета;
		//НовСтр.Обрабатывать = Не ЗначениеЗаполнено(Выборка.ДокументПродажи.СозданныйПКО);
	КонецЦикла;
	
	// Коля :) 2017-05-27
	Если  Объект.ДокументыДляОбработки.Количество() > 0 Тогда
		Элементы.СоздатьПКОПоступлениеИзКассыККМ.Доступность = Истина;
	КонецЕсли;

	//для печатной формы	//ответсвенные лица
	стркт = ОтветственныеЛицаБППереопределяемый.ОтветственныеЛица(Объект.Организация,Объект.Дата);	// Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер
	Объект.ГлавныйБухгалтер = стркт.ГлавныйБухгалтер;
	
	ФИОКассираРодПадеж = Строка(Объект.Кассир);
	
	Пол = ?(ЗначениеЗаполнено(Объект.Кассир.ФизическоеЛицо), ?(Объект.Кассир.ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский, 2, 1), Неопределено);
	ФИОКассираРодПадеж = СклонениеПредставленийОбъектов.ПросклонятьФИО(ФИОКассираРодПадеж, 4, Объект.Кассир.ФизическоеЛицо, Пол);
	
	Объект.ПринятоОт ="ККТ №"+Объект.КассаККМ.СерийныйНомер + " через " + ФИОКассираРодПадеж;
	Объект.Приложение = "реестр платежей от " + Формат(Объект.Дата,"ДФ=dd.MM.yyyy");
	
	Элементы.СоздатьПКОПоступлениеИзКассыККМ.Доступность = Истина;
	Элементы.ПровестиПКО.Доступность = Ложь;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДокументов(Команда)
	ОбновитьСписокДокументовНаСервере();
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПересчитатьСуммуНДС(СтруктураДействий,Объект)
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
КонецФункции


&НаСервере
Процедура __ПровестиПКОНаСервере__()  // заполняем ПКО суммами и доп запись в таб часть
	
	ТаблицаПКО = Объект.ДокументыДляОбработки.Выгрузить(, "ПКО, АгентскийПлатеж,Сумма, СуммаПКО,СуммаНДС");//СтавкаНДС_ПКО
	ТаблицаПКО.Свернуть("ПКО, АгентскийПлатеж,", "Сумма,СуммаНДС");  //СтавкаНДС_ПКО Секция,    СуммаПКО
	Попытка
		НачатьТранзакцию();	
		
		    тз_ПКО_хи = Объект.ДокументыДляОбработки.Выгрузить();
			тз_ПКО_хи.Свернуть("ПКО","Сумма");
			
			тз_сумм_ндс_ПКОх = Объект.ДокументыДляОбработки.Выгрузить();
			тз_сумм_ндс_ПКОх.Свернуть("ПКО,СтавкаНДС","Сумма,СуммаНДС");
			
			для Каждого стр_тзПКОхи Из тз_ПКО_хи Цикл 
				ДокПКО = стр_тзПКОхи.ПКО.ПолучитьОбъект();
				ДокПКО.СуммаДокумента = стр_тзПКОхи.Сумма;
				
				Отбор = Новый Структура("ПКО", стр_тзПКОхи.ПКО);
				МассивСтрок = тз_сумм_ндс_ПКОх.НайтиСтроки(Отбор);
				Если МассивСтрок.Количество() >0 Тогда 
					
					тз_тмп=Новый ТаблицаЗначений; // для подсчета и формирования НДС строки
					тз_тмп.Колонки.Добавить("СтавкаНДС");
					тз_тмп.Колонки.Добавить("СуммаНДС");
					
					ДокПКО.РасшифровкаПлатежа.очистить();
					Для х=1 По МассивСтрок.Количество() Цикл 
							НовСтр=ДокПКО.РасшифровкаПлатежа.Добавить();
							НовСтр.Сумма		= МассивСтрок[х-1].Сумма;
							НовСтр.СтавкаНДС	= МассивСтрок[х-1].СтавкаНДС;
							НовСтр.СуммаНДС		= МассивСтрок[х-1].СуммаНДС;
							
							НовСтр=тз_тмп.Добавить(); // для подсчета и формирования НДС строки
							НовСтр.СтавкаНДС 	= МассивСтрок[х-1].СтавкаНДС;
							НовСтр.СуммаНДС 	= МассивСтрок[х-1].СуммаНДС;
					КонецЦикла;
					
					ДокПКО.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(ДокПКО.Валюта, тз_тмп, Ложь);
				КонецЕсли;
				//ДокПКО.Записать(РежимЗаписиДокумента.Запись);
				ДокПКО.Записать(РежимЗаписиДокумента.Проведение);
			КонецЦикла;
			
			
		
		
		//Если Ложь Тогда 
		//	Для каждого стрТЗ Из ТаблицаПКО Цикл
		//		ДокПКО = стрТЗ.ПКО.ПолучитьОбъект();
		//		ДокПКО.СуммаДокумента = стрТЗ.СуммаПКО;
		//		//ДокПКО.ВТомЧислеНДС = "(НДС "+  стрТЗ.СтавкаНДС_ПКО+") "+Формат(стрТЗ.СуммаНДС_ПКО,"ЧДЦ=2; ЧРГ=");
		//		ДокПКО.АгентскийПлатеж = стрТЗ.АгентскийПлатеж;
		//		ДокПКО.СуммаДокумента = стрТЗ.Сумма;
		//		тч_РасшифровкаПлатежа = ДокПКО.РасшифровкаПлатежа;
		//		тч_РасшифровкаПлатежа.Очистить();
		//		НовСтр = тч_РасшифровкаПлатежа.Добавить();
		//		//ХозяйственнаяОперация - Поступление ДС из кассы ККМ // заполняется только 1 строка с Сумма
		//		НовСтр.Сумма = стрТЗ.Сумма; 
		//		//ХозяйственнаяОперация - Поступление оплаты от клиента // заполняются след.реквиз.таб.части:
		//		Если НЕ стрТЗ.СуммаНДС = 0 Тогда  //  _ПКО
		//			//НовСтр.СтатьяДвиженияДенежныхСредств       //Поступление оплаты от клиента
		//			//НовСтр.ВалютаВзаиморасчетов
		//			//НовСтр.СуммаВзаиморасчетов
		//			//НовСтр.Организация                    //КурскАтомЭнергоСбыт
		//			//НовСтр.СтавкаНДС = стрТЗ.СтавкаНДС_ПКО;	                  //18%
		//			НовСтр.СуммаНДС  = стрТЗ.СуммаНДС;                     // 152,54  _ПКО
		//			//тч_РасшифровкаПлатежа.Количество()
		//		КонецЕсли;
		//		ДокПКО.Записать(РежимЗаписиДокумента.Проведение);
		//	КонецЦикла;
		//	Для каждого стрТЗ Из Объект.ДокументыДляОбработки Цикл
		//		ДокПродажи = стрТЗ.ДокументПродажи.ПолучитьОбъект();
		//		ДокПродажи.СозданныйПКО = стрТЗ.ПКО;
		//		ДокПродажи.Записать(РежимЗаписиДокумента.Запись);
		//		стрТЗ.СуммаПКО = стрТЗ.ПКО.СуммаДокумента; 
		//	КонецЦикла;
		//	//{{{{{{{{{{{{{{{{{   код заполняет в ПКО.ВТомЧислеНДС =    СтавкаНДС    СуммаНДС
		//	//заполняем в ПКО - Объект.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(ДокПКО.Валюта, ДокПКО.РасшифровкаПлатежа, Ложь);
		//	тз_Чеки_ПКО = Объект.ДокументыДляОбработки.Выгрузить();
		//	тз_Чеки_ПКО.Свернуть("ДокументПродажи,ПКО");
		//	тз_сисокПКО = Объект.ДокументыДляОбработки.Выгрузить();
		//	тз_сисокПКО.Свернуть("ПКО");
		//	//тз_сисокЧекиККМ = Объект.ДокументыДляОбработки.Выгрузить("ДокументПродажи");
		//	//тз_сисокПКО.Свернуть("ДокументПродажи");
		//	Для Каждого стрТЗ Из тз_сисокПКО Цикл
		//		Отбор = Новый Структура("ПКО", стрТЗ.ПКО);
		//		МассивСтрок = тз_Чеки_ПКО.НайтиСтроки(Отбор);
		//		Если МассивСтрок.Количество() >0 Тогда //чеки
		//			тз_тмп=Новый ТаблицаЗначений;
		//			тз_тмп.Колонки.Добавить("СтавкаНДС");
		//			тз_тмп.Колонки.Добавить("СуммаНДС");
		//			Для х=1 По МассивСтрок.Количество() Цикл 
		//				Для Каждого СтрТовары из МассивСтрок[х-1].ДокументПродажи.Товары Цикл 
		//					НовСтр=тз_тмп.Добавить();
		//					НовСтр.СтавкаНДС = СтрТовары.СтавкаНДС;
		//					НовСтр.СуммаНДС =  СтрТовары.СуммаНДС;
		//				КонецЦикла;
		//			КонецЦикла;
		//			ОбъектПКО = стрТЗ.ПКО.ПолучитьОбъект();
		//			//тз =получить таблица из чеков.товары
		//			ОбъектПКО.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(ОбъектПКО.Валюта, тз_тмп, Ложь);
		//			ОбъектПКО.Записать(РежимЗаписиДокумента.Запись);
		//		КонецЕсли;
		//	КонецЦикла;	//  }}}}}}}}}}}}}}}
		//КонецЕсли;
		
		
		
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	
КонецПроцедуры

&НаСервере
Процедура ПровестиПКОНаСервере()  // заполняем ПКО суммами и доп запись в таб часть
	
	ТаблицаПКО = Объект.ДокументыДляОбработки.Выгрузить(, "ПКО, АгентскийПлатеж, ВидОплаты, Аналитика,Сумма, СуммаПКО,СуммаНДС");//СтавкаНДС_ПКО
	ТаблицаПКО.Свернуть("ПКО, АгентскийПлатеж, ВидОплаты, Аналитика", "Сумма,СуммаНДС");  //СтавкаНДС_ПКО Секция,    СуммаПКО
	Попытка
		НачатьТранзакцию();	
		
			ТаблицаПлатежей = Объект.ДокументыДляОбработки.Выгрузить();
			ТаблицаПлатежей.Свернуть("ДокументПлатежа");
			
			//распихиваем созданные ПКО по табчастям Платежа
			Для Каждого стрТЗ Из ТаблицаПлатежей Цикл
				ДокументПлатежа = стрТЗ.ДокументПлатежа.ПолучитьОбъект();	
				Если Ложь Тогда ДокументПлатежа = Документы.АЭС_Платежи.СоздатьДокумент(); КонецЕсли;
				МасСтрокТЧ = Объект.ДокументыДляОбработки.НайтиСтроки(Новый Структура("ДокументПлатежа", стрТЗ.ДокументПлатежа));
				
				Для Каждого ЭлМас Из МасСтрокТЧ Цикл
					//ДокументПлатежа[ЭлМас.ТабЧастьПлатежа][ЭлМас.НомерСтрокиПлатежа-1]	
					ДокументПлатежа[ЭлМас.ТабЧастьПлатежа][ЭлМас.НомерСтрокиПлатежа-1].СозданныйПКО = ЭлМас.ПКО;
				КонецЦикла;
				ДокументПлатежа.ОбменДанными.Загрузка = Истина;
				ДокументПлатежа.Записать();
			КонецЦикла;
		
		    тз_ПКО_хи = Объект.ДокументыДляОбработки.Выгрузить();
			тз_ПКО_хи.Свернуть("ПКО, ВидОплаты","Сумма");
			
			тз_сумм_ндс_ПКОх = Объект.ДокументыДляОбработки.Выгрузить();
			тз_сумм_ндс_ПКОх.Свернуть("ПКО,СтавкаНДС","Сумма,СуммаНДС");
			
			для Каждого стр_тзПКОхи Из тз_ПКО_хи Цикл 
				ДокПКО = стр_тзПКОхи.ПКО.ПолучитьОбъект();
				ДокПКО.СуммаДокумента = стр_тзПКОхи.Сумма;
				
				Отбор = Новый Структура("ПКО", стр_тзПКОхи.ПКО);
				МассивСтрок = тз_сумм_ндс_ПКОх.НайтиСтроки(Отбор);
				Если МассивСтрок.Количество() >0 Тогда 
					
					тз_тмп=Новый ТаблицаЗначений; // для подсчета и формирования НДС строки
					тз_тмп.Колонки.Добавить("СтавкаНДС");
					тз_тмп.Колонки.Добавить("СуммаНДС");
					
					ДокПКО.РасшифровкаПлатежа.очистить();
					Для х=1 По МассивСтрок.Количество() Цикл 
							НовСтр=ДокПКО.РасшифровкаПлатежа.Добавить();
							НовСтр.Сумма		= МассивСтрок[х-1].Сумма;
							НовСтр.СтавкаНДС	= МассивСтрок[х-1].СтавкаНДС;
							НовСтр.СуммаНДС		= МассивСтрок[х-1].СуммаНДС;
							
							НовСтр.Партнер = ДокПКО.Контрагент.Партнер;
							НовСтр.СуммаВзаиморасчетов = НовСтр.Сумма;
							НовСтр.Организация = ДокПКО.Организация;
							
							
							НовСтр.СтатьяДвиженияДенежныхСредств = стр_тзПКОхи.ВидОплаты.СтатьяДДСДляСводногоПКО;
							//ЗаполнитьРасшифровкуПлатежа(ДокПКО, стр_тзПКОхи.ВидОплаты);
							
							НовСтр=тз_тмп.Добавить(); // для подсчета и формирования НДС строки
							НовСтр.СтавкаНДС 	= МассивСтрок[х-1].СтавкаНДС;
							НовСтр.СуммаНДС 	= МассивСтрок[х-1].СуммаНДС;
							
					КонецЦикла;
					
					ДокПКО.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(ДокПКО.Валюта, тз_тмп, Ложь);
				КонецЕсли;
				ДокПКО.Договор = ЗаполнитьДоговор(ДокПКО.Контрагент.Партнер, ДокПКО.Организация, ДокПКО.Контрагент);
				//ДокПКО.Записать(РежимЗаписиДокумента.Запись);
				ДокПКО.Записать(РежимЗаписиДокумента.Проведение);
			КонецЦикла;
			
		
		
		//Если Ложь Тогда 
		//	Для каждого стрТЗ Из ТаблицаПКО Цикл
		//		ДокПКО = стрТЗ.ПКО.ПолучитьОбъект();
		//		ДокПКО.СуммаДокумента = стрТЗ.СуммаПКО;
		//		//ДокПКО.ВТомЧислеНДС = "(НДС "+  стрТЗ.СтавкаНДС_ПКО+") "+Формат(стрТЗ.СуммаНДС_ПКО,"ЧДЦ=2; ЧРГ=");
		//		ДокПКО.АгентскийПлатеж = стрТЗ.АгентскийПлатеж;
		//		ДокПКО.СуммаДокумента = стрТЗ.Сумма;
		//		тч_РасшифровкаПлатежа = ДокПКО.РасшифровкаПлатежа;
		//		тч_РасшифровкаПлатежа.Очистить();
		//		НовСтр = тч_РасшифровкаПлатежа.Добавить();
		//		//ХозяйственнаяОперация - Поступление ДС из кассы ККМ // заполняется только 1 строка с Сумма
		//		НовСтр.Сумма = стрТЗ.Сумма; 
		//		//ХозяйственнаяОперация - Поступление оплаты от клиента // заполняются след.реквиз.таб.части:
		//		Если НЕ стрТЗ.СуммаНДС = 0 Тогда  //  _ПКО
		//			//НовСтр.СтатьяДвиженияДенежныхСредств       //Поступление оплаты от клиента
		//			//НовСтр.ВалютаВзаиморасчетов
		//			//НовСтр.СуммаВзаиморасчетов
		//			//НовСтр.Организация                    //КурскАтомЭнергоСбыт
		//			//НовСтр.СтавкаНДС = стрТЗ.СтавкаНДС_ПКО;	                  //18%
		//			НовСтр.СуммаНДС  = стрТЗ.СуммаНДС;                     // 152,54  _ПКО
		//			//тч_РасшифровкаПлатежа.Количество()
		//		КонецЕсли;
		//		ДокПКО.Записать(РежимЗаписиДокумента.Проведение);
		//	КонецЦикла;
		//	Для каждого стрТЗ Из Объект.ДокументыДляОбработки Цикл
		//		ДокПродажи = стрТЗ.ДокументПродажи.ПолучитьОбъект();
		//		ДокПродажи.СозданныйПКО = стрТЗ.ПКО;
		//		ДокПродажи.Записать(РежимЗаписиДокумента.Запись);
		//		стрТЗ.СуммаПКО = стрТЗ.ПКО.СуммаДокумента; 
		//	КонецЦикла;
		//	//{{{{{{{{{{{{{{{{{   код заполняет в ПКО.ВТомЧислеНДС =    СтавкаНДС    СуммаНДС
		//	//заполняем в ПКО - Объект.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(ДокПКО.Валюта, ДокПКО.РасшифровкаПлатежа, Ложь);
		//	тз_Чеки_ПКО = Объект.ДокументыДляОбработки.Выгрузить();
		//	тз_Чеки_ПКО.Свернуть("ДокументПродажи,ПКО");
		//	тз_сисокПКО = Объект.ДокументыДляОбработки.Выгрузить();
		//	тз_сисокПКО.Свернуть("ПКО");
		//	//тз_сисокЧекиККМ = Объект.ДокументыДляОбработки.Выгрузить("ДокументПродажи");
		//	//тз_сисокПКО.Свернуть("ДокументПродажи");
		//	Для Каждого стрТЗ Из тз_сисокПКО Цикл
		//		Отбор = Новый Структура("ПКО", стрТЗ.ПКО);
		//		МассивСтрок = тз_Чеки_ПКО.НайтиСтроки(Отбор);
		//		Если МассивСтрок.Количество() >0 Тогда //чеки
		//			тз_тмп=Новый ТаблицаЗначений;
		//			тз_тмп.Колонки.Добавить("СтавкаНДС");
		//			тз_тмп.Колонки.Добавить("СуммаНДС");
		//			Для х=1 По МассивСтрок.Количество() Цикл 
		//				Для Каждого СтрТовары из МассивСтрок[х-1].ДокументПродажи.Товары Цикл 
		//					НовСтр=тз_тмп.Добавить();
		//					НовСтр.СтавкаНДС = СтрТовары.СтавкаНДС;
		//					НовСтр.СуммаНДС =  СтрТовары.СуммаНДС;
		//				КонецЦикла;
		//			КонецЦикла;
		//			ОбъектПКО = стрТЗ.ПКО.ПолучитьОбъект();
		//			//тз =получить таблица из чеков.товары
		//			ОбъектПКО.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(ОбъектПКО.Валюта, тз_тмп, Ложь);
		//			ОбъектПКО.Записать(РежимЗаписиДокумента.Запись);
		//		КонецЕсли;
		//	КонецЦикла;	//  }}}}}}}}}}}}}}}
		//КонецЕсли;
		
		
		
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиПКО(Команда)
	ПровестиПКОНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриОткрытииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	//Вставить содержимое обработчика
КонецПроцедуры

&НаСервере
Функция ПолучитьСоответствиеПрефиксовПКО()
	
	Результат = Новый Соответствие;
	Результат.Вставить(Ложь,	Неопределено);
	Результат.Вставить(Истина,	Неопределено);
	
	Для Каждого ЭлС Из Результат Цикл
	
		Если ЭлС.Ключ Тогда
			Префикс = "А";
		Иначе
			Префикс = "";
		КонецЕсли;
		
		Префикс = Префикс + Объект.Организация.Префикс;
		//Префикс = Префикс + .Код;
		
		ПВХ_КодПодразделения = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Код подразделения (Структура предприятия)");
		Если ЗначениеЗаполнено(ПВХ_КодПодразделения) Тогда
			
			МассивРеквизитов = Новый Массив;
			МассивРеквизитов.Добавить(ПВХ_КодПодразделения);
			
			ЗначенияРеквизитовНоменклатуры = УправлениеСвойствами.ПолучитьЗначенияСвойств(Объект.КассаККМ.Подразделение, Истина, Ложь, МассивРеквизитов);
			Если ЗначенияРеквизитовНоменклатуры.Количество() = 1 Тогда
				Префикс = Префикс + ЗначенияРеквизитовНоменклатуры[0].Значение;
			КонецЕсли;
		КонецЕсли;
		
		
		Результат.Вставить(ЭлС.Ключ, Префикс);

		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОчиститьТабчастиПометитьНаУдалениеПКОНаСервере()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ПолучитьТекстЗапроса();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СозданныйПКО = ЗНАЧЕНИЕ(Документ.ПриходныйКассовыйОрдер.ПустаяСсылка)", "СозданныйПКО <> ЗНАЧЕНИЕ(Документ.ПриходныйКассовыйОрдер.ПустаяСсылка)");
	
	Запрос.УстановитьПараметр("КассаККМ",		Объект.КассаККМ);
	Запрос.УстановитьПараметр("Дата",			Объект.Дата);
	Запрос.УстановитьПараметр("ПлатежнаяКарта",	Перечисления.ФормыОплаты.ПлатежнаяКарта);
	
	Результат = Запрос.Выполнить();
	ТЗ = Результат.Выгрузить();
	ТЗ.Свернуть("ДокументПлатежа");
	
	ТЗПКО = Новый ТаблицаЗначений;
	ТЗПКО.Колонки.Добавить("ПКО");
	
	Для Каждого стрТЗ Из ТЗ Цикл
		ДокОб = стрТЗ.ДокументПлатежа.ПОлучитьОбъект();
		Если Ложь Тогда ДокОб = Документы.АЭС_Платежи.СоздатьДокумент(); КонецЕсли;
		
		Для Каждого стрТЧ Из ДокОб.ОсновнаяДеятельность Цикл
			НовСтр = ТЗПКО.Добавить();
			НовСтр.ПКО = стрТЧ.СозданныйПКО;
			стрТЧ.СозданныйПКО = Неопределено;
		КонецЦикла;
		Для Каждого стрТЧ Из ДокОб.Товары Цикл
			НовСтр = ТЗПКО.Добавить();
			НовСтр.ПКО = стрТЧ.СозданныйПКО;
			стрТЧ.СозданныйПКО = Неопределено;
		КонецЦикла;
		Для Каждого стрТЧ Из ДокОб.СторонниеУслуги Цикл
			НовСтр = ТЗПКО.Добавить();
			НовСтр.ПКО = стрТЧ.СозданныйПКО;
			стрТЧ.СозданныйПКО = Неопределено;
		КонецЦикла;
		ДокОб.Записать();
	КонецЦикла;
	
	
	ТЗПКО.Свернуть("ПКО");
	Для Каждого стрТЗ Из ТЗПКО Цикл
		ДокОб = стрТЗ.ПКО.ПолучитьОбъект();
		Если Ложь Тогда ДокОб = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент(); КонецЕсли;
		
		ДокОб.ПометкаУдаления = Истина;
		ДокОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабчастиПометитьНаУдалениеПКО(Команда)
	
	Если Вопрос("Сводные ПКО по указанной кассе ККМ на указанную дату будут помечены на удаление! Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьТабчастиПометитьНаУдалениеПКОНаСервере();
	
КонецПроцедуры


Функция ПолучитьТекстОснования(ВидОплаты, ПризнакСпособаРасчета, Аналитика)
	
	Результат = ВидОплаты.ОснованиеДляСводногоПКО;
	Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная Тогда 
		Результат = СтрЗаменить(Результат, "Оплата","Предоплата");
	КонецЕсли;
	
	Если ВидОплаты.ПринадлежитЭлементу(Справочники.АЭС_ВидОплаты.ПродажаТоваровПоДоговоруКомиссииГруппа) Тогда
		Результат = Результат + " № ____ от ____ " + Строка(Аналитика);
	Иначе
		Если Аналитика = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Результат = Результат + " (физ. лица)";
		ИначеЕсли Аналитика = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Результат = Результат + " (юр. лица)";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	

КонецФункции // ПолучитьТекстОснования()


Процедура ЗаполнитьРасшифровкуПлатежа(ДокПКО, НовСтрТЧ)
	Если Ложь Тогда ДокПКО = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент(); КонецЕсли;
	
	//НовСтрТЧ.СтавкаНДС = ВидОплаты.СтавкаНДС;
	
	//СтавкаНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(НовСтрТЧ.СтавкаНДС);
	//НовСтрТЧ.СуммаНДС = НовСтрТЧ.Сумма - НовСтрТЧ.Сумма / (1+СтавкаНДС);
	
КонецПроцедуры

Процедура ЗаполнитьКонтрагента(ДокПКО, ВидОплаты, Аналитика)
	
	Если Аналитика = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ДокПКО.Контрагент = ВидОплаты.КонтрагентФЛ;
	ИначеЕсли Аналитика = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ДокПКО.Контрагент = ВидОплаты.КонтрагентЮЛ;
	ИначеЕсли ВидОплаты.ПринадлежитЭлементу(Справочники.АЭС_ВидОплаты.ПродажаТоваровПоДоговоруКомиссииГруппа) Тогда
		ДокПКО.Контрагент = ВидОплаты.КонтрагентФЛ;
	ИначеЕсли ТипЗнч(Аналитика) = Тип("СправочникСсылка.Партнеры") Тогда 
		ДокПКО.Контрагент = ВидОплаты.КонтрагентФЛ;
	Иначе
		ДокПКО.Контрагент = Аналитика;
	КонецЕсли;


	

КонецПроцедуры

&НаСервере
Функция ЗаполнитьДоговор(мПартнер, мОрганизация, мКонтрагент)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	АналитикаУчетаПоПартнерам.Договор КАК Договор
	               |ИЗ
	               |	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	               |ГДЕ
	               |	АналитикаУчетаПоПартнерам.Партнер = &Партнер
	               |	И АналитикаУчетаПоПартнерам.Организация = &Организация
	               |	И АналитикаУчетаПоПартнерам.Контрагент = &Контрагент";
	
	Запрос.УстановитьПараметр("Партнер", мПартнер);
	Запрос.УстановитьПараметр("Организация", мОрганизация);
	Запрос.УстановитьПараметр("Контрагент", мКонтрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Договор;
	Иначе
		Возврат	Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
КонецФункции



