
Перем ПрошлыйМетаданныеСсылкиИсточника;
Перем ДвиженияРегистра;
Перем ТЗ_ОтражениеВБухУчете20;
Перем СтруктураЗП;
Перем СтруктураСпрАдреса;
Перем ПеремАдресПолныйБезКвартиры;

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Функция ПреобразоватьАдрес(Знач Адрес, БезКорректировкиАдреса = Ложь, ГородПоиска = Неопределено)
	
	ИсходныйАдрес1 = СокрЛП(СтрЗаменить(Адрес, "РФ,", ""));
	ИсходныйАдрес1 = СтрЗаменить(ИсходныйАдрес1, "-", "");
	ИсходныйАдрес1 = СтрЗаменить(ИсходныйАдрес1, """", "");
	ИсходныйАдрес1 = ЗаменитьАнглБуквы(ИсходныйАдрес1);
	ИсходныйАдрес1 = УдалитьПробелМеждуЦифройИБуквой(ИсходныйАдрес1);
	ИсходныйАдрес1 = СтрЗаменить(ИсходныйАдрес1, " рн,", " р-н,");;	
	Адрес = ИсходныйАдрес1; 
	Адрес = РазобратьСтрокуБезРазделителяПоСловам(Адрес);
	Если ГородПоиска <> Неопределено И ГородПоиска <> "" Тогда
		Адрес = Адрес + ", " + ГородПоиска;
	КонецЕсли;
	
	Если НЕ БезКорректировкиАдреса Тогда
		Адрес1 = ПолучитьКорректныйАдрес(Адрес);
		Если Адрес1 = Неопределено Тогда
			Если СтрДлина(Адрес) > 7 Тогда
				Если Сред(Адрес, 7, 1) = " " ИЛИ Сред(Адрес, 7, 1) = "," Тогда 
					Адрес1 = СокрЛП(Сред(Адрес, 8, СтрДлина(Адрес)));
					Адрес1 = ПолучитьКорректныйАдрес(Адрес1);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Адрес1<>Неопределено Тогда
			Адрес = Адрес1;
		КонецЕсли;
	КонецЕсли;
	
	Адрес = СтрЗаменить(Адрес, "\", "");
	
	БэкапАдреса = Адрес;
	Адрес = СтрЗаменить(Адрес, " ", "+");
	
	Соединение = Новый HTTPСоединение("ahunter.ru", 80);
	Запрос = Новый HTTPЗапрос("/site/demo/address?query=" + Адрес);
	Результат = Соединение.ОтправитьДляОбработки(Запрос);
	ИсходныйТекст = Результат.ПолучитьТелоКакСтроку();
	
	Если СтрНайти(ИсходныйТекст, "title=""Region"">")=0 Тогда
		Возврат ИсходныйАдрес1;		
	КонецЕсли;
	
	Регион = "";
	Если СтрНайти(ИсходныйТекст, "title=""Region"">")>0 Тогда
		ИсходныйТекст = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "<div class=""b-CellMid b-TPaddingStd b-RPaddingStd"" style=""width: 3em"">")+70, СтрДлина(ИсходныйТекст));
		РегионТип = Сред(ИсходныйТекст, 1, СтрНайти(ИсходныйТекст, "</div>")-1);
		
		Регион = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "title=""Region"">")+15, 300);
		Регион = Сред(Регион, 1, СтрНайти(Регион, "</div>")-1);
		Регион = ", " + Регион + " " + РегионТип;
	КонецЕсли;
	
	Район = "";
	Если СтрНайти(ИсходныйТекст, "title=""District"">") > 0 Тогда
		ИсходныйТекст = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "<div class=""b-CellMid b-TPaddingStd b-RPaddingStd"" style=""width: 3em"">")+70, СтрДлина(ИсходныйТекст));
		РайонТип = Сред(ИсходныйТекст, 1, СтрНайти(ИсходныйТекст, "</div>")-1);
		
		Район = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "title=""District"">")+17, 300);
		Район = Сред(Район, 1, СтрНайти(Район, "</div>")-1);
		
		Район = ", " + Район + " " + РайонТип;
	КонецЕсли;
	
	Город = "";
	Если СтрНайти(ИсходныйТекст, "title=""City"">") > 0 Тогда
		ИсходныйТекст = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "<div class=""b-CellMid b-TPaddingStd b-RPaddingStd"" style=""width: 3em"">")+70, СтрДлина(ИсходныйТекст));
		ГородТип = Сред(ИсходныйТекст, 1, СтрНайти(ИсходныйТекст, "</div>")-1);
		
		Город = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "title=""City"">")+13, 300);
		Город = Сред(Город, 1, СтрНайти(Город, "</div>")-1);
		
		Город = ", "+Город + " " + ГородТип;
	КонецЕсли;
	
	НаселенныйПункт = "";
	Если СтрНайти(ИсходныйТекст, "title=""Place"">") > 0 Тогда
		ИсходныйТекст = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "<div class=""b-CellMid b-TPaddingStd b-RPaddingStd"" style=""width: 3em"">")+70, СтрДлина(ИсходныйТекст));
		НаселенныйПунктТип = Сред(ИсходныйТекст, 1, СтрНайти(ИсходныйТекст, "</div>")-1);
		
		НаселенныйПункт = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "title=""Place"">")+14, 300);
		НаселенныйПункт = Сред(НаселенныйПункт, 1, СтрНайти(НаселенныйПункт, "</div>")-1);
		
		НаселенныйПункт = ", "+НаселенныйПункт + " " + НаселенныйПунктТип;
	КонецЕсли;

	Микрорайон = "";
	Если СтрНайти(ИсходныйТекст, "title=""Site"">") > 0 Тогда
		
		ИсходныйТекст = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "<div class=""b-CellMid b-TPaddingStd b-RPaddingStd"" style=""width: 3em"">")+70, СтрДлина(ИсходныйТекст));
		МикрорайонТип = Сред(ИсходныйТекст, 1, СтрНайти(ИсходныйТекст, "</div>")-1);
		
		Микрорайон = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "title=""Site"">")+13, 300);
		Микрорайон = Сред(Микрорайон, 1, СтрНайти(Микрорайон, "</div>")-1);
		
		Микрорайон = ", "+МикрорайонТип + " " + Микрорайон;
	КонецЕсли;

	
	Улица = "";
	Если СтрНайти(ИсходныйТекст, "title=""Street"">") > 0 Тогда
		
		ИсходныйТекст = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "<div class=""b-CellMid b-TPaddingStd b-RPaddingStd"" style=""width: 3em"">")+70, СтрДлина(ИсходныйТекст));
		УлицаТип = Сред(ИсходныйТекст, 1, СтрНайти(ИсходныйТекст, "</div>")-1);
		
		Улица = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "title=""Street"">")+15, 300);
		Улица = Сред(Улица, 1, СтрНайти(Улица, "</div>")-1);
		
		Улица = ", "+Улица + " " + УлицаТип;
	КонецЕсли;

	
	Дом = "";
	ДомНомер = "";
	Если СтрНайти(ИсходныйТекст, "title=""House"">") > 0 Тогда
		ИсходныйТекст = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "<div class=""b-CellMid b-TPaddingStd b-RPaddingStd"" style=""width: 3em"">")+70, СтрДлина(ИсходныйТекст));
		ДомТип = Сред(ИсходныйТекст, 1, СтрНайти(ИсходныйТекст, "</div>")-1);
		
		Дом = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "title=""House"">")+14, 300);
		Дом = Сред(Дом, 1, СтрНайти(Дом, "</div>")-1);
		ДомНомер = Дом;
		
		Дом = ", "+ДомТип + " №" + " " + Дом;
	КонецЕсли;
		
	Корпус = "";
	КорпусНомер = "";
	Если СтрНайти(ИсходныйТекст, "title=""Building"">") > 0 Тогда
		ИсходныйТекст = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "<div class=""b-CellMid b-TPaddingStd b-RPaddingStd"" style=""width: 3em"">")+70, СтрДлина(ИсходныйТекст));
		КорпусТип = Сред(ИсходныйТекст, 1, СтрНайти(ИсходныйТекст, "</div>")-1);
		Если КорпусТип = "корп" Тогда
			КорпусТип = "корпус";
		ИначеЕсли КорпусТип = "уч-к" Тогда
			КорпусТип = "участок";
		КонецЕсли;
		
		Корпус = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "title=""Building"">")+17, 300);
		Корпус = Сред(Корпус, 1, СтрНайти(Корпус, "</div>")-1);
		КорпусНомер = Корпус;
		
		Корпус = ", "+КорпусТип + " " + Корпус;
	КонецЕсли;
	
	Строение = "";
	СтроениеНомер = "";
	Если СтрНайти(ИсходныйТекст, "title=""Structure"">") > 0 Тогда
		ИсходныйТекст = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "<div class=""b-CellMid b-TPaddingStd b-RPaddingStd"" style=""width: 3em"">")+70, СтрДлина(ИсходныйТекст));
		СтроениеТип = Сред(ИсходныйТекст, 1, СтрНайти(ИсходныйТекст, "</div>")-1);
		Если СтроениеТип = "стр" Тогда
			СтроениеТип = "строение";
		КонецЕсли;
		
		Строение = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "title=""Structure"">")+18, 300);
		Строение = Сред(Строение, 1, СтрНайти(Строение, "</div>")-1);
		СтроениеНомер = Строение;
		
		Строение = ", "+СтроениеТип + " " + Строение;
	КонецЕсли;

	
	Если Дом = "" И Корпус <> "" И КорпусТип <> "участок" Тогда
		Корпус = "";
		КорпусНомер = "";
	КонецЕсли;
	
	Квартира = "";
	КвартираНомер = "";
	Если СтрНайти(ИсходныйТекст, "title=""Flat"">") > 0 Тогда
		ИсходныйТекст = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "<div class=""b-CellMid b-TPaddingStd b-RPaddingStd"" style=""width: 3em"">")+70, СтрДлина(ИсходныйТекст));
		КвартираТип = Сред(ИсходныйТекст, 1, СтрНайти(ИсходныйТекст, "</div>")-1);
		
		Квартира = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "title=""Flat"">")+13, 300);
		Квартира = Сред(Квартира, 1, СтрНайти(Квартира, "</div>")-1);
		КвартираНомер = Квартира;
		
		Квартира = ", "+КвартираТип + " " + Квартира;
	КонецЕсли;
	
	АдресДляПоискаЭтажа = ВРег(БэкапАдреса);
	Если СтрНайти(АдресДляПоискаЭтажа, "ЭТ ") > 0 ИЛИ СтрНайти(АдресДляПоискаЭтажа, "ЭТ. ") > 0 ИЛИ СтрНайти(АдресДляПоискаЭтажа, "ЭТАЖ") > 0 Тогда
		КвартираТип = "этаж";
		Если СтрНайти(АдресДляПоискаЭтажа, "ЭТ ") > 0 Тогда
			Квартира = СокрЛП(Сред(БэкапАдреса, СтрНайти(АдресДляПоискаЭтажа, "ЭТ ")+3, СтрДлина(АдресДляПоискаЭтажа)));
		КонецЕсли;
		
		Если СтрНайти(АдресДляПоискаЭтажа, "ЭТ. ") > 0 Тогда
			Квартира = СокрЛП(Сред(БэкапАдреса, СтрНайти(АдресДляПоискаЭтажа, "ЭТ. ")+4, СтрДлина(АдресДляПоискаЭтажа)));
		КонецЕсли;
		
		Если СтрНайти(АдресДляПоискаЭтажа, "ЭТАЖ") > 0 Тогда
			Квартира = СокрЛП(Сред(БэкапАдреса, СтрНайти(АдресДляПоискаЭтажа, "ЭТАЖ")+4, СтрДлина(АдресДляПоискаЭтажа)));
		КонецЕсли;
		
		Квартира = ", "+КвартираТип + " " + Квартира;	
	КонецЕсли;
	
	
	Индекс = Сред(ИсходныйТекст, СтрНайти(ИсходныйТекст, "<div class=""b-CellMid b-TPaddingStd"" title=""Zip"">")+49, СтрДлина(ИсходныйТекст));
	Индекс = Сред(Индекс, 1, СтрНайти(Индекс, "</div>")-1);
	
	ФИАС = Индекс+Регион+Район+Город+НаселенныйПункт+Микрорайон+Улица+Дом+Строение+Корпус+Квартира;
	
	ФИАС = СтрЗаменить(ФИАС, "СТРОЕНИЕ", "строение");
	
	ВРЕГИсходныйАдрес = СокрЛП(ВРег(ИсходныйАдрес1));
	
	ДляПроверки = ВРЕГ(ИсходныйАдрес1);
	ДляПроверки = СтрЗаменить(ДляПроверки, " ", "");
	ДляПроверки = СтрЗаменить(ДляПроверки, ",", "");
	ДляПроверки = СтрЗаменить(ДляПроверки, ".", "");
	ДляПроверки = СтрЗаменить(ДляПроверки, "№", "");
	ДляПроверки = СтрЗаменить(ДляПроверки, "/", "");
	ДляПроверкиКорпуса = ДляПроверки;
	ДляПроверки = СтрЗаменить(ДляПроверки, "КОРПУС", "");

	
	ДомНомер = СтрЗаменить(ДомНомер, "/", "");
	КорпусНомер = СтрЗаменить(КорпусНомер, "/", "");
	КвартираНомер = СтрЗаменить(КвартираНомер, "/", "");
	КвартираНомер = СтрЗаменить(КвартираНомер, " ", "");
	КвартираНомер = СтрЗаменить(КвартираНомер, ",", "");
	КвартираНомер = СтрЗаменить(КвартираНомер, ".", "");
	
	СтроениеНомер = СтрЗаменить(СтроениеНомер, "/", "");
	
	Если (СтрНайти(ДляПроверки, "Д"+ДомНомер) = 0) И (СтрНайти(ДляПроверки, "ДОМ"+ДомНомер) = 0) И (СтрНайти(ДляПроверки, ДомНомер) = 0) И (БезКорректировкиАдреса = Ложь) И (ДомНомер <> "") Тогда
		Возврат ПреобразоватьАдрес(ИсходныйАдрес1, Истина);
	ИначеЕсли (КорпусТип = "корпус") И (СтрНайти(ДляПроверкиКорпуса, "К"+КорпусНомер) = 0) И (СтрНайти(ДляПроверкиКорпуса, "КОРПУС"+КорпусНомер) = 0) И (СтрНайти(ДляПроверкиКорпуса, "КОРП"+КорпусНомер) = 0) И (БезКорректировкиАдреса = Ложь) И (КорпусНомер <> "") Тогда
		Возврат ПреобразоватьАдрес(ИсходныйАдрес1, Истина);
	ИначеЕсли (КорпусТип = "участок") И (СтрНайти(ДляПроверки, "УЧ"+КорпусНомер) = 0) И (СтрНайти(ДляПроверки, "УЧАСТОК"+КорпусНомер) = 0) И (СтрНайти(ДляПроверки, "УЧ-К "+КорпусНомер) = 0) И (БезКорректировкиАдреса = Ложь) И (КорпусНомер <> "") Тогда
		Возврат ПреобразоватьАдрес(ИсходныйАдрес1, Истина);
	ИначеЕсли (КвартираТип = "помещение") И (СтрНайти(ДляПроверки, "ПОМ"+КвартираНомер) = 0) И (СтрНайти(ДляПроверки, "ПОМЕЩЕНИЕ"+КвартираНомер) = 0) И (СтрНайти(ДляПроверки, "П"+КвартираНомер) = 0) И (БезКорректировкиАдреса = Ложь) И (КвартираНомер <> "") Тогда
		Возврат ПреобразоватьАдрес(ИсходныйАдрес1, Истина);
	ИначеЕсли (КвартираТип = "блок") И (СтрНайти(ДляПроверки, "БЛОК"+КвартираНомер) = 0) И (СтрНайти(ДляПроверки, "Б"+КвартираНомер) = 0) И (СтрНайти(ДляПроверки, "БЛ"+КвартираНомер) = 0) И (БезКорректировкиАдреса = Ложь) И (КвартираНомер <> "") Тогда
		Возврат ПреобразоватьАдрес(ИсходныйАдрес1, Истина);
	ИначеЕсли (СтроениеТип = "владение") И (СтрНайти(ДляПроверки, "ВЛАДЕНИЕ"+СтроениеНомер) = 0) И (СтрНайти(ДляПроверки, "ВЛ"+СтроениеНомер) = 0) И (СтрНайти(ДляПроверки, "ВЛАД"+СтроениеНомер) = 0) И (БезКорректировкиАдреса = Ложь) И (СтроениеНомер <> "") Тогда
		Возврат ПреобразоватьАдрес(ИсходныйАдрес1, Истина);
	ИначеЕсли (СтроениеТип = "строение") И (СтрНайти(ДляПроверки, "СТР"+СтроениеНомер) = 0) И (СтрНайти(ДляПроверки, "СТРОЕНИЕ"+СтроениеНомер) = 0) И (СтрНайти(ДляПроверки, "Д"+СтроениеНомер) = 0) И (СтрНайти(ДляПроверки, "ДОМ"+СтроениеНомер) = 0) И (БезКорректировкиАдреса = Ложь) И (СтроениеНомер <> "") Тогда
		Возврат ПреобразоватьАдрес(ИсходныйАдрес1, Истина);
	ИначеЕсли (СтрНайти(ДляПроверки, ВРЕГ(ДомНомер)) = 0) И (БезКорректировкиАдреса = Истина) И (ДомНомер <> "") Тогда
		Возврат СокрЛП(СтрЗаменить(ИсходныйАдрес1, "РФ,", ""));
	ИначеЕсли (СтрДлина(ФИАС) < СтрДлина(ИсходныйАдрес1)/1.5) Тогда
		Возврат СокрЛП(СтрЗаменить(ИсходныйАдрес1, "РФ,", ""));
	Иначе
		Возврат ФИАС;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Функция РазобратьСтрокуБезРазделителяПоСловам(ИсходнаяСтрока) Экспорт

    НоваяСтрока = Лев(ИсходнаяСтрока, 1);//первую заглавную букву оставляем 
    Для н = 2 По СтрДлина(ИсходнаяСтрока) Цикл
        ТекСимвол = Сред(ИсходнаяСтрока, н, 1);//перебираем символы строки по 1
		ПредСимвол = Сред(ИсходнаяСтрока, н-1, 1);
        Если Нрег(ТекСимвол) <> ТекСимвол И Нрег(ПредСимвол) = ПредСимвол Тогда//это если большая буква и предыдущая буква маленькая 
            НоваяСтрока = НоваяСтрока + " " + ТекСимвол;
        Иначе
            НоваяСтрока = НоваяСтрока + ТекСимвол;
        КонецЕсли;
	КонецЦикла;
	
	НоваяСтрока = СтрЗаменить(НоваяСтрока, "  ", " ");
    
    Возврат НоваяСтрока;

КонецФункции

&НаКлиенте
Функция ЗаменитьАнглБуквы(Знач Адрес)
	
	Адрес = СтрЗаменить(Адрес, "A", "А");
	Адрес = СтрЗаменить(Адрес, "B", "В");
	Адрес = СтрЗаменить(Адрес, "C", "С");
	Адрес = СтрЗаменить(Адрес, "E", "У");
	Адрес = СтрЗаменить(Адрес, "O", "О");
	Адрес = СтрЗаменить(Адрес, "P", "Р");
	Адрес = СтрЗаменить(Адрес, "K", "К");
	Адрес = СтрЗаменить(Адрес, "H", "Н");
	Адрес = СтрЗаменить(Адрес, "X", "Х");
	Адрес = СтрЗаменить(Адрес, "M", "М");
	
	Адрес = СтрЗаменить(Адрес, "a", "а");
	Адрес = СтрЗаменить(Адрес, "c", "с");
	Адрес = СтрЗаменить(Адрес, "e", "е");
	Адрес = СтрЗаменить(Адрес, "o", "о");
	Адрес = СтрЗаменить(Адрес, "p", "р");
	Адрес = СтрЗаменить(Адрес, "k", "к");
	Адрес = СтрЗаменить(Адрес, "x", "х");
	
	Возврат Адрес;
	
КонецФункции

&НаКлиенте
Функция УдалитьПробелМеждуЦифройИБуквой(Знач Адрес)

	Для Число = 0 По 9 Цикл
		ЧислоТекст = "" + Число;
		Для Номер = 1040 По 1050 Цикл
			Символ = Символ(Номер);
			Адрес = СтрЗаменить(Адрес, ЧислоТекст + " " + Символ, ЧислоТекст+Символ);
		КонецЦикла;
		
		Для Номер = 1072 По 1082 Цикл
			Символ = Символ(Номер);
			Адрес = СтрЗаменить(Адрес, ЧислоТекст + " " + Символ, ЧислоТекст+Символ);
		КонецЦикла;		
	КонецЦикла;
	
	Возврат Адрес;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКорректныйАдрес(Адрес)
	
	Адрес22 = СтрЗаменить(Адрес, " ", "+");
	Соединение = Новый HTTPСоединение("ahunter.ru", 80);	
	Запрос = Новый HTTPЗапрос("/site/suggest/address?output=json&query="+Адрес22);	
	Результат = Соединение.Получить(Запрос);
	
	
	Рез = Результат.ПолучитьТелоКакСтроку();
	Если СтрНайти(Рез, """value"":""")>0 Тогда
		Рез = Сред(Рез, СтрНайти(Рез, """value"":""")+9, СтрДлина(Рез));
		Возврат Сред(Рез, 1, СтрНайти(Рез, """")-1);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
// Выводит сообщение об ошибке и выставляет параметр Отказ в "Истина". 
// В случае работы на клиенте или на сервере выводит в окно сообщений,
// в случае внешнего соединения вызывает исключение.
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  Отказ          - булево, признак отказа (необязательный).
//
Процедура мСообщитьОбОшибке(ТекстСообщения, Отказ = Ложь, Заголовок = "")

	НачалоСлужебногоСообщения    = Найти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");
	Если ОкончаниеСлужебногоСообщения > 0 И НачалоСлужебногоСообщения > 0 Тогда
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
		                 Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ЗначениеЗаполнено(Заголовок) Тогда
		Сообщить(Заголовок);
		Заголовок = "";
	КонецЕсли;
	
	Сообщить(ТекстСообщения, СтатусСообщения.Важное);
	
КонецПроцедуры // ОбщегоНазначения.СообщитьОбОшибке()

&НаКлиентеНаСервереБезКонтекста
// Функция "расщепляет" строку на подстроки, используя заданный
//		разделитель. Разделитель может иметь любую длину.
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например,
//		ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов,
//		три из которых - пустые строки, а
//		ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//	Параметры:
//		Стр - 			строка, которую необходимо разложить на подстроки.
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция мРазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				Попытка		
					МассивСтрок.Добавить(Число(Стр));	
				Исключение
					МассивСтрок.Добавить(0);
				КонецПопытки; 
				Возврат МассивСтрок;
			КонецЕсли;
			
			Попытка
				
				МассивСтрок.Добавить(Число(Лев(Стр,Поз-1)));
				
			Исключение
				МассивСтрок.Добавить(0);
			КонецПопытки; 
			
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
// Функция приводит строковое представление числа к его значению
//
// Параметры:
//  Представление - Представление числа
//  ОписаниеТипов - Допустимое описание типов численного значения
//
// Возвращаемое значение:
//  Значение типа число
//
Функция мПривестиКЧислу(Представление, Знач ОписаниеТипов = Неопределено, Примечание = "")
	
	Если ОписаниеТипов = Неопределено Тогда
		ОписаниеТипов = Новый ОписаниеТипов("Число");
	КонецЕсли;
	
	НРегПредставление = НРег(Представление);
	Если НРегПредставление = "да" или НРегПредставление = "истина" или НРегПредставление = "включено" Тогда
		Возврат 1;
	ИначеЕсли НРегПредставление = "нет" или НРегПредставление = "ложь" или НРегПредставление = "выключено" Тогда
		Возврат 0;
	КонецЕсли;
	
	Результат = СтрЗаменить(Представление, " ", "");
	Попытка
		Результат = Число(Результат);
	Исключение
		Примечание = "Неправильный формат числа";
		Возврат 0;
	КонецПопытки;
	
	Результат1 = ОписаниеТипов.ПривестиЗначение(Результат);
	
	Если Не Результат1 = Результат Тогда
		Примечание = "Недопустимое числовое значение";
	КонецЕсли;
	
	Возврат Результат1;
	
КонецФункции // мПривестиКЧислу()

&НаСервереБезКонтекста
// Функция приводит строковое представление даты к его значению
//
// Параметры:
//  Представление - Представление числа
//  ОписаниеТипов - Допустимое описание типов значения типа дата
//
// Возвращаемое значение:
//  Значение типа дата
//
Функция мПривестиКДате(Представление, ТипРеквизита, Примечание = "")
	
	Результат = ТипРеквизита.ПривестиЗначение(Представление);
	Если Результат = '00010101' Тогда
		
		МассивЧастей = ПолучитьЧастиПредставленияДаты(Представление);
		Если ТипРеквизита.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
			
			Попытка
				
				Если МассивЧастей.Количество() = 3 Тогда
					Результат = Дата(1,1,1, МассивЧастей[0],МассивЧастей[1],МассивЧастей[2]);
				ИначеЕсли МассивЧастей.Количество() = 6 Тогда
					Результат = Дата(1,1,1, МассивЧастей[3],МассивЧастей[4],МассивЧастей[5]);
				КонецЕсли;
				
			Исключение
				Примечание = "Неправильный формат даты";
			КонецПопытки;
			
		ИначеЕсли МассивЧастей.Количество() = 3 или МассивЧастей.Количество() = 6 Тогда
			
			Если МассивЧастей[0] >= 1000 Тогда
				Временно = МассивЧастей[0];
				МассивЧастей[0] = МассивЧастей[2];
				МассивЧастей[2] = Временно;
			КонецЕсли;
			
			Если МассивЧастей[2] < 100 Тогда
				МассивЧастей[2] = МассивЧастей[2] + ?(МассивЧастей[2] < 30, 2000,1900);
			КонецЕсли;
			
			Попытка
				Если МассивЧастей.Количество() = 3 или ТипРеквизита.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
					Результат = Дата(МассивЧастей[2],МассивЧастей[1],МассивЧастей[0]);
				Иначе
					Результат = Дата(МассивЧастей[2],МассивЧастей[1],МассивЧастей[0],МассивЧастей[3],МассивЧастей[4],МассивЧастей[5]);
				КонецЕсли;
			Исключение
				Примечание = "Неправильный формат даты";
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
// Функция приводит к виду движения накопления
//
Функция мПривестиКВидуДвиженияНакопления(Представление, ТипРеквизита, Примечание = "")
	
	Если ВРег(Представление) = "ПРИХОД" Тогда
		Возврат ВидДвиженияНакопления.Приход;
	ИначеЕсли ВРег(Представление) = "РАСХОД" Тогда
		Возврат ВидДвиженияНакопления.Расход;
	Иначе
		Примечание = "Неправильный вид движения накопления";	
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает части представления даты
//
// Параметры:
//  Представление - Представление даты
//
// Возвращаемое значение:
//  массив частей даты
//
Функция ПолучитьЧастиПредставленияДаты(ЗНАЧ Представление)
	
	МассивЧастей = Новый Массив;
	НачалоЦифры = 0;
	Для к = 1 По СтрДлина(Представление) Цикл
		
		Символ = Сред(Представление, к ,1);
		ЭтоЦифра = Символ >= "0" и Символ <= "9";
		
		Если ЭтоЦифра Тогда
			
			Если НачалоЦифры = 0 Тогда
				НачалоЦифры = к;
			КонецЕсли;
			
		Иначе
			
			Если Не НачалоЦифры = 0 Тогда
				МассивЧастей.Добавить(Число(Сред(Представление,НачалоЦифры, к - НачалоЦифры)));
			КонецЕсли;
			
			НачалоЦифры = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не НачалоЦифры = 0 Тогда
		МассивЧастей.Добавить(Число(Сред(Представление,НачалоЦифры)));
	КонецЕсли;
	
	Возврат МассивЧастей;
КонецФункции // ()

&НаСервереБезКонтекста
// Функция возвращает менеджер по типу значения
//
// Параметры:
//  ТипЗначения - Тип значения, по которому нужна вернуть менеджер
//
// Возвращаемое значение:
//  менеджер
Функция ПолучитьМенеджераПоТипу(ТипЗначения)
	
	Если Не ТипЗначения = Неопределено Тогда
		МенеджерыОбъектовМетаданных = Новый Структура("Справочники, Перечисления, Документы, ПланыВидовХарактеристик, ПланыСчетов, ПланыВидовРасчета, БизнесПроцессы, Задачи",
				Справочники,
				Перечисления,
				Документы,
				ПланыВидовХарактеристик,
				ПланыСчетов,
				ПланыВидовРасчета,
				БизнесПроцессы,
				Задачи);
		Для Каждого МенеджерОбъектаМетаданных Из МенеджерыОбъектовМетаданных Цикл
			Если МенеджерОбъектаМетаданных.Значение.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
				Менеджер = МенеджерОбъектаМетаданных.Значение[Метаданные.НайтиПоТипу(ТипЗначения).Имя];
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Возврат Менеджер;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает строковое описание типов реквизита
//
Функция ПолучитьОписаниеТипа(ОписаниеТиповРеквизита)
	
	ОписаниеТипов = "";
	
	Для каждого Тип Из ОписаниеТиповРеквизита.Типы() Цикл
		МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
		Если Не МетаданныеТипа = Неопределено Тогда
			ОписаниеТипа = МетаданныеТипа.ПолноеИмя();
		ИначеЕсли Тип = Тип("Строка") Тогда
			
			ОписаниеТипа = "Строка";
			Если ОписаниеТиповРеквизита.КвалификаторыСтроки.Длина Тогда
				ОписаниеТипа = ОписаниеТипа + ", " + ОписаниеТиповРеквизита.КвалификаторыСтроки.Длина;
				Если ОписаниеТиповРеквизита.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Фиксированная Тогда
					ОписаниеТипа = ОписаниеТипа + ", " + ДопустимаяДлина.Фиксированная;
				КонецЕсли;
	
			КонецЕсли;
			
		ИначеЕсли Тип = Тип("Число") Тогда
			ОписаниеТипа = "Число"
			+ ", "+ ОписаниеТиповРеквизита.КвалификаторыЧисла.Разрядность
			+ ", "+ ОписаниеТиповРеквизита.КвалификаторыЧисла.РазрядностьДробнойЧасти
			+ ?(ОписаниеТиповРеквизита.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Неотрицательный,", Неотрицательный","");
		ИначеЕсли Тип = Тип("Дата") Тогда
			ОписаниеТипа = "" + ОписаниеТиповРеквизита.КвалификаторыДаты.ЧастиДаты;
		ИначеЕсли Тип = Тип("Булево") Тогда
			ОписаниеТипа = "Булево";
		Иначе
			Продолжить;
		КонецЕсли;
		
		ОписаниеТипов = ?(ПустаяСтрока(ОписаниеТипов),"",ОписаниеТипов +Символы.ПС) + ОписаниеТипа;
		
	КонецЦикла;	
	
	Возврат ОписаниеТипов;

КонецФункции // ПолучитьОписаниеТипа()

&НаСервереБезКонтекста
// Функция проверяет на принадлежность объекта к типу ДокументыСсылка
//
// Параметры:
//	ПроверяемыйОбъект - Объект который требуется проверить
//
Функция мЭтоДокумент(ПроверяемыйОбъект)
	
	Возврат Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ПроверяемыйОбъект));
	
КонецФункции

&НаКлиенте
Функция мПолучитьТекущиеДанныеСтраницыНастройки(СтандартнаяОбработка = Истина)
	
	стр = Новый Структура("Ключ", Элементы.ГруппаЗагрузкаНастройка.ТекущаяСтраница.Имя);
	СтрокаНастроек = ТаблицыНастроек.НайтиСтроки(стр);	
	Если СтрокаНастроек.Количество() > 0 Тогда
		ТекДанные = Элементы[СтрокаНастроек[0].Значение].ТекущиеДанные;
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Возврат ТекДанные;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОХРАНЕНИЯ/ВОССТАНОВЛЕНИЯ НАСТРОЕК

&НаКлиенте
// Процедура выбора файла в который требуется сохранить настройки
//
// Парметры:
// 	Таблица - Строка с наименование реквизита (или список значений с наименованиями) которые требуется сохранить
//
Процедура СохранитьТаблицуВФайл(Таблица)
	
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ЗаголовокДиалога = "Сохранить статус выполнения в файл";
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Фильтр = "Настройка универсальной загрузки (*.qxlz)|*.qxlz";
	ДиалогОткрытияФайла.Заголовок = ЗаголовокДиалога;
	ДиалогОткрытияФайла.Фильтр = Фильтр;	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Файл = ДиалогОткрытияФайла.ПолноеИмяФайла;
		
		АдресХранилища = СохранитьТаблицу(Таблица);
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
		ДвоичныеДанные.Записать(Файл);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция сохраяет список значений в структуру и сохраняет его в хранилище значений
// 
// Парметры:
// 	Таблица - Строка с наименование реквизита (или список значений с наименованиями) которые требуется сохранить
//
Функция СохранитьТаблицу(Таблица)
	
	СостояниеВыполнения = Новый Структура;
	
	Если ТипЗнч(Таблица) = Тип("СписокЗначений") Тогда
		Для каждого Стр Из Таблица Цикл
			СостояниеВыполнения = ВыгрузитьТаблицыВСтруктуру(Стр.Значение, СостояниеВыполнения);	
		КонецЦикла;	
	Иначе
		СостояниеВыполнения = ВыгрузитьТаблицыВСтруктуру(Таблица, СостояниеВыполнения);
	КонецЕсли;
	
	временныйФайл = КаталогВременныхФайлов() + "\temp.txt";
    
	Если ЗначениеЗаполнено(временныйФайл) Тогда
		ЗначениеВФайл(временныйФайл, СостояниеВыполнения);
	КонецЕсли;
	
	СостояниеВыполнения.Очистить();
	
	файлТекстовый = Новый ДвоичныеДанные(временныйФайл);	
	АдресХранилища = ПоместитьВоВременноеХранилище(файлТекстовый, Новый УникальныйИдентификатор);
	
	Возврат(АдресХранилища);
	
КонецФункции

&НаСервере
// Функция выгружает значение сохраняемых реквизитов в структуру
//
// Параметры:
//	Таблица - Реквизит который требуется выгрузить в структуру
//	СостояниеВыполнения - Структура в которую выгружаются значения реквизитов
//
Функция ВыгрузитьТаблицыВСтруктуру(Таблица, СостояниеВыполнения)
	
	Если (ТипЗнч(ЭтаФорма[Таблица]) = Тип("ДанныеФормыКоллекция"))
		ИЛИ (ТипЗнч(ЭтаФорма[Таблица]) = Тип("ДанныеФормыДерево")) Тогда
		ТаблицаОб = РеквизитФормыВЗначение(Таблица);
		СостояниеВыполнения.Вставить(Таблица, ТаблицаОб);
	Иначе
		СостояниеВыполнения.Вставить(Таблица, ЭтаФорма[Таблица]);	
	КонецЕсли;
	
	Возврат(СостояниеВыполнения);
	
КонецФункции

&НаСервере
// Процедура получает сохраненную в хранилище структуру с настройками
//
// Параметры:
// 	АдресХранилища - адрес в хранилище значений
//
Процедура ВосстановитьТаблицу(АдресХранилища)
	
	файл = ПолучитьИзВременногоХранилища(АдресХранилища);
 
    временныйФайл = КаталогВременныхФайлов() + "\" + СтрЗаменить(СокрЛП(АдресХранилища),"/", "-") + ".txt";
    файл.Записать(временныйФайл);
	
	Попытка
		СостояниеВыполнения = ЗначениеИзФайла(временныйФайл);
	Исключение
		Сообщить("Не удалось прочитать файл");	
	КонецПопытки;
	
	ВосстановитьНастройкиИзСостоянияВыполнения(СостояниеВыполнения);
	
КонецПроцедуры

&НаСервере
// Процедура восстанавливает настройки из структуры
//
// Параметры:
// 	СостояниеВыполнения - Структура из которой требуется восстановить настройки
//
Процедура ВосстановитьНастройкиИзСостоянияВыполнения(СостояниеВыполнения)
	
	ВосстановленнаяТекущаяВерсия = Неопределено;
	СостояниеВыполнения.Свойство("ТекущаяВерсия", ВосстановленнаяТекущаяВерсия);
	
	ВостановитьТаблицуИзСоответствия("ЗамещатьСуществующиеЗаписи", СостояниеВыполнения);	
	ВостановитьТаблицуИзСоответствия("НеСоздаватьНовыхЭлементов", СостояниеВыполнения);
	ВостановитьТаблицуИзСоответствия("РучнаяНумерацияКолонокТабличногоДокумента", СостояниеВыполнения);
	ВостановитьТаблицуИзСоответствия("ПерваяСтрокаДанныхТабличногоДокумента", СостояниеВыполнения);
	ВостановитьТаблицуИзСоответствия("ПередЗаписьюОбъекта", СостояниеВыполнения);
	ВостановитьТаблицуИзСоответствия("ПослеДобавленияСтроки", СостояниеВыполнения);
	ВостановитьТаблицуИзСоответствия("ПриЗаписиОбъекта", СостояниеВыполнения);	
	ВостановитьТаблицуИзСоответствия("ПослеЗаписиОбъекта", СостояниеВыполнения);
	
	Если НЕ ВыполняетсяЗаполнениеТЧОбъекта Тогда
		ТипОбъектаСправочника	= Неопределено;
		СсылкаИсточника			= Неопределено;
		ИмяВидаРегистра			= Неопределено;
		ТабличнаяЧастьИсточника	= Неопределено;
		СсылкаДокумента 		= Неопределено;
		РегистрДокумента		= Неопределено;
		
		ВостановитьТаблицуИзСоответствия("РежимЗагрузки", СостояниеВыполнения);	
		УстановитьИсточник();	
		ВостановитьТаблицуИзСоответствия("СсылкаДокумента", СостояниеВыполнения);
		ВостановитьТаблицуИзСоответствия("СсылкаИсточника", СостояниеВыполнения);
		ВостановитьТаблицуИзСоответствия("ИмяВидаРегистра", СостояниеВыполнения);
		ВостановитьТаблицуИзСоответствия("РегистрДокумента", СостояниеВыполнения);
		ВостановитьТаблицуИзСоответствия("ТипОбъектаСправочника", СостояниеВыполнения);
	КонецЕсли;
				
	УстановитьСписокТабличныхЧастей();
	УстановитьСписокРегистров();
	Если РежимЗагрузки = 3 Тогда
		ЗаполнитьВТаблицуЗначенийДвиженияРегистраДокумента();
	КонецЕсли;
	
	ВостановитьТаблицуИзСоответствия("ТабличнаяЧастьИсточника", СостояниеВыполнения);
	
	ОчиститьСозданныеСтраницы(Истина);		
	
	ТаблицыНастроек.Очистить();
	КоличествоСозданныхПодчиненныхНастроек = 0;
	
	ВосстановленнаяТаблицаНастроек = Новый ТаблицаЗначений;
	СостояниеВыполнения.Свойство("ТаблицыНастроек", ВосстановленнаяТаблицаНастроек);
	
	Для каждого КлючИЗначение Из ВосстановленнаяТаблицаНастроек Цикл
		Если ВыполнитьСравнениеВерсий(ВосстановленнаяТекущаяВерсия, "2.5") Тогда
			ДобавитьСтраницуНастроек(КлючИЗначение.Справочник, КлючИЗначение.Представление, КлючИЗначение.ДопНастройки, КлючИЗначение.ЭтоРегистр, КлючИЗначение.ЗагружаетсяДоОбъекта);
			Если КлючИЗначение.ДопНастройки ИЛИ КлючИЗначение.ЗагружаетсяДоОбъекта Тогда
				ЗаполнитьНастройкамиСозданнуюСтраницу(КлючИЗначение.Значение, КлючИЗначение.Справочник, КлючИЗначение.ЭтоРегистр, КлючИЗначение.ЗагружаетсяДоОбъекта);
			КонецЕсли;	
		ИначеЕсли ВыполнитьСравнениеВерсий(ВосстановленнаяТекущаяВерсия, "2.4") Тогда
			ДобавитьСтраницуНастроек(КлючИЗначение.Справочник, КлючИЗначение.Представление, КлючИЗначение.ДопНастройки, КлючИЗначение.ЭтоРегистр);
			Если КлючИЗначение.ДопНастройки Тогда
				ЗаполнитьНастройкамиСозданнуюСтраницу(КлючИЗначение.Значение, КлючИЗначение.Справочник, КлючИЗначение.ЭтоРегистр);
			КонецЕсли;
		Иначе	
			ДобавитьСтраницуНастроек(КлючИЗначение.Справочник, КлючИЗначение.Представление, КлючИЗначение.ДопНастройки);
			Если КлючИЗначение.ДопНастройки Тогда
				ЗаполнитьНастройкамиСозданнуюСтраницу(КлючИЗначение.Значение, КлючИЗначение.Справочник);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РежимЗагрузки = 5 Тогда
		НовыйЭлемент = Элементы.Добавить("Колонка_ПриИзмененииСоздатьДокумент", Тип("ПолеФормы"), Элементы["СтраницаТаблицаЗагружаемыхРеквизитов"]);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "Колонка_ПриИзмененииСоздатьДокумент";
		НовыйЭлемент.РежимВыбораИзСписка = Истина;
		Элементы.Переместить(Элементы["Колонка_ПриИзмененииСоздатьДокумент"], Элементы["СтраницаТаблицаЗагружаемыхРеквизитов"], Элементы["ТаблицаЗагружаемыхРеквизитовКоманднаяПанель"]);
	КонецЕсли;
	
	ЗаполнитьНастройкиКолонок();
	
	Если РежимЗагрузки = 5 Тогда
		ВостановитьТаблицуИзСоответствия("Колонка_ПриИзмененииСоздатьДокумент", СостояниеВыполнения);
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ВосстановленнаяТаблицаНастроек Цикл
		ВосстановленнаяТаблицаЗагружаемыхРеквизитов = Новый ТаблицаЗначений;
		СостояниеВыполнения.Свойство(КлючИЗначение.Значение, ВосстановленнаяТаблицаЗагружаемыхРеквизитов);		
		ТЗ = РеквизитФормыВЗначение(КлючИЗначение.Значение);
		ВосстановитьЗначенияНастроекИзТаблицыРеквизитов(ТЗ, ВосстановленнаяТаблицаЗагружаемыхРеквизитов);
		ЗначениеВРеквизитФормы(ТЗ, КлючИЗначение.Значение);
	КонецЦикла;
	
	СостояниеВыполнения.Очистить();	
	
КонецПроцедуры

&НаСервере
// Процедура восстанавливает реквизит, таблицу значений или дерево значений из структуры
//
// Параметры:
//	Таблица - Наименование восстанавливаемого реквизита, таблицы значений или дерева значений (Строка)
//	СостояниеВыполнения - Структура, из которого требуется восстановить значение
//
Процедура ВостановитьТаблицуИзСоответствия(Таблица, СостояниеВыполнения)
	
	Если ТипЗнч(ЭтаФорма[Таблица]) = Тип("ДанныеФормыКоллекция") Тогда
		ТаблицаОб = Новый ТаблицаЗначений;
		Если НЕ СостояниеВыполнения.Свойство(Таблица, ТаблицаОб) Тогда
			Возврат;
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ТаблицаОб, Таблица);
	ИначеЕсли ТипЗнч(ЭтаФорма[Таблица]) = Тип("ДанныеФормыДерево") Тогда
		ДеревоОб = Новый ДеревоЗначений;
		Если НЕ СостояниеВыполнения.Свойство(Таблица, ДеревоОб) Тогда
			Возврат;
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ДеревоОб, Таблица);	
	Иначе
		Если НЕ СостояниеВыполнения.Свойство(Таблица, ЭтаФорма[Таблица]) Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаСервере
// Процедура сохраняет настройки в базе данных
//
// Параметры:
//	Пометка - Определяет, что данная настройка должна восстанавливаться при открытии (Булево)
//	Представление - Наименование выбранной настройки под которым она будет сохранена в Хранилище настроек данных формы
//
Процедура СохранитьНастройкуВбазе(Пометка, Представление)
	
	Если Пометка Тогда
		Строка = СписокСохраненныхНастроек.НайтиСтроки(Новый Структура("Пометка", Истина));	
	КонецЕсли;
	Если ЗначениеЗаполнено(Строка) Тогда
		Строка[0].Пометка = Ложь;	
	КонецЕсли;
	
	Строка = СписокСохраненныхНастроек.НайтиСтроки(Новый Структура("Представление", Представление));
		
	Если НЕ ЗначениеЗаполнено(Строка) Тогда
		нСтрока = СписокСохраненныхНастроек.Добавить();
		нСтрока.Представление = Представление;
		нСтрока.Пометка = Пометка;
	Иначе
		Строка[0].Пометка = Пометка;
	КонецЕсли;
	
	Таблицы = Новый СписокЗначений;
	
	Таблицы.Добавить("ТекущаяВерсия");
	Таблицы.Добавить("ЗамещатьСуществующиеЗаписи");
	Таблицы.Добавить("ИмяВидаРегистра");
	Таблицы.Добавить("Колонка_ПриИзмененииСоздатьДокумент");
	Таблицы.Добавить("НеСоздаватьНовыхЭлементов");
	Таблицы.Добавить("ПерваяСтрокаДанныхТабличногоДокумента");
	Таблицы.Добавить("ПередЗаписьюОбъекта");
	Таблицы.Добавить("ПослеДобавленияСтроки");
	Таблицы.Добавить("ПриЗаписиОбъекта");
	Таблицы.Добавить("ПослеЗаписиОбъекта");
	Таблицы.Добавить("РежимЗагрузки");
	Таблицы.Добавить("РучнаяНумерацияКолонокТабличногоДокумента");
	Таблицы.Добавить("СсылкаДокумента");
	Таблицы.Добавить("СсылкаИсточника");
	Таблицы.Добавить("ТабличнаяЧастьИсточника");
	Таблицы.Добавить("ТипОбъектаСправочника");
	Таблицы.Добавить("РегистрДокумента");
	Таблицы.Добавить("ТаблицыНастроек");
	
	Для каждого КлючИЗначение Из ТаблицыНастроек Цикл
		Таблицы.Добавить(КлючИЗначение.Значение);	
	КонецЦикла;
	
	СостояниеВыполнения = Новый Структура;	
	
	Для каждого Стр Из Таблицы Цикл
		СостояниеВыполнения = ВыгрузитьТаблицыВСтруктуру(Стр.Значение, СостояниеВыполнения);	
	КонецЦикла;	
	
	мСохранитьЗначение("Настройки:"+ Представление, СостояниеВыполнения, ИдентификаторОбработки);
	
КонецПроцедуры

&НаСервере
// Процедура восстанавливает настройки в базе данных
//
// Параметры:
//	Представление - Наименование выбранной настройки под которым она сохранена в Хранилище настроек данных формы
//
Процедура ВосстановитьНастройкиВБазе(Представление)
	
	СостояниеВыполнения = мВосстановитьЗначение("Настройки:"+ Представление, ИдентификаторОбработки);
	ВосстановитьНастройкиИзСостоянияВыполнения(СостояниеВыполнения);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура восстанавливает значение из Хранилища настроек данных формы
//
// Параметы:
//	Имя - Наименование под которым объект был сохранен в хранилище настроек дынных формы
//
Функция мВосстановитьЗначение(Имя, ИдентификаторОбработки)
	Возврат ХранилищеНастроекДанныхФорм.Загрузить(ИдентификаторОбработки, Имя);
КонецФункции

&НаСервереБезКонтекста
// Процедура сохраняет значение в Хранилище настроек данных формы
//
// Параметры:
//	Имя - Наименование под которым будет сохранено значение
//	Значение - Объект который требуется сохранить
//
Процедура мСохранитьЗначение(Имя, Знач Значение, ИдентификаторОбработки)
	
	Если ТипЗнч(Значение) = Тип("ДанныеФормыКоллекция") Тогда
	
		Значение = ДанныеФормыВЗначение(Значение, Тип("ТаблицаЗначений"));
	
	КонецЕсли; 

	ХранилищеНастроекДанныхФорм.Сохранить(ИдентификаторОбработки, Имя, Значение);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СВЯЗАННЫЕ С ПОДГОТОВКОЙ ДАННЫХ ПРИ НАСТРОЙКЕ ЗАГРУЗКИ

&НаСервере
// Процедура заполняет список выбора элемента управления "ТабличнаяЧастьИсточника"
//
Процедура УстановитьСписокТабличныхЧастей()
	
	СписокВыбора = Элементы.ТабличнаяЧастьИсточника.СписокВыбора;	
	
	СписокВыбора.Очистить();
	Если СсылкаИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокДобавляемыхСтраниц.Очистить();
	Для каждого ТабличнаяЧасть Из СсылкаИсточника.Метаданные().ТабличныеЧасти Цикл
		СписокВыбора.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Представление());
		СписокДобавляемыхСтраниц.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Представление());
	КонецЦикла;
	Если НЕ ПустаяСтрока(ТабличнаяЧастьИсточника) И СписокВыбора.НайтиПоЗначению(ТабличнаяЧастьИсточника) = Неопределено Тогда
		ТабличнаяЧастьИсточника = "";
	КонецЕсли;
	
КонецПроцедуры // ()

&НаСервере
// Процедура заполняет список выбора элемента управления "РегистрДокумента"
//
Процедура УстановитьСписокРегистров()
	
	Если РежимЗагрузки = 3 Тогда
		ИмяОбъекта = "СсылкаДокумента";
	ИначеЕсли РежимЗагрузки = 5 Тогда
		ИмяОбъекта = "СсылкаИсточника";
	Иначе
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Элементы.РегистрДокумента.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если РежимЗагрузки = 3 и СсылкаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокДобавляемыхСтраницРегистры.Очистить();
	Если мЭтоДокумент(ЭтаФорма[ИмяОбъекта]) Тогда
		Для каждого Движение Из ЭтаФорма[ИмяОбъекта].Метаданные().Движения Цикл
			СписокВыбора.Добавить(Движение.Имя, Движение.Представление());
			СписокДобавляемыхСтраницРегистры.Добавить(Движение.Имя, Движение.Представление());
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ()

&НаСервере
// Процедура формирует структуру колонок загружаемых реквизитов из табличной части "ТаблицаЗагружаемыхРеквизитов"
//
// Параметры:
//  нет
//
Процедура СформироватьСтруктуруКолонок(ПолучаемаяТаблица = Неопределено)
	
	НомерКолонки = 1;
	Колонки = Новый Структура;
	
	Если ЗначениеЗаполнено(ПолучаемаяТаблица) Тогда
		СформироватьСтруктуруКолонокТаблицы(Колонки, ПолучаемаяТаблица, НомерКолонки);
	Иначе
		Для каждого Таблица Из ТаблицыНастроек Цикл
			СформироватьСтруктуруКолонокТаблицы(Колонки, Таблица.Значение, НомерКолонки);	
		КонецЦикла;
	КонецЕсли;

	ДополнительныеСвойства.Вставить("Колонки", Колонки);
	
КонецПроцедуры // ()

&НаСервере
Процедура СформироватьСтруктуруКолонокТаблицы(Колонки, ПолучаемаяТаблица, НомерКолонки)
	
	ТЗ = РеквизитФормыВЗначение(ПолучаемаяТаблица);
	ВремКолонки = ТЗ.СкопироватьКолонки();
	Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
		Колонка = Новый Структура;
		Для каждого КолонкаЗагружаемыхРеквизитов Из ВремКолонки.Колонки Цикл
			Если Не РучнаяНумерацияКолонокТабличногоДокумента И КолонкаЗагружаемыхРеквизитов.Имя = "НомерКолонки" Тогда
				Если ЗагружаемыйРеквизит.Пометка Тогда
					Колонка.Вставить("НомерКолонки",НомерКолонки);
					НомерКолонки = НомерКолонки + 1;
				Иначе
					Колонка.Вставить("НомерКолонки",0);
				КонецЕсли;
			Иначе
				Колонка.Вставить(КолонкаЗагружаемыхРеквизитов.Имя,ЗагружаемыйРеквизит[КолонкаЗагружаемыхРеквизитов.Имя]);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолучаемаяТаблица = "ТаблицаЗагружаемыхРеквизитов" Тогда
			Колонки.Вставить(Колонка.ИмяРеквизита,Колонка);
		Иначе
			Колонки.Вставить(ПолучаемаяТаблица + Колонка.ИмяРеквизита,Колонка);
		КонецЕсли;			
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
// Процедура создает колонки Таблицы подготовленных даннных и добавляет их на форму
//
Процедура СформироватьКолонкиТаблицыПодготовленныхДанных()
	
	ОчиститьТаблицуПодготовленныхДанных();
	
	Для каждого Таблица Из ТаблицыНастроек Цикл
		МассивДобавляемыхРеквизитов = Новый Массив;
		
		ТЗ = РеквизитФормыВЗначение(Таблица.Значение);
		Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
			Если ЗагружаемыйРеквизит.Пометка Тогда
				Если Таблица.Значение = "ТаблицаЗагружаемыхРеквизитов" Тогда
					ИмяРеквизита = ЗагружаемыйРеквизит.ИмяРеквизита;	
				Иначе
					ИмяРеквизита = Таблица.Значение + ЗагружаемыйРеквизит.ИмяРеквизита;
				КонецЕсли;
			
				нРеквизит = Новый РеквизитФормы(ИмяРеквизита, ЗагружаемыйРеквизит.ОписаниеТипов, "ТаблицаПодготовленныхДанных",ЗагружаемыйРеквизит.ПредставлениеРеквизита);
				МассивДобавляемыхРеквизитов.Добавить(нРеквизит);
			КонецЕсли;	
		КонецЦикла;
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		
		Группа = Элементы.Добавить("ПД_Группа" + Таблица.Значение, Тип("ГруппаФормы"), Элементы.ТаблицаПодготовленныхДанных);
		Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
		
		Группа.Заголовок = Таблица.Заголовок;
		Группа.Группировка = ГруппировкаКолонок.Горизонтальная;
		Группа.ОтображатьВШапке = Истина;
		
		Для каждого Реквизит Из МассивДобавляемыхРеквизитов Цикл
			НовыйЭлемент = Элементы.Добавить("ТаблицаПодготовленныхДанных" + Реквизит.Имя, Тип("ПолеФормы"), Группа);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.ПутьКДанным = "ТаблицаПодготовленныхДанных." + Реквизит.Имя;	
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры // ()

&НаСервере
// Процедура очищает таблицу подготовленных данных
//
Процедура ОчиститьТаблицуПодготовленныхДанных()
	
	МассивРеквизитовУдалить = Новый Массив;
	
	Реквизиты = ПолучитьРеквизиты("ТаблицаПодготовленныхДанных");
		
	Если Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Для каждого Реквизит Из Реквизиты  Цикл
		МассивРеквизитовУдалить.Добавить("ТаблицаПодготовленныхДанных." + Реквизит.Имя);
		Элементы.Удалить(Элементы["ТаблицаПодготовленныхДанных" + Реквизит.Имя]);
	КонецЦикла;
	
	Для каждого КлючИЗначение Из ТаблицыНастроек Цикл
		Элементы.Удалить(Элементы["ПД_Группа" + КлючИЗначение.Значение]);
	КонецЦикла;
	
	ИзменитьРеквизиты(, МассивРеквизитовУдалить);
	
	Элементы.Загрузить.Видимость = Ложь;
	Элементы.КонтрольЗаполнения.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаСервере
// Процедура формирует шапку табличного документа, в соответствии с таблицей загружаемых реквизитов
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент, у которого необходимо сформировать шапку
//
Процедура СформироватьШапкуТабличногоДокумента(ТабличныйДокумент)
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	
	ТЗ = РеквизитФормыВЗначение("ТаблицаЗагружаемыхРеквизитов");
	
	Таблица = ТЗ.Скопировать();
	Таблица.Сортировать("НомерКолонки");
	
	Колонки = ДополнительныеСвойства.Колонки;
	
	Для каждого КлючИЗначение Из Колонки Цикл
		ЗагружаемыйРеквизит = КлючИЗначение.Значение;
		НомерКолонки = ЗагружаемыйРеквизит.НомерКолонки;
		Если Не ЗагружаемыйРеквизит.Пометка Или НомерКолонки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗагружаемыйРеквизит.ШиринаКолонки = 0 Тогда
			
			ШиринаКолонки = 40;
			Если ЗагружаемыйРеквизит.ОписаниеТипов.Типы().Количество() = 1 Тогда
				ПервыйТип = ЗагружаемыйРеквизит.ОписаниеТипов.Типы()[0];
				Если ПервыйТип = Тип("Строка") Тогда
					Если ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина = 0 Тогда
						ШиринаКолонки = 80;
					Иначе
						ШиринаКолонки = Мин(Макс(ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыСтроки.Длина,10),80);
					КонецЕсли;
				ИначеЕсли ПервыйТип = Тип("Число") Тогда
					ШиринаКолонки = Макс(ЗагружаемыйРеквизит.ОписаниеТипов.КвалификаторыЧисла.Разрядность,10);
				ИначеЕсли ПервыйТип = Тип("Булево") Тогда
					ШиринаКолонки = 10;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ШиринаКолонки = ЗагружаемыйРеквизит.ШиринаКолонки;
		КонецЕсли;
		
		
		Область = ТабличныйДокумент.Область("R1C"+НомерКолонки);
		БылТекст = Не ПустаяСтрока(Область.Текст);
		Область.Текст       = ?(БылТекст,Область.Текст + Символы.ПС,"") + ЗагружаемыйРеквизит.ПредставлениеРеквизита;
		Область.Расшифровка = ЗагружаемыйРеквизит.ИмяРеквизита;
		Область.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		Область.Обвести(Линия, Линия, Линия, Линия);
		
		ОбластьКолонки = ТабличныйДокумент.Область("C"+НомерКолонки);
		ОбластьКолонки.ШиринаКолонки = ?(БылТекст,Макс(ОбластьКолонки.ШиринаКолонки,ШиринаКолонки),ШиринаКолонки);
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьШапкуТабличногоДокумента()

&НаСервере
// Функция возвращает метаданные источника данных
//
// Параметры:
//  ТребуютсяМетаданныеШапки - если требуется получить метаданные не табличной части, а шапки документа
//  Справочник - Справочник, метаданные которого нужно получить, при загрузки подчиненных справочников
//
// Возвращаемое значение:
//  Объект метаданных
//
Функция ПолучитьМетаданныеИсточника(ОбъектЗагрузки = Неопределено, ЭтоРегистр = Ложь, ТекРежимЗагрузки = Неопределено)
	
	Если ТекРежимЗагрузки = Неопределено Тогда
		ТекРежимЗагрузки = РежимЗагрузки;	
	КонецЕсли;
	
	Если ТекРежимЗагрузки = 0 Тогда
		Если ЗначениеЗаполнено(ОбъектЗагрузки) Тогда
			Возврат Метаданные.Справочники[ОбъектЗагрузки];
		ИначеЕсли НЕ ПустаяСтрока(ТипОбъектаСправочника) Тогда
			Возврат Метаданные.Справочники[ТипОбъектаСправочника];
		КонецЕсли; 
	ИначеЕсли ТекРежимЗагрузки = 1 Тогда
		Если ЗначениеЗаполнено(СсылкаИсточника) Тогда
			Если ЗначениеЗаполнено(ОбъектЗагрузки) Тогда 
				Возврат СсылкаИсточника.Метаданные().ТабличныеЧасти.Найти(ОбъектЗагрузки);	
			ИначеЕсли ЗначениеЗаполнено(ТабличнаяЧастьИсточника) Тогда
				Возврат СсылкаИсточника.Метаданные().ТабличныеЧасти.Найти(ТабличнаяЧастьИсточника);
			КонецЕсли;
		КонецЕсли; 
	ИначеЕсли ТекРежимЗагрузки = 2 Тогда
		Если Не ПустаяСтрока(ИмяВидаРегистра) Тогда
			Возврат Метаданные.РегистрыСведений[ИмяВидаРегистра];
		КонецЕсли; 
	ИначеЕсли ТекРежимЗагрузки = 3 ИЛИ ТекРежимЗагрузки = 4 Тогда
		
		Если ЗначениеЗаполнено(СсылкаДокумента) Тогда
			Если ЗначениеЗаполнено(ОбъектЗагрузки) Тогда
				ИмяВозвращаемогоРегистра = ОбъектЗагрузки;	
			Иначе
				ИмяВозвращаемогоРегистра = РегистрДокумента;	
			КонецЕсли;		
			Для каждого Движение Из СсылкаДокумента.Метаданные().Движения Цикл
				Если Движение.Имя = ИмяВозвращаемогоРегистра Тогда
					Возврат Движение;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТекРежимЗагрузки = 5 Тогда
		
		Если СсылкаИсточника <> Неопределено Тогда
			Если ЗначениеЗаполнено(ОбъектЗагрузки) И ЭтоРегистр Тогда
				Для каждого Движение Из СсылкаИсточника.Метаданные().Движения Цикл
				Если Движение.Имя = ОбъектЗагрузки Тогда
					Возврат Движение;
				КонецЕсли; 
			КонецЦикла;	
			ИначеЕсли ЗначениеЗаполнено(ОбъектЗагрузки) Тогда 
				Возврат СсылкаИсточника.Метаданные().ТабличныеЧасти.Найти(ОбъектЗагрузки);
			Иначе
				Возврат СсылкаИсточника.Метаданные();
			КонецЕсли;		
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции // ()

&НаСервере
// Проверяет наличие выбранных метаданных
//
Функция ЕстьВыбранныеМетаданные()

	Возврат Не ПолучитьМетаданныеИсточника() = Неопределено;

КонецФункции // ЕстьВыбранныеМетаданные()

&НаСервере
Функция ПолучитьТекстВопросаИсточника()
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	Ошибка = "";
	ТекстВопросаИсточника = "";
	
	Если РежимЗагрузки = 0 Тогда
		ТекстВопросаИсточника = " элементов в справочник: """ + МетаданныеИсточника.Представление() + """";
		
	ИначеЕсли РежимЗагрузки = 1 Тогда
		
		Если СсылкаИсточника.Пустая() Тогда
			Ошибка = "Не выбрана ссылка";
		Иначе
			ОбъектИсточника = СсылкаИсточника.ПолучитьОбъект();
			ТекстВопросаИсточника = " строк в табличную часть: """ + МетаданныеИсточника.Представление() + """";
		КонецЕсли;
		
	ИначеЕсли РежимЗагрузки = 2 Тогда
		
		ТекстВопросаИсточника = " записей в регистр сведений: """ + МетаданныеИсточника.Представление() + """";
		
	КонецЕсли;
	
	Возврат Новый Структура("Ошибка, ТекстВопроса", Ошибка, ТекстВопросаИсточника);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ ДАННЫХ

&НаСервере
// Основная функция загрузки данных
//
Функция ЗагрузитьДанныеСервер(ИмяОбъекта = Неопределено, ИмяТЗ = Неопределено, ТекРежимЗагрузки = Неопределено)

	Если ТекРежимЗагрузки = Неопределено Тогда
		ТекРежимЗагрузки = РежимЗагрузки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяТЗ) Тогда
		ИмяТЗ = "ТаблицаЗагружаемыхРеквизитов";		
	КонецЕсли;
	
	ТабДанные = РеквизитФормыВЗначение("ТаблицаПодготовленныхДанных");
	ТаблицаРеквизитов = РеквизитФормыВЗначение(ИмяТЗ);

	ЗаписыватьОбъект = истина;
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника(ИмяОбъекта,,ТекРежимЗагрузки);
	
	Если ТекРежимЗагрузки = 0 Тогда
		Источник = Справочники[ТипОбъектаСправочника].ПустаяСсылка();
	ИначеЕсли ТекРежимЗагрузки = 1 Тогда
		ОбъектИсточника = СсылкаИсточника.ПолучитьОбъект();
		Источник = ОбъектИсточника[ТабличнаяЧастьИсточника];
	ИначеЕсли ТекРежимЗагрузки = 3 Тогда		
		Если СсылкаДокумента.Пустая() Тогда
			Сообщить("Не выбран документ");
			Возврат Ложь;
		КонецЕсли; 
		ОбъектИсточника = СсылкаДокумента.ПолучитьОбъект(); 
		Источник = ПолучитьИзВременногоХранилища(АдресХранилищаДвиженияРегистра);
	ИначеЕсли ТекРежимЗагрузки = 5 Тогда
		Если НЕ ЗначениеЗаполнено(Колонка_ПриИзмененииСоздатьДокумент) Тогда
			Сообщить("Не выбрана колонка при изменении которой будут создаваться новые объекты!");
			Возврат Ложь;
		КонецЕсли;
		
		ТабДанные.Сортировать(Колонка_ПриИзмененииСоздатьДокумент);

		ЭтоДокумент = мЭтоДокумент(СсылкаИсточника);
		
		Если ЭтоДокумент Тогда
			ОбъектИсточника = Документы[МетаданныеИсточника.Имя].СоздатьДокумент();
		Иначе
			ОбъектИсточника = Справочники[МетаданныеИсточника.Имя].СоздатьЭлемент();
		КонецЕсли;
		
		ТекстВопросаИсточника = " строк в документы: """ + МетаданныеИсточника.Родитель().Представление() + """";
	КонецЕсли;
	
	ТекстВопросаИсточника = ПолучитьТекстВопросаИсточника().ТекстВопроса;
	
	Запрос = Неопределено;
	Если ТекРежимЗагрузки = 0 Тогда
		
		СтрокиПоиска = ЭтаФорма[ИмяТЗ].НайтиСтроки(Новый Структура("ПолеПоиска,Пометка",Истина,Истина));
		Если Не СтрокиПоиска.Количество() = 0 Тогда
			
			ТекстЗапроса =
			"Выбрать Первые 1
			|Справочник.Ссылка КАК Ссылка
			|Из Справочник."+МетаданныеИсточника.Имя+" КАК Справочник
			|Где";
			
			Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
				ТекстЗапроса = ТекстЗапроса +"
				|Справочник."+СтрокаПоиска.ИмяРеквизита+" = &" + СтрокаПоиска.ИмяРеквизита + "
				|И";
				
			КонецЦикла;
			
			ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса) - 2);
			Запрос = Новый Запрос (ТекстЗапроса);
		КонецЕсли;
	ИначеЕсли ТекРежимЗагрузки = 1 ИЛИ ТекРежимЗагрузки = 3 Тогда
		Источник.Очистить();	
	ИначеЕсли ТекРежимЗагрузки = 2 Тогда		
		
		ИзмеренияРегистра = Новый Структура;
		Для каждого Реквизит Из ТаблицаРеквизитов Цикл
			Если Реквизит.МожетБытьПолемПоиска Тогда
				ИзмеренияРегистра.Вставить(Реквизит.ИмяРеквизита, Реквизит.ОписаниеТипов);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Очищаем источники у дополнительный табличный частей и движений	
	нСтруктура = Новый Структура("ДопНастройки, ЗагружаетсяДоОбъекта", Истина, Ложь);
	ТЗ_ДопНастроек = ТаблицыНастроек.Выгрузить(нСтруктура);
	Для каждого Строка Из ТЗ_ДопНастроек Цикл
		Если ТекРежимЗагрузки = 1 Тогда
			ДопИсточник = ОбъектИсточника[Строка.Справочник];
			ДопИсточник.Очистить();
		ИначеЕсли ТекРежимЗагрузки = 3 Тогда		
			ДопИсточник = ОбъектИсточника.Движения[Строка.Справочник];
			ДопИсточник.Очистить();
			ДопИсточник.Записывать = Истина;
		КонецЕсли;				
	КонецЦикла;	
	
	// Получаем таблицу объектов загружаемых до основного объекта
	нСтруктура = Новый Структура("ЗагружаетсяДоОбъекта", Истина);
	ТЗ_ЗагружаетсяДоОбъекта = ТаблицыНастроек.Выгрузить(нСтруктура);
	
	КоличествоЭлементов = ТабДанные.Количество();
	
	Сообщить("Выполняется загрузка"+ ТекстВопросаИсточника, СтатусСообщения.Информация);
	Сообщить("Всего: " + КоличествоЭлементов, СтатусСообщения.Информация);
	Сообщить("---------------------------------------------", СтатусСообщения.БезСтатуса);
	Загружено = 0;
	ПредыдущееЗначениеПриИзмененииДляНовогоДокумента = "";
	
	НомерТекущейСтроки = 1;
		
	Для каждого ЗагружаемаяСтрока Из ТабДанные Цикл
		ТекстыЯчеек = Неопределено;
		Отказ = Ложь;
		
		Для Каждого сСтрока из ТЗ_ЗагружаетсяДоОбъекта Цикл
			
			сСтрока.ОбъектСсылка = ЗагрузитьВСправочник(ЗагружаемаяСтрока, ТекстыЯчеек, сСтрока.Справочник, , сСтрока.Значение, ТЗ_ЗагружаетсяДоОбъекта);			
			
		КонецЦикла;
		
		ТекущаяСтрока = Новый Структура;
		
		Для Каждого сСтрока из ЭтаФорма[ИмяТЗ] Цикл
			
			Если ЗначениеЗаполнено(сСтрока.НастройкаЗагрузки) Тогда
				
				стр = Новый Структура("Значение", сСтрока.НастройкаЗагрузки);
				СтрокаНастроек = ТЗ_ЗагружаетсяДоОбъекта.НайтиСтроки(стр);
				Если СтрокаНастроек.Количество() <> 0 Тогда
					
					Если ЗначениеЗаполнено(СтрокаНастроек[0].ОбъектСсылка) Тогда
						ТекущаяСтрока.Вставить(сСтрока.ИмяРеквизита, СтрокаНастроек[0].ОбъектСсылка);	
					Иначе
						ТекущаяСтрока.Вставить(сСтрока.ИмяРеквизита, ЗагружаемаяСтрока[сСтрока.ИмяРеквизита]);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли сСтрока.Пометка Тогда
				
				ТекущаяСтрока.Вставить(сСтрока.ИмяРеквизита, ЗагружаемаяСтрока[сСтрока.ИмяРеквизита]);
				
			КонецЕсли;
			
		КонецЦикла;
			
		Если ТекРежимЗагрузки = 5 Тогда
			
			ТекущееЗначениеПриИзмененииДляНовогоДокумента = ЗагружаемаяСтрока[Колонка_ПриИзмененииСоздатьДокумент];
			
			Если ПредыдущееЗначениеПриИзмененииДляНовогоДокумента <> ТекущееЗначениеПриИзмененииДляНовогоДокумента Тогда
				Если НомерТекущейСтроки <> 1 Тогда
					Если ЗаписыватьОбъект и ЗаписатьОбъект(ОбъектИсточника, ТекстыЯчеек, ПередЗаписьюОбъекта, ПриЗаписиОбъекта) Тогда
						Сообщить("Выполнена загрузка " + ТекстВопросаИсточника + " " + ОбъектИсточника, СтатусСообщения.Информация);
						Сообщить("" +Загружено +" из "+ КоличествоЭлементов + " элементов.", СтатусСообщения.Информация);
					Иначе
						Сообщить("Объект не записан: " + Объект + ".", СтатусСообщения.Важное);
						ЗаписыватьОбъект = Истина;
					КонецЕсли;
				КонецЕсли;
				
				ПредыдущееЗначениеПриИзмененииДляНовогоДокумента = ЗагружаемаяСтрока[Колонка_ПриИзмененииСоздатьДокумент];
			
				ОбъектИсточника = НайтиСоздатьДокументПриПоточнойЗагрузке(МетаданныеИсточника, ТекущаяСтрока, ЭтоДокумент, ИмяТЗ);
				
				Для каждого Строка Из ТЗ_ДопНастроек Цикл
					Если Строка.ЭтоРегистр Тогда
						ДопИсточник = ОбъектИсточника.Движения[Строка.Справочник];
						ДопИсточник.Записывать = Истина;
					Иначе
						ДопИсточник = ОбъектИсточника[Строка.Справочник];		
					КонецЕсли;
					ДопИсточник.Очистить();
				КонецЦикла;
				
				Если Не Отказ Тогда
					Сообщить("Создан новый документ ");
				Иначе
					Сообщить("При создании нового документа возникли ошибки. ");
					ЗаписыватьОбъект = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекРежимЗагрузки = 0 Тогда
			
			ЗагружаемыйОбъект = Неопределено;
			Если Не Запрос = Неопределено Тогда
				СтрокаОшибок = "";
				Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
					
					ЗначениеРеквизита = Неопределено;
					
					ТекущаяСтрока.Свойство(СтрокаПоиска.ИмяРеквизита,ЗначениеРеквизита);
					Если ПустаяСтрока(ЗначениеРеквизита) Тогда
						СтрокаОшибок = ?(ПустаяСтрока(СтрокаОшибок),"",СтрокаОшибок + ", ") + СтрокаПоиска.ПредставлениеРеквизита;
					Иначе
						Запрос.УстановитьПараметр(СтрокаПоиска.ИмяРеквизита,ТекущаяСтрока[СтрокаПоиска.ИмяРеквизита]);
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не ПустаяСтрока(СтрокаОшибок) Тогда
					Сообщить("Строка " + НомерТекущейСтроки + " не может быть записана.Не указано значение ключевых реквизитов: " + СтрокаОшибок,СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ЗагружаемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
				КонецЕсли;
				
			КонецЕсли;
			
			ОбъектНайден = Не ЗагружаемыйОбъект = Неопределено;
			Если Не ОбъектНайден Тогда
				Если НеСоздаватьНовыхЭлементов Тогда
					Продолжить;
				Иначе
					ЗагружаемыйОбъект = Справочники[МетаданныеИсточника.Имя].СоздатьЭлемент();
				КонецЕсли;		
			КонецЕсли;
			Если ОбъектНайден и ЗамещатьСуществующиеЗаписи Тогда     
                ОбъектНайден = Ложь;
            КонецЕсли;
		ИначеЕсли ТекРежимЗагрузки = 1 Тогда
			ЗагружаемыйОбъект = Источник.Добавить();
			ОбъектНайден = Ложь;
		ИначеЕсли ТекРежимЗагрузки = 2 Тогда
			ЗагружаемыйОбъект = РегистрыСведений[МетаданныеИсточника.Имя].СоздатьМенеджерЗаписи();
			Для каждого КлючИЗначение Из ТекущаяСтрока Цикл
				
				Если ИзмеренияРегистра.Свойство(КлючИЗначение.Ключ) Тогда
					ЗагружаемыйОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ЗамещатьСуществующиеЗаписи Тогда
				ЗагружаемыйОбъект.Прочитать();
				ОбъектНайден = ЗагружаемыйОбъект.Выбран();
			Иначе
				ОбъектНайден = Ложь;
			КонецЕсли;
			
		ИначеЕсли ТекРежимЗагрузки = 3 ИЛИ ТекРежимЗагрузки = 4 Тогда
			
			ЗагружаемыйОбъект = Источник.Добавить();
			ОбъектНайден = Ложь;
			
		ИначеЕсли ТекРежимЗагрузки = 5 Тогда
			Если ЗначениеЗаполнено(ТабличнаяЧастьИсточника) Тогда
				ЗагружаемыйОбъект = ОбъектИсточника[ТабличнаяЧастьИсточника].Добавить(); 	
			Иначе
				ЗагружаемыйОбъект = ОбъектИсточника;
			КонецЕсли;
			ОбъектНайден = Ложь;
			
		КонецЕсли;
		
		// Заполняем данными объект из строки загрузки
		Если Не ОбъектНайден  Тогда
			
			Попытка
				ЗаполнитьЗначенияСвойств(ЗагружаемыйОбъект, ТекущаяСтрока);
			Исключение
				мСообщитьОбОшибке("Ошибка при установки значений реквизитов " + ОписаниеОшибки());
			    Отказ = Истина;
			КонецПопытки;
			
		КонецЕсли;
		
		// Загружаем данные по дополнительным таблицам настроек
		СписокПодчиненныхСправочников = Новый СписокЗначений;		
		Для каждого Строка Из ТЗ_ДопНастроек Цикл
			
			Если ТекРежимЗагрузки = 0 Тогда
				
				РезультатЗагрузкиСправочника = ЗагрузитьВСправочник(ЗагружаемаяСтрока, ТекстыЯчеек, Строка.Справочник, ЗагружаемыйОбъект.Ссылка, Строка.Значение, ТЗ_ЗагружаетсяДоОбъекта);	
				СписокПодчиненныхСправочников.Добавить(РезультатЗагрузкиСправочника);
			
			ИначеЕсли (ТекРежимЗагрузки = 1 ИЛИ ТекРежимЗагрузки = 3 ИЛИ ТекРежимЗагрузки = 5) И НЕ Строка.ЗагружаетсяДоОбъекта Тогда
				
				ЗагрузитьДанныеВДполнительнуюТЧИлиРегистр(ОбъектИсточника, ЗагружаемаяСтрока, ТекстыЯчеек, Строка.Справочник, Строка.Значение, Строка.ЭтоРегистр, ТЗ_ЗагружаетсяДоОбъекта);					
				
			КонецЕсли;
			
		КонецЦикла;

		
		Если ТекРежимЗагрузки = 0 Тогда
			Если Не Отказ и ЗаписатьОбъект(ЗагружаемыйОбъект, ТекстыЯчеек, ПередЗаписьюОбъекта, ПриЗаписиОбъекта) Тогда
				Сообщить(?(ОбъектНайден,"Изменен","Загружен") + " элемент справочника: " + ЗагружаемыйОбъект.Ссылка, СтатусСообщения.Информация);
				Загружено = Загружено + 1;
			Иначе
				Сообщить("Объект не " + ?(ОбъектНайден,"изменен","загружен") + ". Элемент справочника: " + ЗагружаемыйОбъект + ".", СтатусСообщения.Важное);
			КонецЕсли;
			
			ОбработатьСобытиеПослеЗаписиОбъекта(ЗагружаемыйОбъект, СписокПодчиненныхСправочников, ПослеЗаписиОбъекта);
		ИначеЕсли ТекРежимЗагрузки = 1 Тогда
			
			Если Не ОбработатьСобытиеПослеДобавленияСтроки(ОбъектИсточника, ЗагружаемыйОбъект, ТекстыЯчеек, ПослеДобавленияСтроки) Тогда
				Отказ = Истина;
			КонецЕсли;
			
			Если Не Отказ Тогда
				Сообщить("Добавлена строка: " + (Загружено + 1));
			Иначе
				Сообщить("При добавлении строки " + (Загружено + 1) + " возникли ошибки. ");
				ЗаписыватьОбъект = Ложь;
			КонецЕсли;
			
			Загружено = Загружено + 1;
			
		ИначеЕсли ТекРежимЗагрузки = 2 Тогда
			Если Не Отказ и ЗаписатьОбъект(ЗагружаемыйОбъект, ТекстыЯчеек, ПередЗаписьюОбъекта, ПриЗаписиОбъекта) Тогда
				Сообщить(?(ОбъектНайден,"Изменена","Добавлена") + " запись № " + НомерТекущейСтроки + ".");
				Загружено = Загружено + 1;
			Иначе
				Сообщить("Запись не " + ?(ОбъектНайден,"изменена","загружена") + ". № записи: " + НомерТекущейСтроки + ".", СтатусСообщения.Важное);
			КонецЕсли;
		ИначеЕсли ТекРежимЗагрузки = 3 Тогда
			
			Если Не ОбработатьСобытиеПослеДобавленияСтроки(ОбъектИсточника, ЗагружаемыйОбъект, ТекстыЯчеек, ПослеДобавленияСтроки) Тогда
				Отказ = Истина;
			КонецЕсли;
			
			Если Не Отказ Тогда
				Сообщить("Добавлена проводка: " + (Загружено + 1));
				
				ЗагружаемыйОбъект.Активность  = Истина;
				ЗагружаемыйОбъект.Регистратор = ОбъектИсточника;
				ЗагружаемыйОбъект.Период 	   = ОбъектИсточника.Дата;
				ЗагружаемыйОбъект.НомерСтроки = Загружено+1;
				ЗагружаемыйОбъект.МоментВремени = ОбъектИсточника.МоментВремени();
			Иначе
				Сообщить("При добавлении проводки " + (Загружено + 1) + " возникли ошибки. ");
				ЗаписыватьОбъект = Ложь;
			КонецЕсли;
			
			Загружено = Загружено + 1;
			
		ИначеЕсли ТекРежимЗагрузки = 5 Тогда
			
			Если Не ОбработатьСобытиеПослеДобавленияСтроки(ОбъектИсточника, ЗагружаемыйОбъект, ТекстыЯчеек, ПослеДобавленияСтроки) Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЦикла;
	Сообщить("---------------------------------------------", СтатусСообщения.БезСтатуса);
	
	Если ТекРежимЗагрузки = 1  Тогда
		Если ЗаписыватьОбъект и ЗаписатьОбъект(ОбъектИсточника, "", ПередЗаписьюОбъекта, ПриЗаписиОбъекта) Тогда
			
			Сообщить("Выполнена загрузка"+ 	ТекстВопросаИсточника, СтатусСообщения.Информация);
			Сообщить("" +Загружено +" из "+ КоличествоЭлементов + " элементов.", СтатусСообщения.Информация);
			Возврат Истина;
		Иначе
			Сообщить("Объект не записан: " + ЗагружаемыйОбъект + ".", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТекРежимЗагрузки = 0 Тогда
		Сообщить("Выполнена загрузка"+ 	ТекстВопросаИсточника, СтатусСообщения.Информация);
		Сообщить("" +Загружено +" из "+ КоличествоЭлементов + " элементов.", СтатусСообщения.Информация);
		Возврат Истина;
	ИначеЕсли ТекРежимЗагрузки = 2 Тогда
		Сообщить("Выполнена загрузка"+ 	ТекстВопросаИсточника, СтатусСообщения.Информация);
		Сообщить("" +Загружено +" из "+ КоличествоЭлементов + " записей.", СтатусСообщения.Информация);
		Возврат Истина;
	ИначеЕсли ТекРежимЗагрузки = 3 Тогда
		
		ОбъектИсточника.Движения[РегистрДокумента].Записывать = Истина;
		ОбъектИсточника.Движения[РегистрДокумента].Загрузить(Источник);
		
		Если ЗаписыватьОбъект и ЗаписатьОбъект(ОбъектИсточника, "", ПередЗаписьюОбъекта, ПриЗаписиОбъекта) Тогда
			
			Сообщить("Выполнена загрузка"+ 	ТекстВопросаИсточника, СтатусСообщения.Информация);
			Сообщить("" +Загружено +" из "+ КоличествоЭлементов + " проводок.", СтатусСообщения.Информация);
			Возврат Истина;
		Иначе
			Сообщить("Объект не записан: " + Объект + ".", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТекРежимЗагрузки = 5 Тогда 
		Если ЗаписыватьОбъект и ЗаписатьОбъект(ОбъектИсточника, ТекстыЯчеек, ПередЗаписьюОбъекта, ПриЗаписиОбъекта) Тогда
			Сообщить("Выполнена загрузка " + ТекстВопросаИсточника + " " + ОбъектИсточника, СтатусСообщения.Информация);
			Сообщить("" +Загружено +" из "+ КоличествоЭлементов + " элементов.", СтатусСообщения.Информация);
		Иначе
			Сообщить("Объект не записан: " + Объект + ".", СтатусСообщения.Важное);
			ЗаписыватьОбъект = Истина;
		КонецЕсли;
	КонецЕсли;
		
КонецФункции

&НаСервере
// Функция загрузки подчиненных справочников
//
// 	ЗагружаемаяСтрока - строка таблицы подготовленных данных
// 	ТекстыЯчеек - Строка табличного документа
//	Справочник - наименование метаданных загружаемого подчиненного справочника
//	Владелец - Владелец загружаемого подчиненного справочника
//	ТаблицаНастроек - Наименование таблицы значений с настройками загрузки
//
Функция ЗагрузитьВСправочник(ЗагружаемаяСтрока, ТекстыЯчеек, Справочник, Владелец = Неопределено, ТаблицаНастроек, ТЗ_ЗагружаетсяДоОбъекта)

	МетаданныеИсточника = ПолучитьМетаданныеИсточника(Справочник, , 0);
	
	Источник = Справочники[Справочник].ПустаяСсылка();
		
	Запрос = Неопределено;
		
	СтрокиПоиска = ЭтаФорма[ТаблицаНастроек].НайтиСтроки(Новый Структура("ПолеПоиска,Пометка",Истина,Истина));
	
	Если Не СтрокиПоиска.Количество() = 0 Тогда
		
		ТекстЗапроса =
		"Выбрать Первые 1           
		|Справочник.Ссылка КАК Ссылка
		|Из Справочник."+МетаданныеИсточника.Имя+" КАК Справочник
		|Где";
		
		Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
			ТекстЗапроса = ТекстЗапроса +"
			|Справочник."+СтрокаПоиска.ИмяРеквизита+" = &" + СтрокаПоиска.ИмяРеквизита + "
			|И";
			
		КонецЦикла;
		
		Если Владелец <> Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса +"
				|Справочник.Владелец = &Владелец
				|И";
		КонецЕсли;
		
		ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса) - 2);
		Запрос = Новый Запрос (ТекстЗапроса);
	КонецЕсли;
	
	ТекущаяСтрока = Новый Структура;
	Для Каждого сСтрока из ЭтаФорма[ТаблицаНастроек] Цикл
		
		Если ЗначениеЗаполнено(сСтрока.НастройкаЗагрузки) Тогда
			
			стр = Новый Структура("Значение", сСтрока.НастройкаЗагрузки);
			СтрокаНастроек = ТЗ_ЗагружаетсяДоОбъекта.НайтиСтроки(стр);
			Если СтрокаНастроек.Количество() <> 0 Тогда
				
				Если ЗначениеЗаполнено(СтрокаНастроек[0].ОбъектСсылка) Тогда
					ТекущаяСтрока.Вставить(сСтрока.ИмяРеквизита, СтрокаНастроек[0].ОбъектСсылка);	
				Иначе
					ТекущаяСтрока.Вставить(сСтрока.ИмяРеквизита, ЗагружаемаяСтрока[ТаблицаНастроек + сСтрока.ИмяРеквизита]);	
				КонецЕсли;
			КонецЕсли;
		
		ИначеЕсли сСтрока.Пометка Тогда
			
			ТекущаяСтрока.Вставить(сСтрока.ИмяРеквизита, ЗагружаемаяСтрока[ТаблицаНастроек + сСтрока.ИмяРеквизита]);	
			
		КонецЕсли;
		
	КонецЦикла;
			
	ЗагружаемыйОбъект = Неопределено;
	Если Не Запрос = Неопределено Тогда
		СтрокаОшибок = "";
		Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
			
			ЗначениеРеквизита = Неопределено;
			
			ТекущаяСтрока.Свойство(СтрокаПоиска.ИмяРеквизита,ЗначениеРеквизита);
			Если ПустаяСтрока(ЗначениеРеквизита) Тогда
				СтрокаОшибок = ?(ПустаяСтрока(СтрокаОшибок),"",СтрокаОшибок + ", ") + СтрокаПоиска.ПредставлениеРеквизита;
			Иначе
				Запрос.УстановитьПараметр(СтрокаПоиска.ИмяРеквизита,ТекущаяСтрока[СтрокаПоиска.ИмяРеквизита]);
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Владелец",Владелец);
		
		Если Не ПустаяСтрока(СтрокаОшибок) Тогда
			Сообщить(СтрокаОшибок);
			Возврат Неопределено;
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗагружаемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектНайден = Не ЗагружаемыйОбъект = Неопределено;
	Если Не ОбъектНайден Тогда
		Если НеСоздаватьНовыхЭлементов Тогда
			Возврат ЗагружаемыйОбъект.Ссылка;
		Иначе
			ЗагружаемыйОбъект = Справочники[МетаданныеИсточника.Имя].СоздатьЭлемент();
		КонецЕсли;	
	КонецЕсли;
	
	Если ОбъектНайден и ЗамещатьСуществующиеЗаписи Тогда     
		ОбъектНайден = Ложь;
	КонецЕсли;
	
	Если Не ОбъектНайден  Тогда
		Попытка
			ЗаполнитьЗначенияСвойств(ЗагружаемыйОбъект, ТекущаяСтрока);
		Исключение
			мСообщитьОбОшибке("Ошибка при установки значений реквизитов " + ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Если Владелец <> Неопределено Тогда
		ЗагружаемыйОбъект.Владелец = Владелец;
	КонецЕсли;
	
	Попытка
		ЗагружаемыйОбъект.Записать();
		Возврат ЗагружаемыйОбъект.Ссылка;
	Исключение
	    Сообщить("Не удалось записать: " + ЗагружаемыйОбъект + ", " + ОписаниеОшибки());
	КонецПопытки;	
	
КонецФункции

&НаСервере
// Функция загрузки в дополнительные табличные части и движения документа
// 	ОбъектИсточника - Основной объект загрузки (Объект) 
//	ЗагружаемаяСтрока - Строка загружаемых данных (Строка таблицы значений)
//	ТекстыЯчеек - Строка табличного документа
//	ОбъектЗагрузки - Наименование табличной части или регистра в который загружаются данные (Строка)
//	ТаблицаНастроек - Таблица настроек соответствующая данному объекту загрузки (Таблица значений)
//	ЭтоРегистр - Определяет, что объект загрузки Регистр или Табличная часть (Булево)
//
Функция ЗагрузитьДанныеВДполнительнуюТЧИлиРегистр(ОбъектИсточника, ЗагружаемаяСтрока, ТекстыЯчеек, ОбъектЗагрузки, ТаблицаНастроек, ЭтоРегистр, ТЗ_ЗагружаетсяДоОбъекта)
	
	Отказ = Ложь;
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника(ОбъектЗагрузки, ЭтоРегистр);
	
	Если РежимЗагрузки = 1 Тогда
		Источник = ОбъектИсточника[ОбъектЗагрузки];
	ИначеЕсли РежимЗагрузки = 3 ИЛИ ЭтоРегистр Тогда		
		Источник = ОбъектИсточника.Движения[ОбъектЗагрузки];
	ИначеЕсли РежимЗагрузки = 5 Тогда	
		Источник = ОбъектИсточника[ОбъектЗагрузки];		
	КонецЕсли;
			
	ТекущаяСтрока = Новый Структура;
	Для Каждого сСтрока из ЭтаФорма[ТаблицаНастроек] Цикл
		
		Если ЗначениеЗаполнено(сСтрока.НастройкаЗагрузки) Тогда
			
			стр = Новый Структура("Значение", сСтрока.НастройкаЗагрузки);
			СтрокаНастроек = ТЗ_ЗагружаетсяДоОбъекта.НайтиСтроки(стр);
			Если СтрокаНастроек.Количество() <> 0 Тогда
				
				Если ЗначениеЗаполнено(СтрокаНастроек[0].ОбъектСсылка) Тогда
					ТекущаяСтрока.Вставить(сСтрока.ИмяРеквизита, СтрокаНастроек[0].ОбъектСсылка);	
				Иначе
					ТекущаяСтрока.Вставить(сСтрока.ИмяРеквизита, ЗагружаемаяСтрока[ТаблицаНастроек + сСтрока.ИмяРеквизита]);	
				КонецЕсли;
			КонецЕсли;
		
		ИначеЕсли сСтрока.Пометка Тогда
			
			ТекущаяСтрока.Вставить(сСтрока.ИмяРеквизита, ЗагружаемаяСтрока[ТаблицаНастроек + сСтрока.ИмяРеквизита]);	
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагружаемыйОбъект = Источник.Добавить();
	
	Попытка
		ЗаполнитьЗначенияСвойств(ЗагружаемыйОбъект, ТекущаяСтрока);
	Исключение
		мСообщитьОбОшибке("Ошибка при установки значений реквизитов " + ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;
		
	Если (РежимЗагрузки = 1 ИЛИ РежимЗагрузки = 5) И Не Отказ Тогда 
		Сообщить("Добавлена строка в табличную часть: " + ОбъектЗагрузки);
	ИначеЕсли РежимЗагрузки = 3 И Не Отказ Тогда		
		
		ЗагружаемыйОбъект.Активность  = Истина;
		ЗагружаемыйОбъект.Регистратор = ОбъектИсточника.Ссылка;
		ЗагружаемыйОбъект.Период 	   = ОбъектИсточника.Дата;
		
		Сообщить("Добавлена запись в регистр: " + ОбъектЗагрузки);
	КонецЕсли;
			
КонецФункции

&НаСервере
// Функция ищет или создает документы при поточной загрузке документов
//
//	МетаданныеИсточника - Метаданные документа
//	ТекстыЯчеек - загружаемая строка табличного документа
//	ЭтоДокумент - Булево, отображет загружаются данные в табличную часть Документа (истина) или Справочника (ложь)
//
Функция НайтиСоздатьДокументПриПоточнойЗагрузке(МетаданныеИсточника, ТекущаяСтрока, ЭтоДокумент, ИмяТЗ)
	
	СтрокиПоиска = ЭтаФорма[ИмяТЗ].НайтиСтроки(Новый Структура("ПолеПоиска,Пометка",Истина,Истина));	
	
	Если ЭтоДокумент Тогда
		ОбъектИсточника = Документы[МетаданныеИсточника.Имя].СоздатьДокумент();
	Иначе
		ОбъектИсточника = Справочники[МетаданныеИсточника.Имя].СоздатьЭлемент();	
	КонецЕсли;
	
	Если Не СтрокиПоиска.Количество() = 0 Тогда
		Запрос = Новый Запрос;
		
		Если ЭтоДокумент Тогда
			ТекстЗапроса =
				"Выбрать Первые 1
				|Документ.Ссылка КАК Ссылка
				|Из Документ."+МетаданныеИсточника.Имя+" КАК Документ
				|Где";
		Иначе
			ТекстЗапроса =
				"Выбрать Первые 1
				|Справочник.Ссылка КАК Ссылка
				|Из Справочник."+МетаданныеИсточника.Имя+" КАК Документ
				|Где";
		КонецЕсли;
		
		Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
			ТекстЗапроса = ТекстЗапроса +"
				|Документ."+СтрокаПоиска.ИмяРеквизита+" = &" + СтрокаПоиска.ИмяРеквизита + "
				|И";
				
				Запрос.УстановитьПараметр(СтрокаПоиска.ИмяРеквизита, ТекущаяСтрока[СтрокаПоиска.ИмяРеквизита]);	
		КонецЦикла;
		
		Запрос.Текст = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса) - 2);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() > 0 Тогда
			ОбъектИсточника = Результат[0].Ссылка.ПолучитьОбъект();
		КонецЕсли;

	КонецЕсли;
	
	Возврат ОбъектИсточника;
	
КонецФункции

&НаСервереБезКонтекста
// Функция вычисляет значение ячейки для режима "Вычислять"
//
// Параметры:
//  Выражение - програмный код, который необходимо выполнить
//  ТекущиеДанные  - структура загруженных значений
//  ТекстЯчейки    - текст текущей ячейки
//  ТекстыЯчеек    - массив текстов ячеек строки
//  Результат      - результат вычисления
//
// Возвращаемое значение:
//  Структура, сордержащая Результат и ОписаниеОшибки
Функция ВычислитьЗначениеЯчейки(Знач Выражение,Знач ТекущиеДанные,Знач ТекстЯчейки, Знач ТекстыЯчеек,Знач Результат)
	
	ТекстЯчейки = СокрЛП(ТекстЯчейки);
	ОписаниеОшибки = "";
	Попытка
		Выполнить(Выражение);
	Исключение
		мСообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Новый Структура("Результат,ОписаниеОшибки",Результат,ОписаниеОшибки);
	
КонецФункции // ВычислитьЗначениеЯчейки(ТекущаяСтрока,Представление)()

&НаСервереБезКонтекста
//Функция записывает объект в информационную базу данных, используя события определенные пользователем в форме редактирования событий
//
// Параметры:
//  Объект      - записываемый объект
//  ТекстыЯчеек - массив текстов ячеек, загружаемой строки
//  ПередЗаписьюОбъекта - текст события перед записью объекта
//	ПриЗаписиОбъекта - текст события при записи объекта
//
// Возвращаемое значение:
//  Истина, если объект записан, Ложь - иначе
//
Функция ЗаписатьОбъект(Объект, ТекстыЯчеек = Неопределено, ПередЗаписьюОбъекта, ПриЗаписиОбъекта)
	
	Отказ = Ложь;
	НачатьТранзакцию();
	
	Если Не ПустаяСтрока(ПередЗаписьюОбъекта) Тогда
		Попытка
			Выполнить(ПередЗаписьюОбъекта);
			Если Отказ Тогда
				ОписаниеОшибки = "";//Установлен отказ перед записью объекта
			КонецЕсли;
		Исключение
			Отказ = Истина;
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	Если Не Отказ  Тогда
		Попытка
			Объект.Записать();
		Исключение
			Отказ = Истина;
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	Если Не Отказ и Не ПустаяСтрока(ПриЗаписиОбъекта) Тогда
		
		Попытка
			Выполнить(ПриЗаписиОбъекта);
			Если Отказ Тогда
				ОписаниеОшибки = "";//Установлен отказ при записи объекта
			КонецЕсли;
			
		Исключение
			Отказ = Истина;
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
		
		Если Не Отказ  Тогда
			Попытка
				Объект.Записать();
			Исключение
				Отказ = Истина;
				ОписаниеОшибки = ОписаниеОшибки();
			КонецПопытки;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		мСообщитьОбОшибке(ОписаниеОшибки);
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции // ()

&НаСервереБезКонтекста
// Функция обрабатывает событие "После добавления строки",
// определенное пользователем в форме редактирования событий
//
// Параметры:
//  Объект      - записываемый объект
//  ТекущиеДанные  - структура загруженных значений
//  ТекстыЯчеек    - массив текстов ячеек строки
//
// Возвращаемое значение:
//  Истина, если в событие "После добавления строки" не был установлен Отказ, Ложь - иначе
//
Функция ОбработатьСобытиеПослеДобавленияСтроки(Объект, ТекущиеДанные, ТекстыЯчеек, ПослеДобавленияСтроки)
	
	Попытка
		
		Выполнить(ПослеДобавленияСтроки);
		
	Исключение
		
		мСообщитьОбОшибке(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ()

&НаСервереБезКонтекста
// Функция обрабатывает событие "После добавления строки",
// определенное пользователем в форме редактирования событий
//
// Параметры:
//  Объект      - записываемый объект
//  ТекущиеДанные  - структура загруженных значений
//  ТекстыЯчеек    - массив текстов ячеек строки
//
// Возвращаемое значение:
//  Истина, если в событие "После добавления строки" не был установлен Отказ, Ложь - иначе
//
Функция ОбработатьСобытиеПослеЗаписиОбъекта(Объект, СписокОбъектов, ПослеЗаписиОбъекта)
	
	Попытка
		
		Выполнить(ПослеЗаписиОбъекта);
		
	Исключение
		
		мСообщитьОбОшибке(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
//  ФУНКЦИИ ПЕРЕВОД ТАБЛИЧНОГО ДОКУМЕНТА В ТАБЛИЦУ ЗНАЧЕНИЙ

&НаСервере
// Функция выполняет контроль заполнения строки данных табличного документа
// сообщает об ошибках и устанавливает коментарии к ошибочным ячейкам
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент, у которого необходимо сформировать шапку
//  НомерСтроки       - Число, номер строки табличного документа
//  ТекстыЯчеек    - возвращает массив текстов ячеек строки,
//
// Возвращаемое значение:
//  структура, ключ - Имя загружаемого реквизита, Значение - Значение загружаемого реквизита
//
Функция КонтрольЗаполненияСтроки(ТабличныйДокумент, НомерСтроки, ТекстыЯчеек = Неопределено, КоличествоОшибок = 0)
	
	ТекстыЯчеек = Новый Массив;
	ТекстыЯчеек.Добавить(Неопределено);
	Для к = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		ТекстыЯчеек.Добавить(СокрЛП(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"+Формат(К,"ЧГ=")).Текст));
	КонецЦикла;
	
	Колонки = ДополнительныеСвойства.Колонки;
	
	ТекущаяСтрока = Новый Структура;
	Для каждого КлючИЗначение Из Колонки Цикл
		
		Колонка = КлючИЗначение.Значение;
		
		Если Колонка.Пометка Тогда
			
			Если Колонка.РежимЗагрузки = "Устанавливать" Тогда
				
				Результат = Колонка.ЗначениеПоУмолчанию;
				ТекущаяСтрока.Вставить(КлючИЗначение.Ключ,Результат);
				
			ИначеЕсли Не Колонка.НомерКолонки = 0 Тогда
				
				Если Не ОбработатьОбласть(ТабличныйДокумент.Область("R"+Формат(НомерСтроки,"ЧГ=")+"C"+Формат(Колонка.НомерКолонки,"ЧГ=")), Колонка, ТекущаяСтрока, ТекстыЯчеек, КлючИЗначение.Ключ) Тогда
					КоличествоОшибок = КоличествоОшибок + 1;
				КонецЕсли;
				
			ИначеЕсли Колонка.РежимЗагрузки = "Вычислять" Тогда
				
				Вычисление  = ВычислитьЗначениеЯчейки(Колонка.Выражение,ТекущаяСтрока,"",ТекстыЯчеек,Колонка.ЗначениеПоУмолчанию);
				Результат   = Вычисление.Результат;
				Примечание  = Вычисление.ОписаниеОшибки;
				
				Если НЕ ЗначениеЗаполнено(Результат) Тогда
					Результат = Колонка.ЗначениеПоУмолчанию;
				КонецЕсли;
	
				ТекущаяСтрока.Вставить(КлючИЗначение.Ключ,Результат);
				
				Если Не ПустаяСтрока(Примечание) Тогда
					Сообщить("Строка ["+НомерСтроки+"]("+Колонка.ПредставлениеРеквизита+"): "+ Примечание);
					КоличествоОшибок = КоличествоОшибок + 1;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	Возврат ТекущаяСтрока;
	
КонецФункции

&НаСервере
// Процедура выполняет обработку области табличного документа:
// заполняет расшифровку по представлению ячейки в соответствии со структурой загружаемых реквизитов
// сообщает об ошибке и устанавливает коментарий, если ячейка содержит ошибку
//
// Параметры:
//  Область - область табличного документа
//  Колонка - Структура, свойства, в соответствии с которыми необходимо выполнить обработку области
//  ТекущиеДанные  - структура загруженных значений
//  ТекстыЯчеек    - массив текстов ячеек строки
//
Функция ОбработатьОбласть(Область, Колонка, ТекущиеДанные, ТекстыЯчеек, ИмяКолонки)
	
	Представление = Область.Текст;
	Примечание = "";
	
	Если Колонка.РежимЗагрузки = "Вычислять" Тогда
		
		Вычисление = ВычислитьЗначениеЯчейки(Колонка.Выражение,ТекущиеДанные,Представление, ТекстыЯчеек, Колонка.ЗначениеПоУмолчанию);
		Если Не ПустаяСтрока(Вычисление.ОписаниеОшибки) Тогда
			Результат   = Неопределено;
			Примечание = ""+ Вычисление.ОписаниеОшибки;
		Иначе
			Результат = Вычисление.Результат;
		КонецЕсли;
		
	ИначеЕсли ПустаяСтрока(Представление) Тогда
		Результат = Неопределено;
	Иначе
		НайденныеЗначения = ПолучитьВозможныеЗначения(Колонка, Представление, Примечание, ТекущиеДанные);
		
		Если НайденныеЗначения.Количество() = 0 Тогда
			
			Примечание = "Не найден"+?(Примечание = "","", Символы.ПС+Примечание);
			Результат = Неопределено;
			
		ИначеЕсли НайденныеЗначения.Количество() = 1 Тогда
			
			Результат = НайденныеЗначения[0];
			
			
		Иначе
			
			Примечание = "Не однозначное представление. Вариантов: "+НайденныеЗначения.Количество()+?(Примечание = "","", Символы.ПС+Примечание);
			
			Нашли = Ложь;
			НашлиЗначениеПоУмолчанию = Ложь;
			Для каждого НайденноеЗначение Из НайденныеЗначения Цикл
				Если НайденноеЗначение = Область.Расшифровка Тогда
					Нашли = Истина;
					Прервать;
				КонецЕсли;
				Если НайденноеЗначение = Колонка.ЗначениеПоУмолчанию Тогда
					НашлиЗначениеПоУмолчанию = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Не Нашли Тогда
				
				Если НашлиЗначениеПоУмолчанию Тогда
					НайденноеЗначение = Колонка.ЗначениеПоУмолчанию;
				Иначе
					НайденноеЗначение = НайденныеЗначения[0];
				КонецЕсли;
			КонецЕсли;
			Результат = НайденноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Колонка.ЗначениеПоУмолчанию;
	КонецЕсли;
			
	ТекущиеДанные.Вставить(ИмяКолонки,Результат);
	
	Область.Расшифровка = Результат;
	Область.Примечание.Текст = Примечание;
	
	Если Не ПустаяСтрока(Примечание) Тогда
		Сообщить("Ячейка["+Область.Имя+"]("+Колонка.ПредставлениеРеквизита+"): " + Примечание);
	КонецЕсли;
	
	Возврат ПустаяСтрока(Примечание);
	
КонецФункции

&НаСервере
// Функция возвращает массив возможных значений для текущей колонки по представлению
//
// Параметры:
//  Колонка - Структура, свойства, в соответствии с которыми необходимо получить возможные значения
//  Представление - Строка, по которой необходимо вернуть массив значений
//  Примечание    - массив текстов ячеек строки
//  ТекущиеДанные  - структура загруженных значений
//
// Возвращаемое значение:
//  массив возможных значений
//
Функция ПолучитьВозможныеЗначения(Колонка, Представление, Примечание, ТекущиеДанные)
	
	
	Примечание = "";
	
	НайденныеЗначения = Новый Массив;
	
	Если ПустаяСтрока(Представление) Тогда
		
		Возврат НайденныеЗначения;
		
	Иначе
		СвязьПоТипу = Неопределено;
		Если Не ПустаяСтрока(Колонка.СвязьПоТипу)  Тогда
			
			Если ТипЗНЧ(Колонка.СвязьПоТипу) = Тип("Строка") Тогда
				ТекущиеДанные.Свойство(Колонка.СвязьПоТипу,СвязьПоТипу);
			Иначе
				СвязьПоТипу = Колонка.СвязьПоТипу;
			КонецЕсли;
			Если Не СвязьПоТипу = Неопределено Тогда
				
				ЭлементСвязиПоТипу = Колонка.ЭлементСвязиПоТипу;
				Если ЭлементСвязиПоТипу = 0 Тогда
					ЭлементСвязиПоТипу = 1;
				КонецЕсли;
				ВидыСубконто = СвязьПоТипу.ВидыСубконто;
				Если ЭлементСвязиПоТипу > ВидыСубконто.Количество() Тогда
					Возврат НайденныеЗначения;
				КонецЕсли;
				Тип = СвязьПоТипу.ВидыСубконто[ЭлементСвязиПоТипу-1].ВидСубконто.ТипЗначения;
			Иначе
				Тип = Колонка.ОписаниеТипов;
			КонецЕсли;
			 
		Иначе
			Тип = Колонка.ОписаниеТипов;
		КонецЕсли;
	КонецЕсли;
	ПримитивныеТипы = Новый Структура ("Число, Строка, Дата, Булево, ВидДвиженияНакопления", Тип("Число"), Тип("Строка"), Тип("Дата"), Тип("Булево"), Тип("ВидДвиженияНакопления"));
	Для каждого ТипРеквизита Из Тип.Типы() Цикл
		
		Если ТипРеквизита = ПримитивныеТипы.Число Или ТипРеквизита = ПримитивныеТипы.Булево Тогда
			НайденныеЗначения.Добавить(мПривестиКЧислу(Представление, Колонка.ОписаниеТипов, Примечание));
		ИначеЕсли ТипРеквизита = ПримитивныеТипы.Строка или ТипРеквизита = ПримитивныеТипы.Дата Тогда
			НайденныеЗначения.Добавить(мПривестиКДате(Представление, Колонка.ОписаниеТипов, Примечание));	
		ИначеЕсли ТипРеквизита = ПримитивныеТипы.ВидДвиженияНакопления Тогда
			НайденныеЗначения.Добавить(мПривестиКВидуДвиженияНакопления(Представление, Колонка.ОписаниеТипов, Примечание));	
		Иначе
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРеквизита);
			
			Если Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
				
				//Это Перечисление
				Для каждого Перечисление Из ПолучитьМенеджераПоТипу(ТипРеквизита) Цикл
					Если Строка(Перечисление) = Представление Тогда
						НайденныеЗначения.Добавить(Перечисление);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
				
				//Это документ
				
				Менеджер = ПолучитьМенеджераПоТипу(ТипРеквизита);
				Если Колонка.ИскатьПо = "Номер" Тогда
					//НайденноеЗначение = Менеджер.НайтиПоКоду(Представление);
				ИначеЕсли Колонка.ИскатьПо = "Дата" Тогда
					//НайденноеЗначение = Менеджер.Найти
				Иначе
						
					ДлиннаСинонима = СтрДлина(""+МетаданныеТипа);
						
					Если Лев(Представление, ДлиннаСинонима) = ""+МетаданныеТипа Тогда
						НомерИДата = СокрЛП(Сред(Представление, ДлиннаСинонима+1));
						ПозицияОт = Найти(НомерИДата, " от ");
						Если Не ПозицияОт = 0 Тогда
							НомерДок = Лев(НомерИДата, ПозицияОт-1);
							Попытка
								ДатаДок  = Дата(Сред(НомерИДата, ПозицияОт+4));
							Исключение
								ДатаДок = Неопределено;
							КонецПопытки;
							Если Не ДатаДок = Неопределено Тогда
								НайденноеЗначение = Менеджер.НайтиПоНомеру(НомерДок, ДатаДок);
								Если Не НайденноеЗначение.Пустая() Тогда
									НайденныеЗначения.Добавить(НайденноеЗначение);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
						
				КонецЕсли;
					
			ИначеЕсли Не МетаданныеТипа = Неопределено Тогда
				
				ИскатьПо = Колонка.ИскатьПо;
				ЭтоСправочник = Справочники.ТипВсеСсылки().СодержитТип(ТипРеквизита);
				Если ПустаяСтрока(ИскатьПо) Тогда
					СтрокаОсновногоПредставления = Строка(МетаданныеТипа.ОсновноеПредставление);
					
					Если СтрокаОсновногоПредставления = "ВВидеКода" Тогда
						ИскатьПо = "Код";
					ИначеЕсли СтрокаОсновногоПредставления = "ВВидеНаименования" Тогда
						ИскатьПо = "Наименование";
					ИначеЕсли СтрокаОсновногоПредставления = "ВВидеНомера" Тогда
						ИскатьПо = "Номер";
					КонецЕсли;
				КонецЕсли;
				
					
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	_Таблица.Ссылка
				|ИЗ
				|	" + МетаданныеТипа.ПолноеИмя() + " КАК _Таблица
				|ГДЕ";
				
				Запрос.Текст = Запрос.Текст + "
				|	_Таблица." + ИскатьПо + " = &Представление";
				Запрос.УстановитьПараметр("Представление",Представление);
				
				Если ЭтоСправочник и Не ПустаяСтрока(Колонка.СвязьПоВладельцу) и МетаданныеТипа.Владельцы.Количество() Тогда
					
					СвязьПоВладельцу = Неопределено;
					Если ТипЗНЧ(Колонка.СвязьПоВладельцу) = Тип("Строка") Тогда
						ТекущиеДанные.Свойство(Колонка.СвязьПоВладельцу,СвязьПоВладельцу);
					Иначе
						СвязьПоВладельцу = Колонка.СвязьПоВладельцу;
					КонецЕсли;
					
					Если Не СвязьПоВладельцу = Неопределено Тогда
						Запрос.Текст = Запрос.Текст + "
						|	И _Таблица.Владелец = &СвязьПоВладельцу";
						Запрос.УстановитьПараметр("СвязьПоВладельцу",СвязьПоВладельцу);
					КонецЕсли;
					
				КонецЕсли;
				
				Выборка =  Запрос.Выполнить().Выбрать();
					
				Пока Выборка.Следующий() Цикл
					НайденныеЗначения.Добавить(Выборка.Ссылка);
				КонецЦикла;
			Иначе
				Примечание = "Не описан способ поиска";
				Примечание = "Для Колонки не определен тип значения";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Возврат НайденныеЗначения;
КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧАЮЩИЕ СПИСКИ СВЯЗЕЙ И ВЫБОРОВ ТАБЛИЦ НАСТРОЕК

// Функция возвращает массив, элементами которого выступают возможные имена представления загружаемого реквизита
//
// Параметры:
//  ЗагружаемыйРеквизит - Строка таблицы значений загружаемого реквизита
//
// Возвращаемое значение:
//  список значений; значение списка - строка имя представления
//
&НаСервере
Функция ПолучитьСписокИменПредставлений(ОписаниеТипов)
	
	СписокВыбора = Новый СписокЗначений;
	//Если ОписаниеТипов.Типы().Количество() = 1 Тогда
	//	
	//	Тип = ОписаниеТипов.Типы()[0];
	//	
	//	МетаданныеТипа      = Метаданные.НайтиПоТипу(Тип);
	//	ЭтоСправочник       = Справочники.ТипВсеСсылки().СодержитТип(Тип);
	//	ЭтоСчет             = ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип);
	//	ЭтоВидХарактеристик = ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип);
	//	Если ЭтоСправочник ИЛИ ЭтоСчет Или ЭтоВидХарактеристик Тогда
	//		
	//		ЕстьКод = МетаданныеТипа.ДлинаКода > 0;
	//		ЕстьИмя = МетаданныеТипа.ДлинаНаименования > 0;
	//		
	//		ВидОсновногоПредставление = ?(ЭтоСправочник, Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника,
	//		?(ЭтоСчет,Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСчета,Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики));
	//		
	//		Если МетаданныеТипа.ОсновноеПредставление = ВидОсновногоПредставление.ВВидеКода Тогда
	//			
	//			Если ЕстьКод Тогда
	//				СписокВыбора.Добавить("Код", "Код");
	//			КонецЕсли;
	//			
	//			Если ЕстьИмя Тогда
	//				СписокВыбора.Добавить("Наименование", "Наименование");
	//			КонецЕсли;
	//			
	//		Иначе
	//			
	//			Если ЕстьИмя Тогда
	//				СписокВыбора.Добавить("Наименование", "Наименование");
	//			КонецЕсли;
	//			
	//			Если ЕстьКод Тогда
	//				СписокВыбора.Добавить("Код", "Код");
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//		
	//		Для каждого Реквизит Из МетаданныеТипа.Реквизиты Цикл
	//			
	//			Если Не Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать
	//				И Реквизит.Тип.Типы().Количество() = 1 и Реквизит.Тип.Типы()[0] = Тип ("Строка")
	//			Тогда
	//				
	//				СписокВыбора.Добавить(Реквизит.Имя, Реквизит.Представление());
	//				
	//			КонецЕсли;

	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//Иначе
	Если ОписаниеТипов.Типы().Количество() > 0 Тогда
		
		ТаблицаТипы = Новый ТаблицаЗначений;
		ТаблицаТипы.Колонки.Добавить("СтрокаПоиска", Новый ОписаниеТипов("Строка"));
		ТаблицаТипы.Колонки.Добавить("ПредставлениеПоиска", Новый ОписаниеТипов("Строка"));
		ТаблицаТипы.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		
		Для каждого Тип Из ОписаниеТипов.Типы() Цикл
			
			МетаданныеТипа      = Метаданные.НайтиПоТипу(Тип);
			ЭтоСправочник       = Справочники.ТипВсеСсылки().СодержитТип(Тип);
			ЭтоСчет             = ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип);
			ЭтоВидХарактеристик = ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип);
			Если ЭтоСправочник ИЛИ ЭтоСчет Или ЭтоВидХарактеристик Тогда
				
				ЕстьКод = МетаданныеТипа.ДлинаКода > 0;
				ЕстьИмя = МетаданныеТипа.ДлинаНаименования > 0;
				
				ВидОсновногоПредставление = ?(ЭтоСправочник, Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника,
				?(ЭтоСчет,Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСчета,Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики));
				
				Если МетаданныеТипа.ОсновноеПредставление = ВидОсновногоПредставление.ВВидеКода Тогда
					
					Если ЕстьКод Тогда
						Стр = ТаблицаТипы.Найти("Код", "СтрокаПоиска");
						Если ЗначениеЗаполнено(Стр) Тогда
							Стр.Количество = Стр.Количество + 1;
						Иначе
                        	Стр = ТаблицаТипы.Добавить();
							Стр.СтрокаПоиска = "Код";
							Стр.ПредставлениеПоиска = "Код";
							Стр.Количество = 1;
						КонецЕсли;
					КонецЕсли;
					
					Если ЕстьИмя Тогда
						Стр = ТаблицаТипы.Найти("Наименование", "СтрокаПоиска");
						Если ЗначениеЗаполнено(Стр) Тогда
							Стр.Количество = Стр.Количество + 1;
						Иначе
                        	Стр = ТаблицаТипы.Добавить();
							Стр.СтрокаПоиска = "Наименование";
							Стр.ПредставлениеПоиска = "Наименование";
							Стр.Количество = 1;
						КонецЕсли;
						//СписокВыбора.Добавить("Наименование", "Наименование");
					КонецЕсли;
					
				Иначе
					
					Если ЕстьИмя Тогда
						Стр = ТаблицаТипы.Найти("Наименование", "СтрокаПоиска");
						Если ЗначениеЗаполнено(Стр) Тогда
							Стр.Количество = Стр.Количество + 1;
						Иначе
                        	Стр = ТаблицаТипы.Добавить();
							Стр.СтрокаПоиска = "Наименование";
							Стр.ПредставлениеПоиска = "Наименование";
							Стр.Количество = 1;
						КонецЕсли;
						//СписокВыбора.Добавить("Наименование", "Наименование");
					КонецЕсли;
					
					Если ЕстьКод Тогда
						Стр = ТаблицаТипы.Найти("Код", "СтрокаПоиска");
						Если ЗначениеЗаполнено(Стр) Тогда
							Стр.Количество = Стр.Количество + 1;
						Иначе
                        	Стр = ТаблицаТипы.Добавить();
							Стр.СтрокаПоиска = "Код";
							Стр.ПредставлениеПоиска = "Код";
							Стр.Количество = 1;
						КонецЕсли;
						//СписокВыбора.Добавить("Код", "Код");
					КонецЕсли;
					
				КонецЕсли;
				
				Для каждого Реквизит Из МетаданныеТипа.Реквизиты Цикл
					
					Если Не Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать
					 И Реквизит.Тип.Типы().Количество() = 1 и Реквизит.Тип.Типы()[0] = Тип ("Строка") Тогда
						
						Стр = ТаблицаТипы.Найти(Реквизит.Имя, "СтрокаПоиска");
						Если ЗначениеЗаполнено(Стр) Тогда
							Стр.Количество = Стр.Количество + 1;
						Иначе
                        	Стр = ТаблицаТипы.Добавить();
							Стр.СтрокаПоиска = Реквизит.Имя;
							Стр.ПредставлениеПоиска = Реквизит.Представление();
							Стр.Количество = 1;
						КонецЕсли;
						//СписокВыбора.Добавить(Реквизит.Имя, Реквизит.Представление());	
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Количество", ОписаниеТипов.Типы().Количество());
		
		НайденныеСтроки = ТаблицаТипы.НайтиСтроки(Отбор);
		
		Для каждого Строка Из НайденныеСтроки Цикл
			СписокВыбора.Добавить(Строка.СтрокаПоиска, Строка.ПредставлениеПоиска);	
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции // ()

// Функция возвращает список, элементами которого выступают возможные связи по типу для загружаемого реквизита
//
// Параметры:
//  ЗагружаемыйРеквизит - Строка таблицы значений загружаемого реквизита
//
// Возвращаемое значение:
//  список значений; значение списка - строка имя колонки связи или ссылка на элемент связи
//
&НаСервере
Функция ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит, ТЗ)
	
	СписокВыбора = Новый СписокЗначений;
	
	ВозможныеПланыСчетов = Новый Структура;
	Для каждого ПланСчетов Из Метаданные.ПланыСчетов Цикл
		Попытка
			Если ПланСчетов.ВидыСубконто.Тип = ЗагружаемыйРеквизит.ОписаниеТипов Тогда
				
				ВозможныеПланыСчетов.Вставить(ПланСчетов.Имя,ПланыСчетов[ПланСчетов.Имя]);
				
			КонецЕсли;
		Исключение
			
		КонецПопытки;
	КонецЦикла;
	
	Для каждого ПланСчетов Из ВозможныеПланыСчетов Цикл
		ТипЗНЧПланСчетов = ТипЗНЧ(ПланСчетов.Значение.ПустаяСсылка());
		Для каждого КолонкаСвязиПоТипу Из ТЗ Цикл
			Если КолонкаСвязиПоТипу.ОписаниеТипов.Типы()[0] = ТипЗНЧПланСчетов Тогда
				СписокВыбора.Добавить(КолонкаСвязиПоТипу.ИмяРеквизита,КолонкаСвязиПоТипу.ИмяРеквизита);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ВозможныеПланыСчетов.Количество() = 0 Тогда
		СписокВыбора.Добавить(Неопределено, "< пустое значение >");
	КонецЕсли;
	
	Для каждого ПланСчетов Из ВозможныеПланыСчетов Цикл
		СписокВыбора.Добавить("ПланСчетовСсылка."+ПланСчетов.Ключ,"<"+ПланСчетов.Ключ+">");
	КонецЦикла;
	
	Возврат СписокВыбора;
КонецФункции // ()

// Функция возвращает список, элементами которого выступают возможные связи по владельцу для загружаемого реквизита
//
// Параметры:
//  ЗагружаемыйРеквизит - Строка таблицы значений загружаемого реквизита
//
// Возвращаемое значение:
//  список значений; значение списка - строка имя колонки связи или ссылка на элемент связи
//
&НаСервере
Функция ПолучитьСписокСвязейПоВладельцу(ОписаниеТипов, ТаблицаКолонок)
	
	ЕстьТипСамогоОбъекта = Ложь;
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	Если РежимЗагрузки = 0 Тогда
		ОписаниеТиповСправочника = Тип(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(),".","Ссылка."));
	Иначе
		ОписаниеТиповСправочника = Неопределено;
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	ТипыВладельцев = Новый Соответствие;
	Для каждого ТипКолонки Из ОписаниеТипов.Типы() Цикл
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипКолонки) Тогда
			Для каждого Владелец Из Метаданные.НайтиПоТипу(ТипКолонки).Владельцы Цикл
				ТипВладельца   = Тип(СтрЗаменить(Владелец.ПолноеИмя(), ".", "Ссылка."));
				Если ТипыВладельцев[ТипВладельца] = Неопределено Тогда
					
					Если ТипВладельца = ОписаниеТиповСправочника Тогда
						
						ЕстьТипСамогоОбъекта = Истина;
						
					КонецЕсли;
					 
					ТипыВладельцев.Вставить(Владелец.ПолноеИмя(), Владелец.ПолноеИмя());
					Для каждого КолонкаСвязиПоВладельцу Из ТаблицаКолонок Цикл
						Если КолонкаСвязиПоВладельцу.ОписаниеТипов.Типы()[0] = ТипВладельца И СписокВыбора.НайтиПоЗначению(КолонкаСвязиПоВладельцу.ИмяРеквизита) = Неопределено Тогда
							// Возможно надо будет по всем типам проходить
							СписокВыбора.Добавить(КолонкаСвязиПоВладельцу.ИмяРеквизита,КолонкаСвязиПоВладельцу.ИмяРеквизита);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТипыВладельцев.Количество() = 0 Тогда
		СписокВыбора.Добавить(Неопределено, "< пустое значение >");
	КонецЕсли;
	 
	
	Для каждого КлючИЗначение Из ТипыВладельцев Цикл
		СписокВыбора.Добавить(КлючИЗначение.Значение, "<"+КлючИЗначение.Значение+">");
	КонецЦикла;
	
	Если ЕстьТипСамогоОбъекта Тогда
		
		СписокВыбора.Вставить(0,"<Создаваемый объект>", "<Создаваемый объект>");
		
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции // ()

// Возвращает список выбора, закэшированный в таблице значений для реквизита
//
// Параметры
//  ИмяРеквизита  - Строка - Имя реквизита, для которого нужно
//		получить связанный список выбора
//
// Возвращаемое значение:
//   СписокЗначений - список значений для выбора для этого реквизита
//
&НаСервере
Функция ПолучитьСписокВыбораСвязиПоВладельцу(ИмяРеквизита)

	ТЗ = РеквизитФормыВЗначение("СпискиВыбораСвязиПоВладельцу");
	Стр = ТЗ.Найти(ИмяРеквизита, "ИмяРеквизита");
	
	Возврат Стр.СписокВыбора;

КонецФункции

&НаСервере
// Возвращает список выбора, закэшированный в таблице значений для реквизита
//
// Параметры
//  ИмяРеквизита  - Строка - Имя реквизита, для которого нужно
//		получить связанный список выбора
//
// Возвращаемое значение:
//   СписокЗначений - список значений для выбора для этого реквизита
//
Функция ПолучитьСписокВыбораСвязиПоТипу(ИмяРеквизита)

	ТЗ = РеквизитФормыВЗначение("СпискиВыбораСвязиПоТипу");
	Стр = ТЗ.Найти(ИмяРеквизита, "ИмяРеквизита");
	
	Возврат Стр.СписокВыбора;

КонецФункции // ПолучитьСписокВыбораСвязиПоВладельцу()

&НаСервере
// Сохраняет в кэше список выбора для реквизита
//
// Параметры
//  ИмяРеквизита  - Строка - Имя реквизита, для которого нужно
//		сохранить связанный список выбора
//  НовыйСписокВыбора  - СписокЗначений - сохраняемый список значений
//
Процедура СохранитьСписокВыбораСвязиПоВладельцу(ИмяРеквизита, Знач НовыйСписокВыбора)

	ТЗ = РеквизитФормыВЗначение("СпискиВыбораСвязиПоВладельцу");
	Стр = ТЗ.Найти(ИмяРеквизита, "ИмяРеквизита");
	Стр.СписокВыбора = НовыйСписокВыбора;
	ЗначениеВРеквизитФормы(ТЗ, "СпискиВыбораСвязиПоВладельцу");

КонецПроцедуры // СохранитьСписокВыбораСвязиПоВладельцу()

&НаСервере
// Процедура получает таблицу данных из табличного документа
//
Процедура ПолучитьТаблицуДанныхНаСервере()

	СформироватьСтруктуруКолонок();
	СформироватьКолонкиТаблицыПодготовленныхДанных();
	КоличествоЭлементов = ТабличныйДокумент.ВысотаТаблицы - ПерваяСтрокаДанныхТабличногоДокумента + 1;
	
	КоличествоОшибок = 0;
	ТЗ = РеквизитФормыВЗначение("ТаблицаПодготовленныхДанных");
	ТЗ.Очистить();
	
	Для К = 0  По КоличествоЭлементов - 1 Цикл
		ЗаполнитьЗначенияСвойств(ТЗ.Добавить(), КонтрольЗаполненияСтроки(ТабличныйДокумент, К + ПерваяСтрокаДанныхТабличногоДокумента,,КоличествоОшибок));
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТЗ, "ТаблицаПодготовленныхДанных");
	
	Если КоличествоОшибок Тогда
		Сообщить("Выявлено ячеек, содержащих ошибки/неоднозначное представление: " + КоличествоОшибок);
	КонецЕсли;

КонецПроцедуры // КонтрольЗаполненияСервер()

&НаСервере
// Возвращает список выбора, закэшированный в таблице значений для реквизита
//
// Параметры
//  ИмяРеквизита  - Строка - Имя реквизита, для которого нужно
//		получить связанный список выбора
//  ВидСписка - Строка - Вид возращаемого списка
// Возвращаемое значение:
//   СписокЗначений - список значений для выбора для этого реквизита
//
Функция ПолучитьСписокВыбора(ИмяРеквизита, ТипСписка)

	ТЗ = РеквизитФормыВЗначение("СпискиВыбораРеквизитов");
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяРеквизита", ИмяРеквизита);
	Отбор.Вставить("ТипСписка", ТипСписка);
	
	Стр = ТЗ.НайтиСтроки(Отбор);
	
	Если Стр.Количество() > 0 Тогда
		Возврат Стр[0].СписокВыбора;
	Иначе
		Возврат Новый СписокЗначений;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЯЮЩИЕ ТАБЛИЦЫ НАСТРОЕК ЗАГРУЗКИ

&НаСервере
// Заполняет настройки колонок по умолчанию или по переданным настройкам
//
// Параметры:
//  ТабличнаяЧасть - Таблица настроек которую требуется заполнить
//	ЭтоРегистр - Определяет, что мы заполняем настройки для регистра, а не табличной части
//	ОбъектЗагрузки - Объект настройками загрузки которого заполняется таблица настроек	
//
Процедура ЗаполнитьНастройкиКолонок(ТабличнаяЧасть = Неопределено, ЭтоРегистр = Ложь, ОбъектЗагрузки = Неопределено)
	
	Если ЗначениеЗаполнено(ТабличнаяЧасть) Тогда
		ТЗ = РеквизитФормыВЗначение(ТабличнаяЧасть);	
	Иначе
		ТЗ = РеквизитФормыВЗначение("ТаблицаЗагружаемыхРеквизитов");		
	КонецЕсли;
	
	ТЗ.Очистить();
		
	Если РежимЗагрузки = 0 Тогда
		ЗаполнитьНастройкиКолонокСправочника(ТЗ);
	ИначеЕсли РежимЗагрузки = 1 Тогда
		ЗаполнитьНастройкиКолонокТабличнойЧасти(ТЗ);
	ИначеЕсли РежимЗагрузки = 2 Тогда
		ЗаполнитьНастройкиКолонокРегистраСведений(ТЗ);
	ИначеЕсли РежимЗагрузки = 3 ИЛИ ЭтоРегистр Тогда
		ЗаполнитьНастройкиКолонокРегистраДокумента(ТЗ, ОбъектЗагрузки, ЭтоРегистр);
	КонецЕсли;
	
	НомерКолонки = 1;	
			
	Если РежимЗагрузки = 5 И НЕ ЭтоРегистр Тогда
		ЗаполнитьНастройкиКолонокТабличнойЧасти(ТЗ);			
	КонецЕсли;
		
   	УстновитьПредставлениеДопУсловийТЗ(ТЗ, НомерКолонки);
	Если ЗначениеЗаполнено(ТабличнаяЧасть) Тогда
		ЗначениеВРеквизитФормы(ТЗ, ТабличнаяЧасть);	
	Иначе
		ЗначениеВРеквизитФормы(ТЗ, "ТаблицаЗагружаемыхРеквизитов");		
	КонецЕсли;
				
КонецПроцедуры // ()

&НаСервере
// Процедура восстанавливает таблицу настроек из структуры
//
// Параметры:
//	ТаблицаРеквизитов - таблица значений которую заполняемя
//  ВосстановленнаяТаблицаРеквизитов - таблица значений, по которой заполняем ТаблицуРеквизитов
//
Процедура ВосстановитьЗначенияНастроекИзТаблицыРеквизитов(ТаблицаРеквизитов, ВосстановленнаяТаблицаРеквизитов)
	
	НомерКолонкиОформления = 0;

	Для каждого Колонка Из ВосстановленнаяТаблицаРеквизитов Цикл

		ЗагружаемыйРеквизит = ТаблицаРеквизитов.Найти(Колонка.ИмяРеквизита,"ИмяРеквизита");
		Если Не ЗагружаемыйРеквизит = Неопределено Тогда
			Индекс = ТаблицаРеквизитов.Индекс(ЗагружаемыйРеквизит);
			Если Индекс >= НомерКолонкиОформления Тогда
				ЗаполнитьЗначенияСвойств(ЗагружаемыйРеквизит, Колонка);
				
				ТаблицаРеквизитов.Сдвинуть(ЗагружаемыйРеквизит, НомерКолонкиОформления - Индекс);
				НомерКолонкиОформления = НомерКолонкиОформления + 1;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Заполняет настройки колонок по умолчанию для табличной части
//
Процедура ЗаполнитьНастройкиКолонокТабличнойЧасти(ТЗ, ОбъектЗагрузки = Неопределено)
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника(ОбъектЗагрузки);
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если РежимЗагрузки = 5 И НЕ ЗначениеЗаполнено(ОбъектЗагрузки) Тогда
		СписокКолонок = Элементы["Колонка_ПриИзмененииСоздатьДокумент"].СписокВыбора;
		СписокКолонок.Очистить();
	КонецЕсли;

	Для каждого Реквизит Из МетаданныеИсточника.СтандартныеРеквизиты Цикл
		Если Реквизит.Имя = "Ссылка" 
			ИЛИ Реквизит.Имя = "ПометкаУдаления" 
			ИЛИ Реквизит.Имя = "НомерСтроки"
			ИЛИ Реквизит.Имя = "Предопределенный"
			ИЛИ Реквизит.Имя = "Проведен" Тогда
				Продолжить;
		КонецЕсли;
		ЗагружаемыйРеквизит                        	= ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           	= Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита 	= Реквизит.Представление();
		ЗагружаемыйРеквизит.ОписаниеТипов 			= МетаданныеИсточника.СтандартныеРеквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска 	= Истина;
		ЗагружаемыйРеквизит.ПолеПоиска 				= Истина;
		ЗагружаемыйРеквизит.НеУбиратьПометку 		= Истина;
		Если РежимЗагрузки = 5 И НЕ ЗначениеЗаполнено(ОбъектЗагрузки) Тогда
			СписокКолонок.Добавить(Реквизит.Имя, Реквизит.Представление());
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		ЗагружаемыйРеквизит                        	= ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           	= Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита 	= Реквизит.Представление();
		ЗагружаемыйРеквизит.ОписаниеТипов 			= МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска 	= Истина;
		Если РежимЗагрузки = 5 И НЕ ЗначениеЗаполнено(ОбъектЗагрузки) Тогда
			СписокКолонок.Добавить(Реквизит.Имя, Реквизит.Представление());
		КонецЕсли;
	КонецЦикла;
	
	Если РежимЗагрузки = 5 И НЕ ЗначениеЗаполнено(ОбъектЗагрузки) Тогда
		Если СписокКолонок.Количество() > 0 Тогда
			Колонка_ПриИзмененииСоздатьДокумент = СписокКолонок[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьТаблицуЗагружаемыхРеквизитов(ТЗ);
	
КонецПроцедуры // ()

// Заполняет настройки колонок по умолчанию для справочника
//
&НаСервере
Процедура ЗаполнитьНастройкиКолонокСправочника(ТЗ, Справочник = Неопределено, ТекРежимЗагрузки = Неопределено)
	
	Если ТекРежимЗагрузки = Неопределено Тогда
		ТекРежимЗагрузки = РежимЗагрузки;	
	КонецЕсли;
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника(Справочник, , ТекРежимЗагрузки);
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МетаданныеИсточника.ДлинаКода > 0 Тогда
		
		ЗагружаемыйРеквизит = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Код";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Код";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		
		Если МетаданныеИсточника.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
			ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаКода));
		Иначе
			ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(МетаданныеИсточника.ДлинаКода));
		КонецЕсли;
		
	КонецЕсли;
	
	Если МетаданныеИсточника.ДлинаНаименования > 0 Тогда
		
		ЗагружаемыйРеквизит = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Наименование";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Наименование";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(МетаданныеИсточника.ДлинаНаименования));
		
	КонецЕсли;
	
	Если МетаданныеИсточника.Владельцы.Количество() > 0 И НЕ ЗначениеЗаполнено(Справочник) Тогда
		
		ЗагружаемыйРеквизит = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Владелец";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Владелец";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   =  Истина;
		
		СтрокаОписанияТипов = "";
			
		Для каждого Владелец Из МетаданныеИсточника.Владельцы Цикл
			СтрокаОписанияТипов = ?(ПустаяСтрока(СтрокаОписанияТипов),"",СтрокаОписанияТипов + ", ") + Владелец.ПолноеИмя();
		КонецЦикла;
			
		СтрокаОписанияТипов = СтрЗаменить(СтрокаОписанияТипов,".","Ссылка.");
		ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов(СтрокаОписанияТипов);
		
	КонецЕсли;
	
	Если МетаданныеИсточника.Иерархический Тогда
		
		ЗагружаемыйРеквизит = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Родитель";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Родитель";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Истина;
		ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов(СтрЗаменить(МетаданныеИсточника.ПолноеИмя(),".","Ссылка."));
		
	КонецЕсли;
	
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		Если Не Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
			ЗагружаемыйРеквизит                        = ТЗ.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Не Реквизит.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.НеИндексировать;
			ЗагружаемыйРеквизит.ОписаниеТипов = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
		КонецЕсли;
	КонецЦикла;
	
	ОбработатьТаблицуЗагружаемыхРеквизитов(ТЗ);
	
КонецПроцедуры // ()

&НаСервере
// Заполняет настройки колонок по умолчанию для регистра сведений
//
Процедура ЗаполнитьНастройкиКолонокРегистраСведений(ТЗ)
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не МетаданныеИсточника.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		
		ЗагружаемыйРеквизит = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = "Период";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Период";
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		ЗагружаемыйРеквизит.ПолеПоиска           = Истина;
		
		ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов("Дата", , , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		
	КонецЕсли;
	
	Для каждого Реквизит Из МетаданныеИсточника.Измерения Цикл
		ЗагружаемыйРеквизит                        = ТЗ.Добавить();
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ОписаниеТипов = МетаданныеИсточника.Измерения[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеИсточника.Ресурсы Цикл
		ЗагружаемыйРеквизит                        = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ОписаниеТипов = МетаданныеИсточника.Ресурсы[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		ЗагружаемыйРеквизит                        = ТЗ.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
		ЗагружаемыйРеквизит.ОписаниеТипов = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
	КонецЦикла;
	
	ОбработатьТаблицуЗагружаемыхРеквизитов(ТЗ);
		
КонецПроцедуры // ()

&НаСервере
// Заполняет настройки колонок по умолчанию для регистра документа
//
Процедура ЗаполнитьНастройкиКолонокРегистраДокумента(ТаблицаЗагружаемыхРеквизитов, ОбъектЗагрузки = Неопределено, ЭтоРегистр = Ложь)
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника(ОбъектЗагрузки, ЭтоРегистр);
	
	Если МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Кол = 0;
	Попытка   
		Кол = МетаданныеИсточника.ПланСчетов.МаксКоличествоСубконто;
	Исключение КонецПопытки;
	Если Кол>0 Тогда
		Для нн = 4 по ДвиженияРегистра.Колонки.Количество()-1 Цикл
			Реквизит = ДвиженияРегистра.Колонки[нн];
			Если (Реквизит.Имя="МоментВремени") Тогда Продолжить КонецЕсли;
			
			ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Заголовок;
			ЗагружаемыйРеквизит.ОписаниеТипов 		   = Новый ОписаниеТипов(Реквизит.ТипЗначения, , "Null");
		КонецЦикла;
	Иначе
		
		Попытка
			Если МетаданныеИсточника.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
				ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
				ЗагружаемыйРеквизит.ИмяРеквизита           = "ВидДвижения";
				ЗагружаемыйРеквизит.ПредставлениеРеквизита = "Вид движения";
				ЗагружаемыйРеквизит.ОписаниеТипов = Новый ОписаниеТипов("ВидДвиженияНакопления");	
			КонецЕсли;
		Исключение

		КонецПопытки;

		Для каждого Реквизит Из МетаданныеИсточника.Измерения Цикл
			ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
			ЗагружаемыйРеквизит.МожетБытьПолемПоиска   = Истина;
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.ОписаниеТипов          = МетаданныеИсточника.Измерения[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
		КонецЦикла;
		
		Для каждого Реквизит Из МетаданныеИсточника.Ресурсы Цикл
			ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.ОписаниеТипов = МетаданныеИсточника.Ресурсы[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
		КонецЦикла;
		
		Для каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
			ЗагружаемыйРеквизит                        = ТаблицаЗагружаемыхРеквизитов.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита           = Реквизит.Имя;
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
			ЗагружаемыйРеквизит.ОписаниеТипов = МетаданныеИсточника.Реквизиты[ЗагружаемыйРеквизит.ИмяРеквизита].Тип;
		КонецЦикла;
		
	КонецЕсли;		
	
	ОбработатьТаблицуЗагружаемыхРеквизитов(ТаблицаЗагружаемыхРеквизитов);
	
КонецПроцедуры // ()

&НаСервере
Процедура ОбработатьТаблицуЗагружаемыхРеквизитов(ТаблицаЗагружаемыхРеквизитов)
	
	СпискиВыбораРеквизитов.Очистить();
	
	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		
		СписокВыбора = ПолучитьСписокИменПредставлений(ЗагружаемыйРеквизит.ОписаниеТипов);
		ЗагружаемыйРеквизит.ИскатьПо = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
				
		СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ЗагружаемыйРеквизит.ОписаниеТипов, ТаблицаЗагружаемыхРеквизитов);
		ЗагружаемыйРеквизит.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, "",СписокВыбора[0].Значение);
		
		СтрокаСпискаВладелец = СпискиВыбораРеквизитов.Добавить();
		СтрокаСпискаВладелец.ИмяРеквизита = ЗагружаемыйРеквизит.ИмяРеквизита;
		СтрокаСпискаВладелец.ТипСписка = "СвязьПоВладельцу";
		СтрокаСпискаВладелец.СписокВыбора = СписокВыбора;
		
		СписокВыбора = ПолучитьСписокСвязейПоТипу(ЗагружаемыйРеквизит, ТаблицаЗагружаемыхРеквизитов);
		
		СтрокаСпискаТипы = СпискиВыбораРеквизитов.Добавить();
		СтрокаСпискаТипы.ИмяРеквизита =  ЗагружаемыйРеквизит.ИмяРеквизита;
		СтрокаСпискаТипы.ТипСписка = "СвязьПоТипу";
		СтрокаСпискаТипы.СписокВыбора =  СписокВыбора;
	
		Если СписокВыбора.Количество() = 0 Тогда
			ЗагружаемыйРеквизит.СвязьПоТипу = "";
			ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 0;
		Иначе
			Если Лев(СтрокаСпискаТипы.ИмяРеквизита, 10) = "СубконтоДт" Тогда
				ЗагружаемыйРеквизит.СвязьПоТипу = "СчетДт";	
			ИначеЕсли Лев(СтрокаСпискаТипы.ИмяРеквизита, 10) = "СубконтоКт" Тогда
				ЗагружаемыйРеквизит.СвязьПоТипу = "СчетКт";	
			Иначе
				ЗагружаемыйРеквизит.СвязьПоТипу = СписокВыбора[0].Значение;
			КонецЕсли;
			Если Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"3") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 3;
				
			ИначеЕсли Найти(ЗагружаемыйРеквизит.ИмяРеквизита,"2") <> 0 Тогда
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 2;
				
			Иначе
				
				ЗагружаемыйРеквизит.ЭлементСвязиПоТипу = 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = ЗагружаемыйРеквизит.ОписаниеТипов.ПривестиЗначение(Неопределено);
		ЗагружаемыйРеквизит.ДоступныеТипы = ЗагружаемыйРеквизит.ОписаниеТипов;
		ЗагружаемыйРеквизит.РежимЗагрузки = "Искать";
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстновитьПредставлениеДопУсловийТЗ(ТЗ, НомерКолонки = 1)
	
	Для каждого ЗагружаемыйРеквизит Из ТЗ Цикл
		Если ЗагружаемыйРеквизит.РежимЗагрузки = "Вычислять" Тогда
			ЗагружаемыйРеквизит.ПредставлениеДопУсловий = ЗагружаемыйРеквизит.Выражение;
		Иначе
			ЗагружаемыйРеквизит.ПредставлениеДопУсловий = ?(ПустаяСтрока(ЗагружаемыйРеквизит.ИскатьПо), "", "Искать по "+ЗагружаемыйРеквизит.ИскатьПо)
			+?(ПустаяСтрока(ЗагружаемыйРеквизит.СвязьПоВладельцу), "", " по владельцу "+ЗагружаемыйРеквизит.СвязьПоВладельцу);
		КонецЕсли;
		Если НЕ ЗагружаемыйРеквизит.ОписаниеТипов.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			ЗагружаемыйРеквизит.Пометка      = Истина;
			ЗагружаемыйРеквизит.НомерКолонки = НомерКолонки;
			НомерКолонки = НомерКолонки + 1;
		КонецЕсли;	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
// Заполняет в таблицу значений движения регистра документа
//
Процедура ЗаполнитьВТаблицуЗначенийДвиженияРегистраДокумента(ОбъектЗагрузки = Неопределено, НаименованиеСтраницы = Неопределено) Экспорт
	
	ПолучаемДанныеОсновногоРегистра = Ложь;
	
	Если ЗначениеЗаполнено(ОбъектЗагрузки) Тогда
		РегистрЗагрузки = ОбъектЗагрузки;
	Иначе
		РегистрЗагрузки = РегистрДокумента;
		ПолучаемДанныеОсновногоРегистра = Истина;
	КонецЕсли;
	
	Если СокрЛП(РегистрЗагрузки)<>"" Тогда
				
		ФлагОшибки=0;
		Попытка
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	* 
			|ИЗ
			|	РегистрБухгалтерии."+РегистрЗагрузки+".ДвиженияССубконто(, , Регистратор = &Регистратор, , ) КАК ЖурналПроводок";
			
			Если РежимЗагрузки = 3 Тогда
				Запрос.УстановитьПараметр("Регистратор", СсылкаДокумента.Ссылка);
			ИначеЕсли РежимЗагрузки = 5 Тогда
				Запрос.УстановитьПараметр("Регистратор", СсылкаИсточника.Ссылка);
			КонецЕсли;
			
			Результат = Запрос.Выполнить();
			
			ДвиженияРегистра = Результат.Выгрузить();
			
			ДвиженияРегистра.Колонки.Добавить("МоментВремени", Новый ОписаниеТипов("Дата"));
			
			Если ПолучаемДанныеОсновногоРегистра Тогда
				АдресХранилищаДвиженияРегистра = ПоместитьВоВременноеХранилище(ДвиженияРегистра, Новый УникальныйИдентификатор);
			КонецЕсли;		
		Исключение
			ФлагОшибки=1;
		КонецПопытки;
		
		Если ФлагОшибки=1 Тогда
			ФлагОшибки=0;
			Попытка
				ТабПоле = РегистрыНакопления[РегистрЗагрузки].СоздатьНаборЗаписей();	
			Исключение
				ФлагОшибки=1;
			КонецПопытки;
			
			Если ФлагОшибки=1 Тогда
				ФлагОшибки=0;
				Попытка
					ТабПоле = РегистрыРасчета[РегистрЗагрузки].СоздатьНаборЗаписей();
				Исключение
					ФлагОшибки=1;
				КонецПопытки;
			КонецЕсли;
			
			Если ФлагОшибки=1 Тогда
				ФлагОшибки=0;
				Попытка
					ТабПоле = РегистрыСведений[РегистрЗагрузки].СоздатьНаборЗаписей();
				Исключение
					ФлагОшибки=1;
				КонецПопытки;
			КонецЕсли;
			
			Попытка
				Если (РежимЗагрузки = 3) ИЛИ ((РежимЗагрузки = 4) И (ЗначениеЗаполнено(СсылкаДокумента))) Тогда
					Отбор = новый структура;
					Отбор.Вставить("Регистратор",СсылкаДокумента);
					ТабПоле.Отбор.Регистратор.Значение = СсылкаДокумента.Ссылка;
					ТабПоле.Прочитать();
					ДвиженияРегистра = ТабПоле.Выгрузить();
					Если ПолучаемДанныеОсновногоРегистра Тогда
						АдресХранилищаДвиженияРегистра = ПоместитьВоВременноеХранилище(ДвиженияРегистра, Новый УникальныйИдентификатор);
					КонецЕсли;	
				КонецЕсли;
			Исключение
				
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;	
	
	ЗаполнитьНастройкиКолонок(НаименованиеСтраницы, Истина, ОбъектЗагрузки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ И ОБНОВЛЕНИЯ ДАННЫХ ТАБЛИЧНОГО ДОКУМЕНТА

&НаСервере
Процедура ОбновитьДанныеТабличногоДокументаСервер()

	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруКолонок();
	СформироватьШапкуТабличногоДокумента(ТабличныйДокумент);
	
	НомерСтроки = ПерваяСтрокаДанныхТабличногоДокумента;
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	Если РежимЗагрузки = 0 или РежимЗагрузки = 2 или РежимЗагрузки = 3 или РежимЗагрузки = 4 или РежимЗагрузки = 5 или МетаданныеИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Если ТолькоШапку Тогда 
	//	Возврат;
	//КонецЕсли;
	
	Если РежимЗагрузки = 1 Тогда
		Источник = СсылкаИсточника[ТабличнаяЧастьИсточника];	
	КонецЕсли;
			
	Для каждого Строка Из Источник Цикл
		
		НомерКолонки = 0;
		
		Для каждого ЗагружаемыйРеквизит Из ЭтаФорма["ТаблицаЗагружаемыхРеквизитов"] Цикл
			
			Если ЗагружаемыйРеквизит.Пометка Тогда
				
				Если РучнаяНумерацияКолонокТабличногоДокумента Тогда
					НомерКолонки = ЗагружаемыйРеквизит.НомерКолонки;
				Иначе
					НомерКолонки = НомерКолонки + 1;
				КонецЕсли;
				
				Область = ТабличныйДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=") + "C"+НомерКолонки);
				Значение = Строка[ЗагружаемыйРеквизит.ИмяРеквизита];
				
				Попытка
					Представление = Значение[ЗагружаемыйРеквизит.ИскатьПо];
					
				Исключение
					
					Представление = Значение;
					
				КонецПопытки;
				
				Область.Текст = Представление;
				Область.Расшифровка = Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеТабличногоДокумента(БезВопросов = Ложь)
	
	Если (РежимЗагрузки = 0 или РежимЗагрузки = 2) и Элементы.ТабДокумент.Высота > 1 И Не БезВопросов Тогда
		Результат = Вопрос("Табличный документ содержит данные. Очистить?", РежимДиалогаВопрос.ДаНет);
		Если  Результат = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДанныеТабличногоДокументаСервер();
	
КонецПроцедуры

// Функция считывает в табличный документ данные из файла в формате Excel
//
// Параметры:
//  ТабличныйДокумент  - ТабличныйДокумент, в который необходимо прочитать данные
//  ИмяФайла           - имя файла в формате Excel, из которого необходимо прочитать данные
//  НомерЛистаExcel    - номер листа книги Excel, из которого необходимо прочитать данные
//
// Возвращаемое значение:
//  Истина, если файл прочитан, Ложь - иначе
//
&НаКлиенте
Функция мПрочитатьТабличныйДокументИзExcel(ИмяФайла, НомерЛистаExcel = 1) Экспорт
	
	xlLastCell = 11;
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ИмяФайла);
		Сообщить("Обработка файла Microsoft Excel...");
		ExcelЛист = Excel.Sheets(НомерЛистаExcel);
	Исключение
		Сообщить("Ошибка. Возможно неверно указан номер листа книги Excel.");
		Возврат ложь;
		
	КонецПопытки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ActiveCell = Excel.ActiveCell.SpecialCells(xlLastCell);
	RowCount = ActiveCell.Row;
	ColumnCount = ActiveCell.Column;
	Для Column = 1 По ColumnCount Цикл
		ТабличныйДокумент.Область("C" + Формат(Column, "ЧГ=")).ШиринаКолонки = ExcelЛист.Columns(Column).ColumnWidth;
	КонецЦикла;
	Для Row = 1 По RowCount Цикл
		
		Для Column = 1 По ColumnCount Цикл
			ТабличныйДокумент.Область("R" + Формат(Row, "ЧГ=") +"C" + Формат(Column, "ЧГ=")).Текст = ExcelЛист.Cells(Row,Column).Text;
		КонецЦикла;
		
	КонецЦикла;
	
	Excel.WorkBooks.Close();
	Excel = 0;
	
	Возврат Истина;
	
КонецФункции // ()

// Функция считывает в табличный документ данные из файла в формате TXT
//
// Параметры:
//  ТабличныйДокумент  - ТабличныйДокумент, в который необходимо прочитать данные
//  ИмяФайла           - имя файла в формате TXT, из которого необходимо прочитать данные
//
// Возвращаемое значение:
//  Истина, если файл прочитан, Ложь - иначе
//
&НаКлиенте
Функция мПрочитатьТабличныйДокументИзТекста(ИмяФайла) Экспорт
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Попытка
		ТекстовыйДокумент.Прочитать(ИмяФайла);
	Исключение
		Сообщить("Ошибка открытия файла!");
		Возврат Ложь;
	КонецПопытки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Для ТекущаяСтрока = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		ТекущаяКолонка = 0;
		Для каждого Значение Из мРазложитьСтрокуВМассивПодстрок(ТекстовыйДокумент.ПолучитьСтроку(ТекущаяСтрока),Символы.Таб) Цикл
			ТекущаяКолонка = ТекущаяКолонка + 1;
			ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ()

// Функция считывает в табличный документ данные из файла в формате dBase III (*.dbf)
//
// Параметры:
//  ТабличныйДокумент  - ТабличныйДокумент, в который необходимо прочитать данные
//  ИмяФайла           - имя файла в формате TXT, из которого необходимо прочитать данные
//
// Возвращаемое значение:
//  Истина, если файл прочитан, Ложь - иначе
//
&НаКлиенте
Функция мПрочитатьТабличныйДокументИзDBF(ИмяФайла) Экспорт
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	
	XBase  = Новый XBase;
	XBase.Кодировка = КодировкаXBase.OEM;
	Попытка
		XBase.ОткрытьФайл(ИмяФайла);
	Исключение
		Сообщить("Ошибка открытия файла!");
		Возврат Ложь;
	КонецПопытки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТекущаяСтрока = 1;
	
	
	ТекущаяКолонка = 0;
	Для каждого Поле Из XBase.поля Цикл
		ТекущаяКолонка = ТекущаяКолонка + 1;
		ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = Поле.Имя;
	КонецЦикла;
	
	
	Рез = XBase.Первая();
	Пока Не XBase.ВКонце() Цикл
		ТекущаяСтрока = ТекущаяСтрока + 1;
		
		ТекущаяКолонка = 0;
		Для каждого Поле Из XBase.поля Цикл
			ТекущаяКолонка = ТекущаяКолонка + 1;
			ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = XBase.ПолучитьЗначениеПоля(ТекущаяКолонка - 1);
		КонецЦикла;
		
		XBase.Следующая();
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ()


// Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция мПрочитатьТабличныйДокументИзCSV(ИмяФайла) Экспорт
	
	// Сообщение = Новый СообщениеПользователю();
	//	Сообщение.Текст = Строка(ИмяФайла);
	//	//Сообщение.Поле = "ПолеФормы";
	//	Сообщение.Сообщить();
	//
	//ВыбФайл = Новый Файл(ИмяФайла);
	//Если НЕ ВыбФайл.Существует() Тогда
	//	Сообщить("Файл не существует!");
	//	Возврат Ложь;
	//КонецЕсли;
	
	Разделитель = ";";

	
	//очищаем таблицу и удаляем колонки 
	
	Таблица = Новый  ТабличныйДокумент;
	//Таблица.Очистить();
	//Таблица.Колонки.Очистить();
	//ЭлементыФормы.Таблица.Колонки.Очистить();
	
	// чтение файла
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(ИмяФайла);
	
	//шапка по умолчанию 1 строка, из первой строки делаем колонки таблицы
	Шапка = ЗагружаемыйФайл.ПолучитьСтроку(1);
	
	//раскладываем строку в массив
	МассивКолонок = РазложитьСтрокуВМассивПодстрок(Шапка,Разделитель);
	
	//генерируем колонки
	ТекущаяСтрока = 1;
	//
	//
	ТекущаяКолонка = 0;

	
	
	Для Каждого ИмяКолонки Из МассивКолонок Цикл
		
		ИмяБезПробелов = СтрЗаменить(ИмяКолонки," ",""); // убираем из имени колонок пробелы
		//Таблица.Колонки.Добавить(ИмяБезПробелов,,ИмяКолонки); 		
		//НоваяКолонка = ЭлементыФормы.Таблица.Колонки.Добавить(ИмяБезПробелов, ИмяКолонки);
		//НоваяКолонка.Данные = ИмяБезПробелов;
		
			ТекущаяКолонка = ТекущаяКолонка + 1;
			ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = ИмяКолонки;

		
	КонецЦикла;
	
	
	Для НомерСтроки=2 по ЗагружаемыйФайл.КоличествоСтрок() Цикл
		ТекущаяСтрока=ТекущаяСтрока+1;
		Состояние("Обрабатывается "+Строка(Формат(?(ЗагружаемыйФайл.КоличествоСтрок()=0,0,((100*НомерСтроки)/ЗагружаемыйФайл.КоличествоСтрок())),"ЧЦ=3; ЧДЦ=0"))+" %");
		ОбработкаПрерыванияПользователя(); //указав данный оператор, цикл можно прервать в любой момент нажатие ctrl+break
		
		// получить строку файла с указанным номером и преобразуем её в массив
		Строка = ЗагружаемыйФайл.ПолучитьСтроку(НомерСтроки);
		МассивКолонок = РазложитьСтрокуВМассивПодстрок(Строка,Разделитель);
		//НоваяСтрока = Таблица.Добавить();
		//
		//Если МассивКолонок.Количество() <> Таблица.Колонки.Количество() Тогда
		//	Сообщить("Ошибка со строкой " + Строка);
		//	Продолжить; // скорее всего в тексте содержит разделитель
		//КонецЕсли;
		//
		//Для НомерКолонки = 1 по МассивКолонок.Количество() Цикл 
		//	//заполняем строку значениями
		//	ТекущееЗначение = МассивКолонок[НомерКолонки-1];
		//	ИмяКолонки = Таблица.Колонки[НомерКолонки-1].Имя; 			
		//	НоваяСтрока[ИмяКолонки] = ТекущееЗначение;			
		//КонецЦикла;  
		
		
		ТекущаяКолонка = 0;

	
	
	Для Каждого ИмяКолонки Из МассивКолонок Цикл
		
		ИмяБезПробелов = СтрЗаменить(ИмяКолонки," ",""); // убираем из имени колонок пробелы
		//Таблица.Колонки.Добавить(ИмяБезПробелов,,ИмяКолонки); 		
		//НоваяКолонка = ЭлементыФормы.Таблица.Колонки.Добавить(ИмяБезПробелов, ИмяКолонки);
		//НоваяКолонка.Данные = ИмяБезПробелов;
		
			ТекущаяКолонка = ТекущаяКолонка + 1;
			ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = ИмяКолонки;

		
	КонецЦикла;
		
		
		
		
	КонецЦикла;  
	
	
	//XBase  = Новый XBase;
	//XBase.Кодировка = КодировкаXBase.OEM;
	//Попытка
	//	XBase.ОткрытьФайл(ИмяФайла);
	//Исключение
	//	Сообщить("Ошибка открытия файла!");
	//	Возврат Ложь;
	//КонецПопытки;
	//
	//ТабличныйДокумент = Новый ТабличныйДокумент;
	//ТекущаяСтрока = 1;
	//
	//
	//ТекущаяКолонка = 0;
	//Для каждого Поле Из XBase.поля Цикл
	//	ТекущаяКолонка = ТекущаяКолонка + 1;
	//	ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = Поле.Имя;
	//КонецЦикла;
	//
	//
	//Рез = XBase.Первая();
	//Пока Не XBase.ВКонце() Цикл
	//	ТекущаяСтрока = ТекущаяСтрока + 1;
	//	
	//	ТекущаяКолонка = 0;
	//	Для каждого Поле Из XBase.поля Цикл
	//		ТекущаяКолонка = ТекущаяКолонка + 1;
	//		ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = XBase.ПолучитьЗначениеПоля(ТекущаяКолонка - 1);
	//	КонецЦикла;
	//	
	//	XBase.Следующая();
	//КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ()



&НаСервере
Процедура ПрочитатьТабличныйДокументИзMXLНаСервере(АдресХранилища)

	Данные = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ИмяФайлаВременное = ПолучитьИмяВременногоФайла("mxl");
	
	Данные.Записать(ИмяФайлаВременное);
	ТабличныйДокумент.Прочитать(ИмяФайлаВременное);
	УдалитьФайлы(ИмяФайлаВременное);
	
КонецПроцедуры // ПрочитатьТабличныйДокументИзMXLНаСервере()

&НаКлиенте
Процедура мПрочитатьТабличныйДокументИзMXL(ИмяФайла)

	ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	
	АдресФайла = "";
	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, ЭтаФорма.УникальныйИдентификатор);
	
	ПрочитатьТабличныйДокументИзMXLНаСервере(АдресФайла);

КонецПроцедуры // ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ВИДИМОСТЬЮ ЭЛЕМЕНТОВ И ОТОБРАЖЕНИЯ ДАННЫХ

&НаКлиенте
// Процедура управляет видимостью элементов управления
//
Процедура УправлениеВидимостью()
	
	Если Не Элементы.ГруппаПанельРежима.ТекущаяСтраница = Элементы.ГруппаПанельРежима.ПодчиненныеЭлементы[РежимЗагрузки] Тогда
		Элементы.ГруппаПанельРежима.ТекущаяСтраница = Элементы.ГруппаПанельРежима.ПодчиненныеЭлементы[РежимЗагрузки];
	КонецЕсли;
		
	УстановитьВидимостьКомандНаПанелях();
	
	Элементы.ДобавитьЗагрузкуВладельца.Видимость = РежимЗагрузки = 0;	
	Элементы.ДобавитьДополнительнуюТЧ.Видимость = ЗначениеЗаполнено(ТабличнаяЧастьИсточника);
	Элементы.ДобавитьДополнительныйРегистр.Видимость = ЗначениеЗаполнено(РегистрДокумента);
	
КонецПроцедуры // УправлениеВидимостью()

&НаСервере
// Процедура управляет видимостью элементов управления на каждой из программно созданных панелях настроек
//
Процедура УстановитьВидимостьКомандНаПанелях()
	
	ДоступностьКнопкиСохранитьЗначения    = ЕстьВыбранныеМетаданные();

	Для каждого КлючИЗначение Из ТаблицыНастроек Цикл
		Элементы[КлючИЗначение.Значение + "НомерКолонки"].Видимость = РучнаяНумерацияКолонокТабличногоДокумента;
		Элементы[КлючИЗначение.Значение + "ПеренумероватьКолонки"].Видимость = РучнаяНумерацияКолонокТабличногоДокумента;		
		
		Элементы[КлючИЗначение.Значение + "СохранитьНастройки"].Доступность = ДоступностьКнопкиСохранитьЗначения;
		Элементы[КлючИЗначение.Значение + "СохранитьЗначенияВФайл"].Доступность = ДоступностьКнопкиСохранитьЗначения;
		
		Элементы[КлючИЗначение.Значение + "ВосстановитьНастройки"].Доступность = (СписокСохраненныхНастроек.Количество() <> 0);		
		
		Если Не КлючИЗначение.ДопНастройки И НЕ КлючИЗначение.ЗагружаетсяДоОбъекта Тогда
			Элементы[КлючИЗначение.Значение + "ПолеПоиска"].Видимость = (РежимЗагрузки = 0) ИЛИ (РежимЗагрузки = 2) ИЛИ (РежимЗагрузки = 5);
		ИначеЕсли КлючИЗначение.ЗагружаетсяДоОбъекта Тогда
			Элементы[КлючИЗначение.Значение + "ПолеПоиска"].Видимость = Истина;	
		Иначе
			Элементы[КлючИЗначение.Значение + "ПолеПоиска"].Видимость = (РежимЗагрузки = 0);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
// Процедура выполняет установку реквизитов, связанных с источником данных
//
Процедура УстановитьИсточник()
	
	Источник        = Неопределено;
	ОбъектИсточника = Неопределено;
	ПрошлыйМетаданныеСсылкиИсточника = Неопределено;
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	ОчиститьТаблицуПодготовленныхДанных();
	ПродолжитьНастройкуНаСервере();
	
// Qwinter ***********************************************************************************************	
	Если ((РежимЗагрузки = 1) ИЛИ (РежимЗагрузки = 5)) И Не СсылкаИсточника = Неопределено Тогда
		ПрошлыйМетаданныеСсылкиИсточника = СсылкаИсточника.Метаданные();
	ИначеЕсли (РежимЗагрузки = 3 ИЛИ РежимЗагрузки = 4) И Не СсылкаДокумента = Неопределено Тогда
	    ПрошлыйМетаданныеСсылкиИсточника = СсылкаДокумента.Метаданные();
		ЗаполнитьВТаблицуЗначенийДвиженияРегистраДокумента();
	КонецЕсли;
// Qwinter ***********************************************************************************************

	Если МетаданныеИсточника = Неопределено Тогда
		ЭтаФорма["ТаблицаЗагружаемыхРеквизитов"].Очистить();
	Иначе
		Врем = мВосстановитьЗначение(МетаданныеИсточника.ПолноеИмя(), ИдентификаторОбработки);
		ЗаполнитьНастройкиКолонок();
	КонецЕсли;
		
	ОбновитьДанныеТабличногоДокументаСервер();
	
	ТЗ = РеквизитФормыВЗначение("ТаблицаЗагружаемыхРеквизитов");
		
КонецПроцедуры

&НаСервере
// Процедура выполняет инициализацию служебных переменных и констант модуля
//
Процедура Инициализация()	
	
	ДополнительныеСвойства = Новый Структура;
	
	ДополнительныеСвойства.Вставить("ПримитивныеТипы", Новый Структура ("Число, Строка, Дата, Булево",
	Тип("Число"), Тип("Строка"), Тип("Дата"), Тип("Булево")));
	
	Если ПерваяСтрокаДанныхТабличногоДокумента < 2 Тогда
		ПерваяСтрокаДанныхТабличногоДокумента = 2;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("Колонки", Новый Структура);

КонецПроцедуры // ()

&НаСервере
// Функция выполняет загрузку данных и возврат результат когда обработка подключена как обработка заполнения объекта
//
Функция ВыполнитьКомандуНапрямую(ИдентификаторКоманды, ПараметрыКоманды, Результат = Неопределено)
	Выполнить("Результат = ДополнительныеОтчетыИОбработки.ВыполнитьКомандуИзФормыВнешнегоОбъекта(ИдентификаторКоманды, ПараметрыКоманды, ЭтаФорма)"); 
	Возврат Результат;
КонецФункции

&НаСервере
// Процедура восстанавливает видимость таблиц настроек
//
Процедура ПродолжитьНастройкуНаСервере()
	
	Для каждого КлючИЗначение Из ТаблицыНастроек Цикл
		Элементы[КлючИЗначение.Ключ].Видимость = Истина;	
	КонецЦикла;
	Элементы.ПродолжитьНастройку.Видимость = Ложь;
	Элементы.Загрузить.Видимость = Ложь;
	Элементы.КонтрольЗаполнения.КнопкаПоУмолчанию = Истина;
	
	ОчиститьТаблицуПодготовленныхДанных();

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура КомандаЗагрузить(Команда)
	
	СтруктураТекстВопроса = ПолучитьТекстВопросаИсточника();
	КоличествоЭлементов = ТаблицаПодготовленныхДанных.Количество();
	Если НЕ ПустаяСтрока(СтруктураТекстВопроса.Ошибка) Тогда
		Предупреждение(СтруктураТекстВопроса.Ошибка);
	ИначеЕсли Вопрос("Загрузить "+КоличествоЭлементов  + СтруктураТекстВопроса.ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ОчиститьСообщения();
		ЗагрузитьДанныеСервер();
	КонецЕсли;
	
	Если ВыполняетсяЗаполнениеТЧОбъекта Тогда
		ПараметрыКоманды = Новый Структура("ДополнительнаяОбработкаСсылка, ОбъектыНазначения, СопровождающийТекст");
		ПараметрыКоманды.ДополнительнаяОбработкаСсылка = ОбъектСсылка;
		ПараметрыКоманды.СопровождающийТекст = "";
		
		Состояние(ПараметрыКоманды.СопровождающийТекст);
		
		РезультатВыполнения = ВыполнитьКомандуНапрямую(ИдентификаторКоманды, ПараметрыКоманды);
		ЗагрузитьРезультат(РезультатВыполнения);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультат(РезультатВыполнения)
	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") И ЭтоФормаОбъекта Тогда
		ВладелецФормы.Прочитать();
	КонецЕсли;
	
	Выполнить("ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ВладелецФормы, РезультатВыполнения)");

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрыть(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок = "Прочитать табличный документ из файла";
	ДиалогВыбораФайла.Фильтр    = "Табличный документ CSV (*.csv)|*.csv|Табличный документ (*.mxl)|*.mxl|Лист Excel (*.xls)|*.xls|Текстовый документ (*.txt)|*.txt|dBase III (*.dbf)|*.dbf|";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ТабличныйДокумент = Элементы.ТабДокумент;
		ФайлНаДиске = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		Если нРег(ФайлНаДиске.Расширение) = ".mxl" Тогда
			мПрочитатьТабличныйДокументИзMXL(ДиалогВыбораФайла.ПолноеИмяФайла);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".xls" Тогда
			мПрочитатьТабличныйДокументИзExcel(ДиалогВыбораФайла.ПолноеИмяФайла);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".txt" Тогда
			мПрочитатьТабличныйДокументИзТекста(ДиалогВыбораФайла.ПолноеИмяФайла);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".dbf" Тогда
			мПрочитатьТабличныйДокументИзDBF(ДиалогВыбораФайла.ПолноеИмяФайла);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".csv" Тогда
			мПрочитатьТабличныйДокументИзCSV(ДиалогВыбораФайла.ПолноеИмяФайла);	
		КонецЕсли;
		УправлениеВидимостью();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранить(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	ДиалогВыбораФайла.Заголовок = "Сохранить табличный документ в файл";
	ДиалогВыбораФайла.Фильтр    = "Табличный документ (*.mxl)|*.mxl|Лист Excel (*.xls)|*.xls|Текстовый документ (*.txt)|*.txt|";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ТабличныйДокумент = Элементы.ТабДокумент;
		ФайлНаДиске = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		Если нРег(ФайлНаДиске.Расширение) = ".mxl" Тогда
			ТабличныйДокумент.Записать(ДиалогВыбораФайла.ПолноеИмяФайла,ТипФайлаТабличногоДокумента.MXL);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".xls" Тогда
			ТабличныйДокумент.Записать(ДиалогВыбораФайла.ПолноеИмяФайла,ТипФайлаТабличногоДокумента.XLS);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".txt" Тогда
			ТабличныйДокумент.Записать(ДиалогВыбораФайла.ПолноеИмяФайла,ТипФайлаТабличногоДокумента.TXT);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновить(Команда)
	ОбновитьДанныеТабличногоДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТаблицуДанных(Команда)
	
	ПолучитьТаблицуДанныхНаСервере();
	
	Элементы.ГруппаЗагрузкаНастройка.ТекущаяСтраница = Элементы.ТаблицаДанных;
	Элементы.ПродолжитьНастройку.Видимость = Истина;
	Элементы.Загрузить.Видимость = Истина;
	Элементы.Загрузить.КнопкаПоУмолчанию = Истина;	
	Элементы.РежимЗагрузки.ТолькоПросмотр = Истина;
	Элементы.СсылкаИсточника.ТолькоПросмотр = Истина;
	Элементы.СсылкаДокумента.ТолькоПросмотр = Истина;
	Элементы.ИмяВидаРегистра.ТолькоПросмотр = Истина;
	Элементы.ТабличнаяЧастьИсточника.ТолькоПросмотр = Истина;
	Элементы.ТипОбъекта.ТолькоПросмотр = Истина;
	Элементы.РегистрДокумента.ТолькоПросмотр = Истина;
	Элементы.ПЗ_СсылкаИсточника.ТолькоПросмотр = Истина;
	
	Для каждого КлючИЗначение Из ТаблицыНастроек Цикл
		Элементы[КлючИЗначение.Ключ].Видимость = Ложь;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСледующееПримечание(Команда)
	
	//ТабличныйДокумент = Элементы.ТабДокумент;
	
	Нашли = Ложь;
	
	Колонка = ТабличныйДокумент.ТекущаяОбласть.Лево + 1;
	Строка  = ТабличныйДокумент.ТекущаяОбласть.Верх;
	
	Пока Не Нашли и Строка <= ТабличныйДокумент.ВысотаТаблицы Цикл
		
		Пока Не Нашли и Колонка <=  ТабличныйДокумент.ШиринаТаблицы Цикл
			
			Область = ТабличныйДокумент.Область("R" + Формат(Строка, "ЧГ=") + "C" + Формат(Колонка, "ЧГ="));
			Нашли = Не ПустаяСтрока(Область.Примечание.Текст);
			
			Колонка = Колонка + 1;
		КонецЦикла;
		Строка = Строка + 1;
		Колонка = 1;
	КонецЦикла;
	
	Если Нашли Тогда
		ТабличныйДокумент.ТекущаяОбласть = Область;
	Иначе
		Предупреждение("Достигнут конец документа");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПредыдущееПримечание(Команда)
	
	//ТабличныйДокумент = Элементы.ТабДокумент;
	
	Нашли = Ложь;
	
	Колонка = ТабличныйДокумент.ТекущаяОбласть.Лево - 1;
	Строка  = ТабличныйДокумент.ТекущаяОбласть.Верх;
	
	Пока Не Нашли и Строка > 0 Цикл
		
		Пока Не Нашли и Колонка > 0 Цикл
			
			Область = ТабличныйДокумент.Область("R" + Формат(Строка, "ЧГ=") + "C" + Формат(Колонка, "ЧГ="));
			Нашли = Не ПустаяСтрока(Область.Примечание.Текст);
			
			Колонка = Колонка - 1;
		КонецЦикла;
		Строка = Строка - 1;
		Колонка = ТабличныйДокумент.ШиринаТаблицы;
	КонецЦикла;
	
	Если Нашли Тогда
		ТабличныйДокумент.ТекущаяОбласть = Область;
	Иначе
		Предупреждение("Достигнуто начало документа");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВосстановитьЗначенияИзФайла(Команда)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ЗаголовокДиалога = "Открыть статус выполнения из файла";
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Фильтр = "Настройка универсальной загрузки (*.qxlz)|*.qxlz";
	ДиалогОткрытияФайла.Заголовок = ЗаголовокДиалога;
	ДиалогОткрытияФайла.Фильтр = Фильтр;	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Файл = ДиалогОткрытияФайла.ПолноеИмяФайла;
		
		файлТекстовый = Новый ДвоичныеДанные(Файл);	
		АдресХранилища = ПоместитьВоВременноеХранилище(файлТекстовый, Новый УникальныйИдентификатор);
		
		ВосстановитьТаблицу(АдресХранилища);
	КонецЕсли;
	
	ОбновитьДанныеТабличногоДокумента(Истина);
	УправлениеВидимостью();

КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьЗначенияВФайл(Команда)
	
	Таблицы = Новый СписокЗначений;
	
	Таблицы.Добавить("ТекущаяВерсия");
	Таблицы.Добавить("ЗамещатьСуществующиеЗаписи");
	Таблицы.Добавить("ИмяВидаРегистра");
	Таблицы.Добавить("Колонка_ПриИзмененииСоздатьДокумент");
	Таблицы.Добавить("НеСоздаватьНовыхЭлементов");
	Таблицы.Добавить("ПерваяСтрокаДанныхТабличногоДокумента");
	Таблицы.Добавить("ПередЗаписьюОбъекта");
	Таблицы.Добавить("ПослеДобавленияСтроки");
	Таблицы.Добавить("ПриЗаписиОбъекта");
	Таблицы.Добавить("ПослеЗаписиОбъекта");
	Таблицы.Добавить("РежимЗагрузки");
	Таблицы.Добавить("РучнаяНумерацияКолонокТабличногоДокумента");
	Таблицы.Добавить("СсылкаДокумента");
	Таблицы.Добавить("СсылкаИсточника");
	Таблицы.Добавить("ТабличнаяЧастьИсточника");
	Таблицы.Добавить("ТипОбъектаСправочника");
	Таблицы.Добавить("РегистрДокумента");
	Таблицы.Добавить("ТаблицыНастроек");
	
	Для каждого КлючИЗначение Из ТаблицыНастроек Цикл
		Таблицы.Добавить(КлючИЗначение.Значение);	
	КонецЦикла;
	
	СохранитьТаблицуВФайл(Таблицы);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	ФормаНастроек = ПолучитьФорму(ИдентификаторОбработки+".Форма.ФормаСохраненияНастройки", ,ЭтаФорма);
	
	Если СписокСохраненныхНастроек.Количество() = 0 Тогда
		ТекущиеДанные = ФормаНастроек.СписокНастроек.Добавить();
		ТекущиеДанные.Представление = "Основная";
		ФормаНастроек.СоздавалиНовуюСтроку = Истина;
	Иначе
		ФормаНастроек.СоздавалиНовуюСтроку = Ложь;
		Для каждого строка Из СписокСохраненныхНастроек Цикл
			ЗаполнитьЗначенияСвойств(ФормаНастроек.СписокНастроек.Добавить(), Строка);		
		КонецЦикла;
	КонецЕсли;
		
	ФормаНастроек.ИдентификаторОбработки = ИдентификаторОбработки;
	
	ФормаНастроек.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройки(Команда)
	
	ФормаНастроек = ПолучитьФорму(ИдентификаторОбработки+".Форма.ФормаВыбораНастройки", ,ЭтаФорма);
	
	Для каждого строка Из СписокСохраненныхНастроек Цикл
		ЗаполнитьЗначенияСвойств(ФормаНастроек.СписокНастроек.Добавить(), Строка);		
	КонецЦикла;
	
	ФормаНастроек.ИдентификаторОбработки = ИдентификаторОбработки;
	
	ФормаНастроек.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеречитать(Команда)
	ЗаполнитьНастройкиКолонок();
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьФлажки(Команда)
	
	стр = Новый Структура("Ключ", Элементы.ГруппаЗагрузкаНастройка.ТекущаяСтраница.Имя);
	СтрокаНастроек = ТаблицыНастроек.НайтиСтроки(стр);	
	Если СтрокаНастроек.Количество() > 0 Тогда
		Для каждого ЗагружаемыйРеквизит Из ЭтаФорма[СтрокаНастроек[0].Значение] Цикл
			ЗагружаемыйРеквизит.Пометка = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьФлажки(Команда)
	
	стр = Новый Структура("Ключ", Элементы.ГруппаЗагрузкаНастройка.ТекущаяСтраница.Имя);
	СтрокаНастроек = ТаблицыНастроек.НайтиСтроки(стр);	
	Если СтрокаНастроек.Количество() > 0 Тогда
		Для каждого ЗагружаемыйРеквизит Из ЭтаФорма[СтрокаНастроек[0].Значение] Цикл
			Если НЕ ЗагружаемыйРеквизит.НеУбиратьПометку Тогда
				ЗагружаемыйРеквизит.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРучнаяНумерацияКолонокТабличногоДокумента(Команда)
	
	Для каждого КлючИЗначение Из ТаблицыНастроек Цикл
		Элементы[КлючИЗначение.Значение + "РучнаяНумерацияКолонокТабличногоДокумента"].Пометка = НЕ Элементы[КлючИЗначение.Значение + "РучнаяНумерацияКолонокТабличногоДокумента"].Пометка;
		РучнаяНумерацияКолонокТабличногоДокумента = Элементы[КлючИЗначение.Значение + "РучнаяНумерацияКолонокТабличногоДокумента"].Пометка;	
	КонецЦикла;
	
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеренумероватьКолонки(Команда)
	
	НомерКолонки = 1;
	
	Для каждого КлючИЗначение Из ТаблицыНастроек Цикл
		Для каждого Реквизит Из ЭтаФорма[КлючИЗначение.Значение] Цикл
			Если Реквизит.Пометка И Реквизит.РежимЗагрузки <> "Устанавливать" Тогда
				Если Не Реквизит.НомерКолонки = НомерКолонки Тогда
					Реквизит.НомерКолонки = НомерКолонки;
				КонецЕсли;
				НомерКолонки = НомерКолонки + 1;
			Иначе
				Реквизит.НомерКолонки = 0;
			КонецЕсли;
			
			Если Реквизит.НомерКолонки = 0 И Реквизит.РежимЗагрузки = "Искать" Тогда
				Реквизит.РежимЗагрузки = "Устанавливать"
			ИначеЕсли Не Реквизит.НомерКолонки = 0 И Реквизит.РежимЗагрузки = "Устанавливать" Тогда
				Реквизит.РежимЗагрузки = "Искать"
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаСобытия(Команда)
	
	ФормаРедактированиеСобытий = ПолучитьФорму(ИдентификаторОбработки+".Форма.ФормаРедактированияСобытий", ,ЭтаФорма);
	
	ФормаРедактированиеСобытий.РежимЗагрузки = РежимЗагрузки;
	
	ФормаРедактированиеСобытий.ПередЗаписьюОбъекта	.УстановитьТекст(ПередЗаписьюОбъекта);
	ФормаРедактированиеСобытий.ПриЗаписиОбъекта		.УстановитьТекст(ПриЗаписиОбъекта);
	ФормаРедактированиеСобытий.ПослеДобавленияСтроки.УстановитьТекст(ПослеДобавленияСтроки);
	ФормаРедактированиеСобытий.ПослеЗаписиОбъекта.УстановитьТекст(ПослеЗаписиОбъекта);
	
	ФормаРедактированиеСобытий.Открыть();
		
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ФормаНастроек = ПолучитьФорму(ИдентификаторОбработки+".Форма.ФормаНастроек", ,ЭтаФорма);
	ФормаНастроек.ЗамещатьСуществующиеЗаписи = ЗамещатьСуществующиеЗаписи;
	ФормаНастроек.НеСоздаватьНовыхЭлементов = НеСоздаватьНовыхЭлементов;
	ФормаНастроек.ПерваяСтрокаДанныхТабличногоДокумента = ПерваяСтрокаДанныхТабличногоДокумента;
	ФормаНастроек.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьОбновления(Команда)
	Элементы.ПроверятьОбновления.Пометка = НЕ Элементы.ПроверятьОбновления.Пометка;
	ПроверятьОбновления = Элементы.ПроверятьОбновления.Пометка;	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьНастройку(Команда)
	
	Элементы.РежимЗагрузки.ТолькоПросмотр = Ложь;
	Элементы.СсылкаИсточника.ТолькоПросмотр = Ложь;
	Элементы.СсылкаДокумента.ТолькоПросмотр = Ложь;
	Элементы.ИмяВидаРегистра.ТолькоПросмотр = Ложь;
	Элементы.ТабличнаяЧастьИсточника.ТолькоПросмотр = Ложь;
	Элементы.ТипОбъекта.ТолькоПросмотр = Ложь;
	Элементы.РегистрДокумента.ТолькоПросмотр = Ложь;
	Элементы.ПЗ_СсылкаИсточника.ТолькоПросмотр = Ложь;
	//Элементы.ПЗ_ТабличнаяЧастьИсточника.ТолькоПросмотр = Ложь;

	ПродолжитьНастройкуНаСервере();
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНастройкиДляЗагрузкиСправочникаИлиТЧ(Команда)
	
	ФормаДобавленияДополнительнойНастройки = ПолучитьФорму(ИдентификаторОбработки+".Форма.ФормаДобавленияДополнительнойНастройки", ,ЭтаФорма);
	
	Список = ФормаДобавленияДополнительнойНастройки.Элементы.ДобавляемыйОбъект.СписокВыбора;
	Список.Очистить();
    Для каждого сп Из СписокДобавляемыхСтраниц Цикл
		Список.Добавить(сп.Значение, сп.Представление);	
	КонецЦикла;
	Если РежимЗагрузки = 0 Тогда
		ФормаДобавленияДополнительнойНастройки.Элементы.ДобавляемыйОбъект.Заголовок = "Подчиненный справочник";	
	ИначеЕсли РежимЗагрузки = 1 ИЛИ РежимЗагрузки = 5 Тогда
		ФормаДобавленияДополнительнойНастройки.Элементы.ДобавляемыйОбъект.Заголовок = "Табличная часть";	
	КонецЕсли;
	
	ФормаДобавленияДополнительнойНастройки.Открыть();
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНастройкиДляЗагрузкиРегистра(Команда)
	
	ФормаДобавленияДополнительнойНастройки = ПолучитьФорму(ИдентификаторОбработки+".Форма.ФормаДобавленияДополнительнойНастройки", ,ЭтаФорма);
	
	Список = ФормаДобавленияДополнительнойНастройки.Элементы.ДобавляемыйОбъект.СписокВыбора;
	Список.Очистить();
    Для каждого сп Из СписокДобавляемыхСтраницРегистры Цикл
		Список.Добавить(сп.Значение, сп.Представление);	
	КонецЦикла;
	
	ФормаДобавленияДополнительнойНастройки.Элементы.ДобавляемыйОбъект.Заголовок = "Регистр";	
	ФормаДобавленияДополнительнойНастройки.ЭтоРегистр = Истина;
	
	ФормаДобавленияДополнительнойНастройки.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредЗагрузкуСправочника(Команда)
	
	ФормаДобавленияДополнительнойНастройки = ПолучитьФорму(ИдентификаторОбработки+".Форма.ФормаДобавленияДополнительнойНастройки", ,ЭтаФорма);
	
	Список = ФормаДобавленияДополнительнойНастройки.Элементы.ДобавляемыйОбъект.СписокВыбора;
	Список.Очистить();
    Для каждого сп Из Элементы.ТипОбъекта.СписокВыбора Цикл
		Список.Добавить(сп.Значение, сп.Представление);	
	КонецЦикла;
	
	ФормаДобавленияДополнительнойНастройки.Элементы.ДобавляемыйОбъект.Заголовок = "Справочник";	
	ФормаДобавленияДополнительнойНастройки.ЗагружаетсяДоОбъекта = Истина;
	
	ФормаДобавленияДополнительнойНастройки.Открыть();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЁННЫЕ ОБРАБОТЧИКИ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	ИдентификаторОбработки = ОбъектОбработка.Метаданные().ПолноеИмя();	
	ИмяФайлаОбработки = ОбъектОбработка.ИспользуемоеИмяФайла;
		
	ПроверятьОбновления 	= Истина;
	
	РежимЗагрузки           = мВосстановитьЗначение("РежимЗагрузки", ИдентификаторОбработки);		
	ИмяВидаРегистра         = мВосстановитьЗначение("ИмяВидаРегистра", ИдентификаторОбработки);
	ТипОбъектаСправочника   = мВосстановитьЗначение("ТипОбъектаСправочника", ИдентификаторОбработки);
	СсылкаИсточника         = мВосстановитьЗначение("СсылкаИсточника", ИдентификаторОбработки);
	РегистрДокумента    	= мВосстановитьЗначение("РегистрДокумента", ИдентификаторОбработки);
	СсылкаДокумента   		= мВосстановитьЗначение("СсылкаДокумента", ИдентификаторОбработки);
	ТабличнаяЧастьИсточника = мВосстановитьЗначение("ТабличнаяЧастьИсточника", ИдентификаторОбработки);
	ПроверятьОбновления		= мВосстановитьЗначение("ПроверятьОбновления", ИдентификаторОбработки);
	
	ОчиститьТаблицыНастроек();
	
	СписокДокументов = Элементы.ПЗ_СсылкаИсточника.СписокВыбора;	
	Для каждого ОбъектМетаданных Из Метаданные.Документы Цикл
		СписокДокументов.Добавить(Документы[ОбъектМетаданных.Имя].ПустаяСсылка(), ОбъектМетаданных.Представление());
	КонецЦикла;
	
	Для каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
		СписокДокументов.Добавить(Справочники[ОбъектМетаданных.Имя].ПустаяСсылка(), ОбъектМетаданных.Представление());
	КонецЦикла;
	СписокДокументов.СортироватьПоПредставлению();
	
	Для каждого МДСправочник Из Метаданные.Справочники Цикл
		Элементы.ТипОбъекта.СписокВыбора.Добавить(МДСправочник.Имя, МДСправочник.Синоним);
	КонецЦикла;
	                
	МДНезависимый = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый;
	Для каждого МДРегистрСведений Из Метаданные.РегистрыСведений Цикл
		Если МДРегистрСведений.РежимЗаписи = МДНезависимый Тогда
			Элементы.ИмяВидаРегистра.СписокВыбора.Добавить(МДРегистрСведений.Имя, МДРегистрСведений.Синоним);
		КонецЕсли; 
	КонецЦикла;
	
	Типы = Новый Массив;
	ВидыТипов = Новый Структура("Справочники,Документы");
	Для каждого КлючИЗначение Из ВидыТипов Цикл
		Для каждого ОбъектМетаданных Из Метаданные[КлючИЗначение.Ключ] Цикл
			Если ОбъектМетаданных.ТабличныеЧасти.Количество() Тогда
				Типы.Добавить(Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(),".","Ссылка.")));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Элементы.СсылкаИсточника.ОграничениеТипа = Новый ОписаниеТипов(Типы);
	
	Попытка
		СсылкаИсточника = Параметры.ОбъектыНазначения[0];
		ИдентификаторКоманды = Параметры.ИдентификаторКоманды;
		РежимЗагрузки = 1;
		
		ИмяФормыВладельца = Параметры.ИмяФормы;
		ИнформацияОВладельце = Неопределено;
		Выполнить("ИнформацияОВладельце = ДополнительныеОтчетыИОбработкиПовтИсп.ПараметрыФормыНазначаемогоОбъекта(ИмяФормыВладельца)");
		
		СсылкаРодителя  = ИнформацияОВладельце.СсылкаРодителя;
		ЭтоФормаОбъекта = ИнформацияОВладельце.ЭтоФормаОбъекта;
	    ЭтаФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ВыполняетсяЗаполнениеТЧОбъекта = Истина;
		Элементы.Переместить(Элементы.КоманднаяПанельИфостарт, Элементы.ГруппаЗагрузкаВТабличнуюЧасть);
		Элементы.КоманднаяПанельИфостарт.РастягиватьПоГоризонтали = Ложь;
	Исключение
	    //ОписаниеОшибки()
	КонецПопытки;

	УстановитьСписокТабличныхЧастей();
		
	Инициализация();
	
	УстановитьИсточник();
	
	КоличествоСозданныхПодчиненныхНастроек = 0;
	
	Если РежимЗагрузки = 0 Тогда	
		ПолучитьПодчиненныеСправочники();			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	 НеПреобразовыватьАдрес = Истина; 

	
	
	
	ТекущаяВерсия = "2.6";
	Если ПроверятьОбновления Тогда
		НачатьПроверкуВерсий(Истина);
	КонецЕсли;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если Лев(СисИнфо.ВерсияПриложения, 3) = "8.3" Тогда
		Выполнить("Элементы.СсылкаИсточника.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;");
		Выполнить("Элементы.СсылкаДокумента.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;");
		ВерсияПлатформы83 = Истина;
	КонецЕсли;
		
	Элементы.ПроверятьОбновления.Пометка = ПроверятьОбновления;
	
	Если ВыполняетсяЗаполнениеТЧОбъекта Тогда	
		Элементы.РежимЗагрузки.Видимость = Ложь;
		Элементы.СсылкаИсточника.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ВосстановитьНастройкиПриОткрытии();
	
	ОбновитьДанныеТабличногоДокументаСервер();
	УправлениеВидимостью();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиПриОткрытии()
	
	Строка = СписокСохраненныхНастроек.НайтиСтроки(Новый Структура("Пометка", Истина));	

	Если ЗначениеЗаполнено(Строка) Тогда
		СостояниеВыполнения = мВосстановитьЗначение("Настройки:"+ Строка[0].Представление, ИдентификаторОбработки);
		ВосстановитьНастройкиИзСостоянияВыполнения(СостояниеВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УдаленаНастройка" Тогда
		Строки = СписокСохраненныхНастроек.НайтиСтроки(Новый Структура("Представление", Параметр));
		Для каждого строка Из Строки Цикл
			СписокСохраненныхНастроек.Удалить(Строка);	
		КонецЦикла;
	ИначеЕсли ИмяСобытия = "УстановленаНастройкаПоУмолчанию" Тогда
		Строки = СписокСохраненныхНастроек.НайтиСтроки(Новый Структура("Представление", Параметр.Представление));
		Если Строки.Количество() > 0 Тогда
			ТекущиеДанные = Строки[0];
			ТекущиеДанные.Пометка = Параметр.Пометка;	
			Если ТекущиеДанные.Пометка Тогда
				Для каждого ЭлементСписка Из СписокСохраненныхНастроек Цикл
					Если ЭлементСписка.Пометка и Не ЭлементСписка = ТекущиеДанные Тогда
						ЭлементСписка.Пометка = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()

	мСохранитьЗначение("РежимЗагрузки",	РежимЗагрузки, ИдентификаторОбработки);
	мСохранитьЗначение("СсылкаИсточника", СсылкаИсточника, ИдентификаторОбработки);
	мСохранитьЗначение("ТабличнаяЧастьИсточника", ТабличнаяЧастьИсточника, ИдентификаторОбработки);
	мСохранитьЗначение("ИмяВидаРегистра", ИмяВидаРегистра, ИдентификаторОбработки);
	мСохранитьЗначение("ТипОбъектаСправочника", ТипОбъектаСправочника, ИдентификаторОбработки);	
	мСохранитьЗначение("РегистрДокумента", РегистрДокумента, ИдентификаторОбработки);
	мСохранитьЗначение("СсылкаДокумента", СсылкаДокумента, ИдентификаторОбработки);
	мСохранитьЗначение("ПроверятьОбновления", ПроверятьОбновления, ИдентификаторОбработки);
	
КонецПроцедуры // ПриЗакрытииНаСервере()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура РежимЗагрузкиПриИзменении(Элемент)
	
	ТипОбъектаСправочника	= Неопределено;
	СсылкаИсточника			= Неопределено;
	ИмяВидаРегистра			= Неопределено;
	ТабличнаяЧастьИсточника	= Неопределено;
	СсылкаДокумента 		= Неопределено;
	РегистрДокумента		= Неопределено;
	
	УстановитьСписокТабличныхЧастей();
	УстановитьИсточник();
	ОчиститьСозданныеСтраницы();
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаПриИзменении(Элемент)
	
	ОчиститьСозданныеСтраницы();
	УстановитьИсточник();
	УправлениеВидимостью();	
	ПолучитьПодчиненныеСправочники();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ПустаяСтрока(ТипОбъектаСправочника) Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ПолучитьФорму("Справочник."+ТипОбъектаСправочника+".ФормаСписка");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура СсылкаИсточникаПриИзменении(Элемент)
	
	ТабличнаяЧастьИсточника = "";
	УстановитьСписокТабличныхЧастей();
	Если РежимЗагрузки = 5 Тогда
		УстановитьСписокРегистров();	
	КонецЕсли;
	ОчиститьСозданныеСтраницы();		
	УстановитьИсточник();
	УправлениеВидимостью();
			
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьИсточникаПриИзменении(Элемент)
	
	ОчиститьСозданныеСтраницы();		
	УстановитьИсточник();
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяВидаРегистраПриИзменении(Элемент)
	УстановитьИсточник();
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура ИмяВидаРегистраОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ПустаяСтрока(ИмяВидаРегистра) Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ПолучитьФорму("РегистрСведений."+ИмяВидаРегистра+".ФормаСписка");
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура СсылкаДокументаПриИзменении(Элемент)
	
	СсылкаДокументаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СсылкаДокументаПриИзмененииНаСервере()
	
	РегистрДокумента = "";	
	Если РежимЗагрузки = 3 Тогда
		Если ПрошлыйМетаданныеСсылкиИсточника = Неопределено или СсылкаДокумента = Неопределено или Не ПрошлыйМетаданныеСсылкиИсточника = СсылкаДокумента.Метаданные() Тогда
			
			УстановитьСписокРегистров();
			УстановитьИсточник();
			ЗаполнитьВТаблицуЗначенийДвиженияРегистраДокумента();
			
		КонецЕсли;
	Иначе		
		Если ПрошлыйМетаданныеСсылкиИсточника = Неопределено или СсылкаИсточника = Неопределено или Не ПрошлыйМетаданныеСсылкиИсточника = СсылкаИсточника.Метаданные() Тогда
			
			УстановитьСписокТабличныхЧастей();
			УстановитьИсточник();
			
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТАБЛИЦЫ ЗНАЧЕНИЙ ЗАГРУЖАЕМЫХ РЕКВИЗИТОВ

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовОписаниеТиповНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = мПолучитьТекущиеДанныеСтраницыНастройки(СтандартнаяОбработка);
	
	Элемент.ДоступныеТипы = ТекДанные.ДоступныеТипы;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = мПолучитьТекущиеДанныеСтраницыНастройки(СтандартнаяОбработка);
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбораЗначенияПоУмолчанию = ПолучитьФорму(ИдентификаторОбработки+".Форма.ФормаВыбораЗначенияПоУмолчанию", ,ЭтаФорма);
	
	ФормаВыбораЗначенияПоУмолчанию.ЗначениеПоУмолчанию = ТекДанные.ЗначениеПоУмолчанию;
	ФормаВыбораЗначенияПоУмолчанию.НастройкаЗагрузки = ТекДанные.НастройкаЗагрузки;
	
	ФормаВыбораЗначенияПоУмолчанию.Элементы.ЗначениеПоУмолчанию.ОграничениеТипа = ТекДанные.ОписаниеТипов;	
			
	СписокВыбора = ФормаВыбораЗначенияПоУмолчанию.Элементы.НастройкаЗагрузки.СписокВыбора;	
	нСтруктура = Новый Структура("ЗагружаетсяДоОбъекта", Истина);
	ТЗ_ДопНастроек = ТаблицыНастроек.НайтиСтроки(нСтруктура); 	
	Для каждого Строка Из ТЗ_ДопНастроек Цикл
		Если ТекДанные.ОписаниеТипов.СодержитТип(Тип("СправочникСсылка."+Строка.Справочник)) Тогда
			СписокВыбора.Добавить(Строка.Значение, Строка.Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокВыбора.Количество() <> 0 Тогда
		ФормаВыбораЗначенияПоУмолчанию.Элементы.НастройкаЗагрузки.Видимость = Истина;
	Иначе
		ФормаВыбораЗначенияПоУмолчанию.Элементы.НастройкаЗагрузки.Видимость = Ложь;	
	КонецЕсли;

	ФормаВыбораЗначенияПоУмолчанию.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовПредставлениеДопУсловийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = мПолучитьТекущиеДанныеСтраницыНастройки(СтандартнаяОбработка);
	
	СтандартнаяОбработка = Ложь;
	Если ТекДанные.РежимЗагрузки = "Вычислять" Тогда
		ФормаРедактированияВыражения = ПолучитьФорму(ИдентификаторОбработки+".Форма.ФормаРедактированияВыражения", ,ЭтаФорма);
		
		ПолеТекстовогоДокумента = ФормаРедактированияВыражения.ПолеТекстовогоДокумента;
		ПолеТекстовогоДокумента.УстановитьТекст(ТекДанные.Выражение);
		
		ФормаРедактированияВыражения.Открыть();
	Иначе
		ДоступныеТипы	= ТекДанные.ОписаниеТипов;
		
		СписокВыбораВладельца	= ПолучитьСписокВыбора(ТекДанные.ИмяРеквизита, "СвязьПоВладельцу");
		СписокВыбораСвязейПоТипу = ПолучитьСписокВыбора(ТекДанные.ИмяРеквизита, "СвязьПоТипу");
		
		СписокВыбораИскатьПо = ПолучитьСписокИменПредставлений(ТекДанные.ОписаниеТипов);
		
		ФормаРедактированияСвязи = ПолучитьФорму(ИдентификаторОбработки+".Форма.ФормаРедактированияСвязи", ,ЭтаФорма);
		ФормаРедактированияСвязи.ИспользуемыеТипы = ДоступныеТипы;
		ФормаРедактированияСвязи.ИскатьПо = ТекДанные.ИскатьПо;
		ФормаРедактированияСвязи.ИспользоватьВладельца = (СписокВыбораВладельца.Количество() > 0);
		ФормаРедактированияСвязи.ИспользоватьТипы = (СписокВыбораСвязейПоТипу.Количество() > 0);
		ФормаРедактированияСвязи.СвязьПоВладельцу = ТекДанные.СвязьПоВладельцу;
		ФормаРедактированияСвязи.СвязьПоТипу = ТекДанные.СвязьПоТипу;
			
		Сп = ФормаРедактированияСвязи.Элементы.ИскатьПо.СписокВыбора;
		Сп.Очистить();
		Для каждого ЭлСписка Из СписокВыбораИскатьПо Цикл
			Сп.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
		КонецЦикла;
		
		Сп = ФормаРедактированияСвязи.Элементы.СвязьПоВладельцу.СписокВыбора;
		Сп.Очистить();
		Для каждого ЭлСписка Из СписокВыбораВладельца Цикл
			Сп.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
		КонецЦикла;
		
		Сп = ФормаРедактированияСвязи.Элементы.СвязьПоТипу.СписокВыбора;
		Сп.Очистить();
		Для каждого ЭлСписка Из СписокВыбораСвязейПоТипу Цикл
			Сп.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
		КонецЦикла;

		ФормаРедактированияСвязи.Открыть();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовПредставлениеДопУсловийОчистка(Элемент, СтандартнаяОбработка)
	
	ТекДанные = мПолучитьТекущиеДанныеСтраницыНастройки(СтандартнаяОбработка);
	
	ТекДанные.ПредставлениеДопУсловий = "";
	ТекДанные.ИскатьПо = "";
	ТекДанные.СвязьПоВладельцу = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагружаемыхРеквизитовРежимЗагрузкиПриИзменении(Элемент)
	
	ТекДанные = мПолучитьТекущиеДанныеСтраницыНастройки();
	
	Если ТекДанные.РежимЗагрузки = "Вычислять" Тогда
		ТекДанные.ПредставлениеДопУсловий = ТекДанные.Выражение;
	ИначеЕсли ТекДанные.РежимЗагрузки = "Устанавливать" Тогда
		ТекДанные.ПредставлениеДопУсловий = "";
	Иначе
		ТекДанные.ПредставлениеДопУсловий = ?(ПустаяСтрока(ТекДанные.ИскатьПо), "", "Искать по "+ТекДанные.ИскатьПо)
				+?(ПустаяСтрока(ТекДанные.СвязьПоВладельцу), "", " по владельцу "+ТекДанные.СвязьПоВладельцу);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
	
		Если ВыбранноеЗначение.Источник = "ФормаРедактированияСобытий" И ВыбранноеЗначение.Результат = Истина Тогда
			
			ПередЗаписьюОбъекта		= ВыбранноеЗначение.ПередЗаписьюОбъекта;
			ПриЗаписиОбъекта		= ВыбранноеЗначение.ПриЗаписиОбъекта;
			ПослеДобавленияСтроки	= ВыбранноеЗначение.ПослеДобавленияСтроки;
			ПослеЗаписиОбъекта		= ВыбранноеЗначение.ПослеЗаписиОбъекта;
			
		ИначеЕсли ВыбранноеЗначение.Источник = "ФормаРедактированияВыражения" И ВыбранноеЗначение.Результат = Истина Тогда
			
			ТекДанные = мПолучитьТекущиеДанныеСтраницыНастройки();
			
			ТекДанные.Выражение = ВыбранноеЗначение.Выражение;
			ТекДанные.ПредставлениеДопУсловий = ТекДанные.Выражение;
			
		ИначеЕсли ВыбранноеЗначение.Источник = "ФормаРедактированияСвязи" И ВыбранноеЗначение.Результат = Истина Тогда
			
			ТекДанные = мПолучитьТекущиеДанныеСтраницыНастройки();
			
			ТекДанные.ИскатьПо = ВыбранноеЗначение.ИскатьПо;
			ТекДанные.СвязьПоВладельцу = ВыбранноеЗначение.СвязьПоВладельцу;
			ТекДанные.СвязьПоТипу = ВыбранноеЗначение.СвязьПоТипу;
			ТекДанные.ПредставлениеДопУсловий = ?(ПустаяСтрока(ТекДанные.ИскатьПо), "", "Искать по "+ТекДанные.ИскатьПо)
			+?(ПустаяСтрока(ТекДанные.СвязьПоВладельцу), "", " по владельцу "+ТекДанные.СвязьПоВладельцу);
			
		ИначеЕсли ВыбранноеЗначение.Источник = "ФормаДобавленияДополнительнойНастройки" Тогда
			
			НаименованиеСтраницы = ДобавитьСтраницуНастроек(ВыбранноеЗначение.Значение, ВыбранноеЗначение.Представление, НЕ ВыбранноеЗначение.ЗагружаетсяДоОбъекта, ВыбранноеЗначение.ЭтоРегистр, ВыбранноеЗначение.ЗагружаетсяДоОбъекта);
			ЗаполнитьНастройкамиСозданнуюСтраницу(НаименованиеСтраницы, ВыбранноеЗначение.Значение, ВыбранноеЗначение.ЭтоРегистр, ВыбранноеЗначение.ЗагружаетсяДоОбъекта);		
			
		ИначеЕсли ВыбранноеЗначение.Источник = "ФормаНастроек" Тогда
			
			ПерваяСтрокаДанныхТабличногоДокумента = ВыбранноеЗначение.ПерваяСтрокаДанныхТабличногоДокумента;
			НеСоздаватьНовыхЭлементов = ВыбранноеЗначение.НеСоздаватьНовыхЭлементов;
			ЗамещатьСуществующиеЗаписи = ВыбранноеЗначение.ЗамещатьСуществующиеЗаписи;
			
		ИначеЕсли ВыбранноеЗначение.Источник = "ФормаСохраненияНастроек" Тогда
			
			СохранитьНастройкуВбазе(ВыбранноеЗначение.СписокНастроек.Пометка, ВыбранноеЗначение.СписокНастроек.Представление);	
			
		ИначеЕсли ВыбранноеЗначение.Источник = "ФормаВосстановленияНастроек" Тогда
			
			ВосстановитьНастройкиВБазе(ВыбранноеЗначение.СписокНастроек.Представление);	
			ОбновитьДанныеТабличногоДокумента(Истина);
			УправлениеВидимостью();
			
		ИначеЕсли ВыбранноеЗначение.Источник = "ФормаВыбораЗначенияПоУмолчанию" Тогда
			
			ТекДанные = мПолучитьТекущиеДанныеСтраницыНастройки();
			
			ТекДанные.ЗначениеПоУмолчанию = ВыбранноеЗначение.ЗначениеПоУмолчанию;
			ТекДанные.НастройкаЗагрузки = ВыбранноеЗначение.НастройкаЗагрузки;
			
			ТекДанные.ПредставлениеЗначенияПоУмолчанию = ?(ПустаяСтрока(ТекДанные.НастройкаЗагрузки), "", "По настройке: "+ВыбранноеЗначение.ЗаголовокНастройкиЗагрузки)
				+?(ПустаяСтрока(ТекДанные.ЗначениеПоУмолчанию), "", ?(ПустаяСтрока(ТекДанные.НастройкаЗагрузки), "", ", ") + ТекДанные.ЗначениеПоУмолчанию);
		КонецЕсли;
	                                 
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ИНФОСТАРТ И РЕГИСТРАЦИИ ОБРАБОТКИ

&НаКлиенте                                            
Процедура ОткрытьСтраничкуАвтора(Команда)
	
	ЗапуститьПриложение("http://it-titan.ru/");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраничкуРазработки(Команда)
	
	ЗапуститьПриложение("http://infostart.ru/public/284674/");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВерсию(Команда)
	
	НачатьПроверкуВерсий();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуВерсий(ЭтоПроверкаПриОткрытии = Ложь)

	ВерсияНаСейте = ПолучитьВерисюОбработки();
	
	ТребуетсяОбновление = ВыполнитьСравнениеВерсий(ВерсияНаСейте, ТекущаяВерсия);
	
	Если ТребуетсяОбновление Тогда
		
		ТекстСообщения = "Требуется обновление!.
						|Текущая версия: "+ ТекущаяВерсия + " 
						|Версия на сайте: "+ ВерсияНаСейте;
		
		Сообщить(ТекстСообщения);
				
	ИначеЕсли НЕ ЭтоПроверкаПриОткрытии Тогда
		
		ТекстСообщения = "Обновление не требуется.
						|Текущая версия: "+ ТекущаяВерсия + " 
						|Версия на сайте: "+ ВерсияНаСейте;
						
		Сообщить(ТекстСообщения);										
	КонецЕсли; 

	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВерисюОбработки()
	
	ВерсияНаСейте = "";
	
  	АдресСайта = "it-titan.ru";
    ПутьНаСайте = "ver/feedexcel";
	
    //Грузим сам ХТМЛ
    ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");

    HTTPСервис = Новый HTTPСоединение(АдресСайта,,,,,Ложь);
    ПравильностьВыполнения = Истина;

    Попытка
        HTTPСервис.Получить(ПутьНаСайте, ИмяВременногоФайла);
    Исключение
		Сообщить("Не удалось получить версию!");
		Сообщить("Проверка новых версий отключена");
		ОтключитьПроверкуНовыхВерсий = Истина;
        Возврат ВерсияНаСейте;
	КонецПопытки;	
	
	ЧтениеХТМЛ = Новый ЧтениеТекста;
    ЧтениеХТМЛ.Открыть(ИмяВременногоФайла, КодировкаТекста.UTF8);
    ВерсияНаСейте = ЧтениеХТМЛ.Прочитать();
	
	Если СтрЧислоСтрок(ВерсияНаСейте) > 1 Тогда
		Возврат ""	
	КонецЕсли; 
	
	Возврат ВерсияНаСейте;
	
КонецФункции // ПолучитьВерисюОбработки()

&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьСравнениеВерсий(ПроверяемаяВерсия, ТекущаяВерсия)

	ПроверяемаяВерсия = ?(ПустаяСтрока(ПроверяемаяВерсия), "0.0.0.0", ПроверяемаяВерсия);
	ТекущаяВерсия = ?(ПустаяСтрока(ТекущаяВерсия), "0.0.0.0", ТекущаяВерсия);

	МассивТекущий = мРазложитьСтрокуВМассивПодстрок(ТекущаяВерсия, ".");
	МассивНаСайте = мРазложитьСтрокуВМассивПодстрок(ПроверяемаяВерсия, ".");
		
	КоличествоРазрядовТекущее = МассивТекущий.Количество()-1;
	КоличествоРазрядовНаСайте = МассивНаСайте.Количество()-1;
	
	Обновляем = Ложь;
	
	Для х = 0 ПО КоличествоРазрядовТекущее Цикл
		
		Если х > КоличествоРазрядовНаСайте Тогда
			
			Прервать;
			
		КонецЕсли;
		
		Если МассивТекущий[х] > МассивНаСайте[х] Тогда		
			
			Прервать;
			
		КонецЕсли;
		
		Если МассивТекущий[х] < МассивНаСайте[х] Тогда
			
			Обновляем = Истина;
			
			Прервать;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Обновляем
	
КонецФункции // ПроверитьНеобходимостьОбновления()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ РЕГИСТРАЦИИ ОБРАБОТКИ В ДОПОЛНИТЕЛЬНЫХ ОТЧЕТАХ И ОБРАБОТКАХ

&НаКлиенте
//Процедура-обработчик команды "ЗарегистрироватьВИБ"
//
Процедура ЗарегистрироватьВИБ(Команда)
	
	Если ВерсияПлатформы83 Тогда
		Выполнить("
		|	ОписаниеОповещения = Новый ОписаниеОповещения(""ЗарегистрироватьвИБПослеПомещенияВХранилище"", ЭтотОбъект);
		|	НачатьПомещениеФайла(ОписаниеОповещения, АдресВоВременномХранилище,ИмяФайлаОбработки, Ложь, ЭтаФорма.УникальныйИдентификатор);
		|");
	Иначе	
			ПоместитьФайл(АдресВоВременномХранилище, ИмяФайлаОбработки, ИмяФайлаОбработки, Ложь, ЭтаФорма.УникальныйИдентификатор);
			ЗарегистрироватьвИБПослеПомещенияВХранилище(Истина, АдресВоВременномХранилище, ИмяФайлаОбработки, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
//Универсальная функция для регистрации обработки в информационной базе
//
Функция ЗарегистрироватьОбработкуВИнформационнойБазеНаСервере(РежимИспользования = "", СсылкаНаЭлемент = Неопределено, АдресДвоичныхДанных = Неопределено, ВторойВариантРегистрации = Ложь, ИмяФайлаОбработки)

	Перем ВидОбработки;
	
	//Регистрируем обработку в информационной базе
	
	Если НЕ ПравоДоступа("Изменение", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	РегистрационныеДанные = ПолучитьСведенияОВнешнейОбработке(ВторойВариантРегистрации);
	ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок[РегистрационныеДанные.Вид];
	
	Если Не ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДополнительныеОтчетыИОбработки.Версия,
			|	ДополнительныеОтчетыИОбработки.Ссылка
			|ИЗ
			|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
			|ГДЕ
			|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование
			|	И ДополнительныеОтчетыИОбработки.Вид = &Вид
			|";

		Запрос.УстановитьПараметр("Наименование", РегистрационныеДанные.Наименование);
		Запрос.УстановитьПараметр("Вид", ВидОбработки);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();

		Если Выборка.Следующий() Тогда
			СсылкаНаЭлемент = Выборка.Ссылка; 
		Иначе
			СсылкаНаЭлемент = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка(); 
		КонецЕсли;
	КонецЕсли; 
	
	Если РежимИспользования = "Поиск" Тогда
		Если СсылкаНаЭлемент = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка() Тогда 
			РежимИспользования = "Обновить"; 
		Иначе
			//Если СсылкаНаЭлемент.Версия <> РегистрационныеДанные.Версия Тогда
			Возврат РегистрационныеДанные.Наименование; 
		//Иначе
		//	Возврат Ложь; 
		КонецЕсли;
	КонецЕсли;
	
	Если РежимИспользования = "Обновить" Тогда
		Если СсылкаНаЭлемент = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка() Тогда
			ЭлементОбъект = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
		Иначе
			ЭлементОбъект = СсылкаНаЭлемент.ПолучитьОбъект(); 
		КонецЕсли; 
	КонецЕсли;
	
	ПолноеИмяИмяФайла = ИмяФайлаОбработки;
	МассивПодстрок = мРазложитьСтрокуВМассивПодстрок(ПолноеИмяИмяФайла, "\");
	ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
	
	Если ЭлементОбъект.ИмяФайла = ИмяФайла
		И ЭлементОбъект.Вид = ВидОбработки Тогда
		// если это перерегистрация этой же обработи - не очищаем назначение
	Иначе
		ЭлементОбъект.Назначение.Очистить();
	КонецЕсли;
	
	// Инициализация сведений об обработке
	Если Не ЗначениеЗаполнено(ЭлементОбъект.Публикация) Тогда
		ЭлементОбъект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
	КонецЕсли; 
	ЭлементОбъект.Вид = ВидОбработки;
	ЭлементОбъект.Наименование		= РегистрационныеДанные.Наименование;
	ЭлементОбъект.Версия			= РегистрационныеДанные.Версия;
	ЭлементОбъект.БезопасныйРежим	= РегистрационныеДанные.БезопасныйРежим;
	ЭлементОбъект.Информация		= РегистрационныеДанные.Информация;
	Если ЭлементОбъект.Метаданные().Реквизиты.Найти("ИмяОбъекта") <> Неопределено Тогда
		ЭлементОбъект.ИмяОбъекта		= РегистрационныеДанные.Наименование;
	КонецЕсли; 
	
	// Устанавливаем имя файла обработки
	ЭлементОбъект.ИмяФайла = РегистрационныеДанные.Наименование;
	
	Если ЭтоАдресВременногоХранилища(АдресДвоичныхДанных) Тогда
		ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресДвоичныхДанных);
	Иначе
		ДвоичныеДанныеОбработки = Новый ДвоичныеДанные(ПолноеИмяИмяФайла);
	КонецЕсли; 
	ЭлементОбъект.ХранилищеОбработки = Новый ХранилищеЗначения(ДвоичныеДанныеОбработки, Новый СжатиеДанных(9));
	
	// Если новая обработка или не заполнено назначение - устанавливаем назначение из обработки
	Если (ЭлементОбъект.Ссылка = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка()
		 ИЛИ ЭлементОбъект.Назначение.Количество() = 0)
		И (ЭлементОбъект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта
			ИЛИ ЭлементОбъект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма
			ИЛИ ЭлементОбъект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов)
		 ТОГДА
		
		ЭлементОбъект.ИспользоватьДляФормыОбъекта = Истина;
		ЭлементОбъект.ИспользоватьДляФормыСписка = Истина;
		
		Если РегистрационныеДанные.Свойство("Назначение") Тогда
			ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
			Если ВыполнитьСравнениеВерсий(ВерсияБСП, "2.1.3") Тогда
				
				НазначаемыеОбъектыМетаданных = Вычислить("ДополнительныеОтчетыИОбработки.НазначаемыеОбъектыМетаданныхПоВидуВнешнегоОбъекта(ВидОбработки)");
				Для Каждого ПолноеИмяОбъектаМетаданных Из РегистрационныеДанные.Назначение Цикл
					ПозицияТочки = Найти(ПолноеИмяОбъектаМетаданных, ".");
					Если Сред(ПолноеИмяОбъектаМетаданных, ПозицияТочки + 1) = "*" Тогда
						Поиск = Новый Структура("ВидОбъектаМетаданных", Лев(ПолноеИмяОбъектаМетаданных, ПозицияТочки - 1));
					Иначе
						Поиск = Новый Структура("ПолноеИмяОбъектаМетаданных", ПолноеИмяОбъектаМетаданных);
					КонецЕсли;
					
					Найденные = НазначаемыеОбъектыМетаданных.НайтиСтроки(Поиск);
					Для Каждого СтрокаТаблицы Из Найденные Цикл
						СтрокаНазначение = ЭлементОбъект.Назначение.Добавить();
						СтрокаНазначение.ОбъектНазначения = СтрокаТаблицы.ОбъектНазначения;
					КонецЦикла;
				КонецЦикла;
				ЭлементОбъект.Назначение.Свернуть("ОбъектНазначения", "");
				
			Иначе
				
				НазначаемыеОбъектыМетаданных = Вычислить("ДополнительныеОтчетыИОбработки.ПолучитьПолноеНазначениеПоВидуДополнительнойВнешнейОбработки(ВидОбработки)");
				Для Каждого ПолноеИмяОбъектаМетаданных Из РегистрационныеДанные.Назначение Цикл
					ПозицияТочки = Найти(ПолноеИмяОбъектаМетаданных, ".");
					Если Сред(ПолноеИмяОбъектаМетаданных, ПозицияТочки + 1) = "*" Тогда
						Поиск = Новый Структура("Класс", Лев(ПолноеИмяОбъектаМетаданных, ПозицияТочки - 1));
					Иначе
						Поиск = Новый Структура("ПолноеИмяОбъектаМетаданных", ПолноеИмяОбъектаМетаданных);
					КонецЕсли;
					
					Найденные = НазначаемыеОбъектыМетаданных.НайтиСтроки(Поиск);
					Для Каждого СтрокаТаблицы Из Найденные Цикл
						СтрокаНазначение = ЭлементОбъект.Назначение.Добавить();
						СтрокаНазначение.ПолноеИмяОбъектаМетаданных = СтрокаТаблицы.ПолноеИмяОбъектаМетаданных;
					КонецЦикла;
				КонецЦикла;
				ЭлементОбъект.Назначение.Свернуть("ПолноеИмяОбъектаМетаданных", "");	
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КомандыСохраненные = ЭлементОбъект.Команды.Выгрузить();
	
	ЭлементОбъект.Команды.Очистить();
	
	// Инициализация команд
	
	Для Каждого ЭлементОписаниеКоманды Из РегистрационныеДанные.Команды Цикл
		
		НоваяСтрока = ЭлементОбъект.Команды.Добавить();
		НоваяСтрока.Идентификатор	= ЭлементОписаниеКоманды.Идентификатор;
		НоваяСтрока.Представление	= ЭлементОписаниеКоманды.Представление;
		НоваяСтрока.Модификатор		= ЭлементОписаниеКоманды.Модификатор;
		НоваяСтрока.ПоказыватьОповещение = ЭлементОписаниеКоманды.ПоказыватьОповещение;
		
		Если ЭлементОписаниеКоманды.Использование = "ОткрытиеФормы" Тогда
			НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ОткрытиеФормы;
		ИначеЕсли ЭлементОписаниеКоманды.Использование = "ВызовКлиентскогоМетода" Тогда
			НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ВызовКлиентскогоМетода;
		ИначеЕсли ЭлементОписаниеКоманды.Использование = "ВызовСерверногоМетода" Тогда
			НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода;
		Иначе
			ТекстСообщения = НСтр("ru = 'Для команды %1 не определен способ запуска.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭлементОписаниеКоманды.Представление);
			ВызватьИсключение ТекстСообщения;
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	ЭлементОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	Попытка
		ЭлементОбъект.Записать();
		СсылкаНаЭлемент = ЭлементОбъект.Ссылка;
	Исключение
		НСтрока = НСтр("ru = 'Произошла ошибка при записи обработки.
							|Подробное описание ошибки: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока,
								КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстСообщения;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат СсылкаНаЭлемент;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСведенияОВнешнейОбработке(ВторойВариантРегистрации = Ложь, ПараметрыРегистрации = Неопределено) Экспорт
	
	Выполнить("ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(""2.1.3.1"")");	
	
	ПараметрыРегистрации.Версия = "2.5";
	ПараметрыРегистрации.БезопасныйРежим = Истина;
	ПараметрыРегистрации.Информация = "";
	
	Если ВторойВариантРегистрации Тогда	
		Выполнить("ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка()");
		ПараметрыРегистрации.Наименование = "Загрузка данных из табличного документа";
		
		НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
		НоваяКоманда.Представление = "Загрузка данных из табличного документа";
		НоваяКоманда.Идентификатор = "ЗаполнитьДанныхИзТабличногоДокумента";
		Выполнить("НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы()");
		НоваяКоманда.ПоказыватьОповещение = Истина;	
	Иначе	
		Выполнить("ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта()");
		ПараметрыРегистрации.Наименование = "Заполнение табличной части из табличного документа";
				
		НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
		НоваяКоманда.Представление = "Заполнение табличной части из табличного документа";
		НоваяКоманда.Идентификатор = "ЗаполнитьДокументИзТабличногоДокумента";
		Выполнить("НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы()");
		НоваяКоманда.ПоказыватьОповещение = Истина;
	КонецЕсли;

	Возврат ПараметрыРегистрации;
	
КонецФункции

&НаКлиенте
Процедура ЗарегистрироватьвИБПослеПомещенияВХранилище(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт 
	
	ДополнительнаяОбработкаСсылка = Неопределено;
	Результат = ЗарегистрироватьОбработкуВИнформационнойБазеНаСервере("Поиск", ДополнительнаяОбработкаСсылка, Адрес, Ложь, ВыбранноеИмяФайла);
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ТекстВопроса = НСтр("ru = 'В информационной базе зарегистрирована обработка под именем - ""%1"".
					|Обновить существующую?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", Результат);
		
		нПараметры = Новый СписокЗначений;
		нПараметры.Добавить(ДополнительнаяОбработкаСсылка);
		нПараметры.Добавить(Ложь);
		
		Если ВерсияПлатформы83 Тогда
			Выполнить("
			|	ОписаниеОповещения = Новый ОписаниеОповещения(""ВопросРегистрацииОбработкиВ_ИБ"", ЭтотОбъект, нПараметры);
			|	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
			|");
		Иначе
				ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				ВопросРегистрацииОбработкиВ_ИБ(ОтветНаВопрос, нПараметры);
		КонецЕсли;
	КонецЕсли; 
	
	// Добавить второй вариант
	
	ДополнительнаяОбработкаСсылка = Неопределено;
	Результат = ЗарегистрироватьОбработкуВИнформационнойБазеНаСервере("Поиск", ДополнительнаяОбработкаСсылка, Адрес, Истина, ВыбранноеИмяФайла);
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ТекстВопроса = НСтр("ru = 'В информационной базе зарегистрирована обработка под именем - ""%1"".
					|Обновить существующую?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", Результат);
		
		нПараметры = Новый СписокЗначений;
		нПараметры.Добавить(ДополнительнаяОбработкаСсылка);
		нПараметры.Добавить(Истина);
		
		Если ВерсияПлатформы83 Тогда
			Выполнить("
			|	ОписаниеОповещения = Новый ОписаниеОповещения(""ВопросРегистрацииОбработкиВ_ИБ"", ЭтотОбъект, нПараметры);
			|	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
			|");
		Иначе
				ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				ВопросРегистрацииОбработкиВ_ИБ(ОтветНаВопрос, нПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросРегистрацииОбработкиВ_ИБ(РезультатВопроса, ДополнительныеПараметры) Экспорт	
	
	ДополнительнаяОбработкаСсылка = ДополнительныеПараметры[0].Значение;
	ВторойВариантРегистрированияОбработки = ДополнительныеПараметры[1].Значение;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		ОчиститьСообщения();
		Результат = ЗарегистрироватьОбработкуВИнформационнойБазеНаСервере("Обновить", ДополнительнаяОбработкаСсылка, АдресВоВременномХранилище, ВторойВариантРегистрированияОбработки, ИмяФайлаОбработки);
	КонецЕсли;
	
	ОчиститьСообщения();
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Обработка """ + Строка(Результат) + """ успешно зарегистрирована в справочнике ""Дополнительные отчеты и обработки"".
		|При необходимости укажите объекты назначения для обработки.'");
		
		Если ВерсияПлатформы83 Тогда
			Выполнить("
			|	ПоказатьПредупреждение(, ТекстПредупреждения);
		    |");
		Иначе
				Предупреждение(ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОБАВЛЕНИЯ ТАБЛИЦ НАСТРОЕК

&НаСервере
// Процедура добавляет реквизиты и элементы формы, для загрузки подчиенных справочников
//
//	ЗагружаемыйОбъект - Объект метаданных для которго создается страница настройки (Строка)
//	Представление - Представление объекта метаданных для которого создается страница настройки (Строка)
// 	ЭтоДопСтраница - Определяет это основная страница настройки или дополнительно создаваемая (булево)
//	ЭтоРегистр - Определяет, что добавляемая страница, является настройкой для загрузки в один из регистров (булево)
//
Функция ДобавитьСтраницуНастроек(ЗагружаемыйОбъект, Представление, ЭтоДопСтраница = Ложь, ЭтоРегистр = Ложь, ЗагружаетсяДоОбъекта = Ложь)
	
	Если ЭтоДопСтраница ИЛИ ЗагружаетсяДоОбъекта Тогда
		НаименованиеСтраницы = "ПодчиненныйСправочник_"+КоличествоСозданныхПодчиненныхНастроек;
		ПредставлениеСтраницы = "" + (КоличествоСозданныхПодчиненныхНастроек + 1) + ": "+Представление;
		
		КоличествоСозданныхПодчиненныхНастроек = КоличествоСозданныхПодчиненныхНастроек + 1;
	Иначе
		НаименованиеСтраницы = ЗагружаемыйОбъект;
		ПредставлениеСтраницы = Представление;
	КонецЕсли;
	
	нСтрокаНастроек = ТаблицыНастроек.Добавить();
	нСтрокаНастроек.Ключ = "Страница" + НаименованиеСтраницы; 
	нСтрокаНастроек.Значение = НаименованиеСтраницы;
	нСтрокаНастроек.Справочник = ЗагружаемыйОбъект;
	нСтрокаНастроек.Заголовок = ПредставлениеСтраницы;
	нСтрокаНастроек.ДопНастройки = ЭтоДопСтраница;
	нСтрокаНастроек.Представление = Представление;
	нСтрокаНастроек.ЭтоРегистр = ЭтоРегистр;
	нСтрокаНастроек.ЗагружаетсяДоОбъекта = ЗагружаетсяДоОбъекта;
	
	СтраницаГруппыРеквизитов = Элементы.Добавить("Страница" + НаименованиеСтраницы, Тип("ГруппаФормы"), Элементы.ГруппаЗагрузкаНастройка);
   	СтраницаГруппыРеквизитов.Вид = ВидГруппыФормы.Страница;
	СтраницаГруппыРеквизитов.Заголовок = ПредставлениеСтраницы;
	
	МассивДобавляемыхРеквизитов = Новый Массив;	
	нРеквизит = Новый РеквизитФормы(НаименованиеСтраницы, Новый ОписаниеТипов("ТаблицаЗначений"),,НаименованиеСтраницы);
	МассивДобавляемыхРеквизитов.Добавить(нРеквизит);	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// Добавляем командную панель и ее кнопки
	нКоманднаяПанель = Элементы.Добавить(НаименованиеСтраницы + "КоманднаяПанель", Тип("ГруппаФормы"), СтраницаГруппыРеквизитов);
	нКоманднаяПанель.Вид = ВидГруппыФормы.КоманднаяПанель;
	
	УстановитьФлажки = Элементы.Добавить(НаименованиеСтраницы + "УстановитьФлажки", Тип("КнопкаФормы"), нКоманднаяПанель);
	УстановитьФлажки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	УстановитьФлажки.ИмяКоманды = "УстановитьФлажки";	
	СнятьФлажки = Элементы.Добавить(НаименованиеСтраницы + "СнятьФлажки", Тип("КнопкаФормы"), нКоманднаяПанель);
	СнятьФлажки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	СнятьФлажки.ИмяКоманды = "СнятьФлажки";

	ВосстановитьЗначенияИзФайла = Элементы.Добавить(НаименованиеСтраницы + "ВосстановитьЗначенияИзФайла", Тип("КнопкаФормы"), нКоманднаяПанель);
	ВосстановитьЗначенияИзФайла.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	ВосстановитьЗначенияИзФайла.ИмяКоманды = "ВосстановитьЗначенияИзФайла";
	СохранитьЗначенияВФайл = Элементы.Добавить(НаименованиеСтраницы + "СохранитьЗначенияВФайл", Тип("КнопкаФормы"), нКоманднаяПанель);
	СохранитьЗначенияВФайл.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	СохранитьЗначенияВФайл.ИмяКоманды = "СохранитьЗначенияВФайл";	
	
	ВосстановитьНастройки = Элементы.Добавить(НаименованиеСтраницы + "ВосстановитьНастройки", Тип("КнопкаФормы"), нКоманднаяПанель);
	ВосстановитьНастройки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	ВосстановитьНастройки.ИмяКоманды = "ВосстановитьНастройки";
	СохранитьНастройки = Элементы.Добавить(НаименованиеСтраницы + "СохранитьНастройки", Тип("КнопкаФормы"), нКоманднаяПанель);
	СохранитьНастройки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	СохранитьНастройки.ИмяКоманды = "СохранитьНастройки";	
				
	ГруппаПеренумерования = Элементы.Добавить(НаименованиеСтраницы + "НумерацияКолонок", Тип("ГруппаФормы"), нКоманднаяПанель);
	ГруппаПеренумерования.Вид = ВидГруппыФормы.Подменю;
	ГруппаПеренумерования.Заголовок = "Нумерация колонок";
	
	ПеренумероватьКолонки = Элементы.Добавить(НаименованиеСтраницы + "РучнаяНумерацияКолонокТабличногоДокумента", Тип("КнопкаФормы"), ГруппаПеренумерования);
	ПеренумероватьКолонки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;	
	ПеренумероватьКолонки.ИмяКоманды = "РучнаяНумерацияКолонокТабличногоДокумента";
	ПеренумероватьКолонки.Пометка = РучнаяНумерацияКолонокТабличногоДокумента;
	
	ПеренумероватьКолонки = Элементы.Добавить(НаименованиеСтраницы + "ПеренумероватьКолонки", Тип("КнопкаФормы"), ГруппаПеренумерования);
	ПеренумероватьКолонки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;	
	ПеренумероватьКолонки.ИмяКоманды = "ПеренумероватьКолонки";	

	Если НЕ ЭтоДопСтраница И НЕ ЗагружаетсяДоОбъекта Тогда
		УстановитьФлажки = Элементы.Добавить(НаименованиеСтраницы + "События", Тип("КнопкаФормы"), нКоманднаяПанель);
		УстановитьФлажки.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		УстановитьФлажки.ИмяКоманды = "События";
	КонецЕсли;
	
	// Добавляем таблицу значений на форму
	ЭлементТаблицаФормы = Элементы.Добавить(НаименованиеСтраницы, Тип("ТаблицаФормы"), СтраницаГруппыРеквизитов);
    ЭлементТаблицаФормы.ПутьКДанным = НаименованиеСтраницы;
	ЭлементТаблицаФормы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	                                                                                 
	ТЗ_Основа = ДанныеФормыВЗначение(ПодготовленнаяТаблицаРеквизитов, Тип("ТаблицаЗначений"));
	Для каждого Колонка Из ТЗ_Основа.Колонки Цикл
		нРеквизит = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, НаименованиеСтраницы, Колонка.Заголовок);
		МассивДобавляемыхРеквизитов.Добавить(нРеквизит);	
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);		
			
	НовыйЭлемент = Элементы.Добавить(НаименованиеСтраницы + "Пометка", Тип("ПолеФормы"), ЭлементТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = НаименованиеСтраницы + "." + "Пометка";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	НовыйЭлемент = Элементы.Добавить(НаименованиеСтраницы + "ПредставлениеРеквизита", Тип("ПолеФормы"), ЭлементТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = НаименованиеСтраницы + "." + "ПредставлениеРеквизита";
	НовыйЭлемент.ТолькоПросмотр = Истина;
	НовыйЭлемент.Заголовок = "Представление реквизита";
	
	НовыйЭлемент = Элементы.Добавить(НаименованиеСтраницы + "ПолеПоиска", Тип("ПолеФормы"), ЭлементТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = НаименованиеСтраницы + "." + "ПолеПоиска";
	НовыйЭлемент.Заголовок = "Поле поиска";
	
	НовыйЭлемент = Элементы.Добавить(НаименованиеСтраницы + "ОписаниеТипов", Тип("ПолеФормы"), ЭлементТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = НаименованиеСтраницы + "." + "ОписаниеТипов";
	НовыйЭлемент.УстановитьДействие("НачалоВыбора","ТаблицаЗагружаемыхРеквизитовОписаниеТиповНачалоВыбора");
    НовыйЭлемент.Заголовок = "Описание типов";
	
	НовыйЭлемент = Элементы.Добавить(НаименованиеСтраницы + "РежимЗагрузки", Тип("ПолеФормы"), ЭлементТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = НаименованиеСтраницы + "." + "РежимЗагрузки";
    НовыйЭлемент.РежимВыбораИзСписка = Истина;
	НовыйЭлемент.СписокВыбора.Добавить("Искать");
	НовыйЭлемент.СписокВыбора.Добавить("Устанавливать");
	НовыйЭлемент.СписокВыбора.Добавить("Вычислять");	
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "ТаблицаЗагружаемыхРеквизитовРежимЗагрузкиПриИзменении");
	НовыйЭлемент.Заголовок = "Режим загрузки";
	
	НовыйЭлемент = Элементы.Добавить(НаименованиеСтраницы + "НомерКолонки", Тип("ПолеФормы"), ЭлементТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = НаименованиеСтраницы + "." + "НомерКолонки";
	НовыйЭлемент.Заголовок = "Номер колонки";
	
	НовыйЭлемент = Элементы.Добавить(НаименованиеСтраницы + "ПредставлениеЗначенияПоУмолчанию", Тип("ПолеФормы"), ЭлементТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = НаименованиеСтраницы + "." + "ПредставлениеЗначенияПоУмолчанию";
    НовыйЭлемент.УстановитьДействие("НачалоВыбора", "ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчаниюНачалоВыбора");
	НовыйЭлемент.СвязьПоТипу = Новый СвязьПоТипу("Элементы."+НаименованиеСтраницы + ".ТекущиеДанные.ОписаниеТипов");
	НовыйЭлемент.Заголовок = "Значение по умолчанию";
	НовыйЭлемент.ВыбиратьТип = Ложь;
	НовыйЭлемент.КнопкаВыбора = Истина;
	НовыйЭлемент.РедактированиеТекста = Ложь;
	
	НовыйЭлемент = Элементы.Добавить(НаименованиеСтраницы + "ПредставлениеДопУсловий", Тип("ПолеФормы"), ЭлементТаблицаФормы);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = НаименованиеСтраницы + "." + "ПредставлениеДопУсловий";
	НовыйЭлемент.ВыбиратьТип = Ложь;
	НовыйЭлемент.КнопкаВыбора = Истина;
    НовыйЭлемент.УстановитьДействие("НачалоВыбора", "ТаблицаЗагружаемыхРеквизитовПредставлениеДопУсловийНачалоВыбора");
	НовыйЭлемент.УстановитьДействие("Очистка", "ТаблицаЗагружаемыхРеквизитовПредставлениеДопУсловийОчистка");
	НовыйЭлемент.Заголовок = "Представление доп. условий";
	НовыйЭлемент.РедактированиеТекста = Ложь;
	
	ДобавитьУсловноеОформлениеТаблицыНастроек(НаименованиеСтраницы);
	
	УстановитьВидимостьКомандНаПанелях();
	
	Возврат НаименованиеСтраницы;
	
КонецФункции

&НаСервере
// Процедура получает список справочников где, основной справочник является владельцем
//
Процедура ПолучитьПодчиненныеСправочники()
	
	СписокДобавляемыхСтраниц.Очистить();
	
	Если ЗначениеЗаполнено(ТипОбъектаСправочника) Тогда
		МетСпр = Метаданные.Справочники;
		
		Для каждого Спр Из МетСпр Цикл
			Для каждого Владелец Из Спр.Владельцы Цикл
				Если Владелец = Метаданные.Справочники[ТипОбъектаСправочника] Тогда
					СписокДобавляемыхСтраниц.Добавить(Спр.Имя, Спр.Синоним);	
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет настройками дополнительно созданную страницу настройки
//
// 	НаименованиеСтраницы - Наименование страницы настройки которую требуется заполнить (строка)
//	ОбъектЗагрузки - объект метаданных настройками загрузки которого заполняется страница (строка)
//	ЭтоРегистр - Определяет, что добавляемая страница, является настройкой для загрузки в один из регистров (булево) 
//
Процедура ЗаполнитьНастройкамиСозданнуюСтраницу(НаименованиеСтраницы, ОбъектЗагрузки, ЭтоРегистр = Ложь, ЗагружаетсяДоОбъекта = Ложь)
	
	Если ЗагружаетсяДоОбъекта Тогда
		ТекРежимЗагрузки = 0;
	Иначе
		ТекРежимЗагрузки = РежимЗагрузки;
	КонецЕсли;
	
	ТЗ = РеквизитФормыВЗначение(НаименованиеСтраницы);	
	Если ТекРежимЗагрузки = 0 Тогда
		ЗаполнитьНастройкиКолонокСправочника(ТЗ, ОбъектЗагрузки, ТекРежимЗагрузки);	
	ИначеЕсли ТекРежимЗагрузки = 1 ИЛИ ТекРежимЗагрузки = 5 Тогда
		Если ЭтоРегистр Тогда
			ЗаполнитьВТаблицуЗначенийДвиженияРегистраДокумента(ОбъектЗагрузки, НаименованиеСтраницы);
			ЗаполнитьНастройкиКолонокРегистраДокумента(ТЗ, ОбъектЗагрузки, ЭтоРегистр);
		Иначе
			ЗаполнитьНастройкиКолонокТабличнойЧасти(ТЗ, ОбъектЗагрузки);
		КонецЕсли;
	ИначеЕсли ТекРежимЗагрузки = 3 Тогда
		ЗаполнитьВТаблицуЗначенийДвиженияРегистраДокумента(ОбъектЗагрузки, НаименованиеСтраницы);
		ЗаполнитьНастройкиКолонокРегистраДокумента(ТЗ, ОбъектЗагрузки);	
	КонецЕсли;
	УстновитьПредставлениеДопУсловийТЗ(ТЗ);	
	ЗначениеВРеквизитФормы(ТЗ, НаименованиеСтраницы);

КонецПроцедуры

&НаСервере
// Процедура удаляет программно созданные реквизиты и элементы формы
//
//	РежимВосстановления - Показывает, что происходит восстановление настроек и не требуется очищать таблицы настроек (булево)
//
Процедура ОчиститьСозданныеСтраницы(РежимВосстановления = Ложь)
	
	МассивРеквизитовУдалить = Новый Массив;
	
	Для каждого КлючИЗначение Из ТаблицыНастроек Цикл
		Элементы.Удалить(Элементы[КлючИЗначение.Ключ]);
		МассивРеквизитовУдалить.Добавить(КлючИЗначение.Значение);	
	КонецЦикла;
	
	ИзменитьРеквизиты(, МассивРеквизитовУдалить);
	
	КоличествоСозданныхПодчиненныхНастроек = 0;
	
	Если НЕ РежимВосстановления Тогда
		ОчиститьТаблицыНастроек();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура очищает таблицы настроек и добавляет на форму пустую основную таблицу настройки
//
Процедура ОчиститьТаблицыНастроек()
	
	ТаблицыНастроек.Очистить();
	ЭтаФорма.УсловноеОформление.Элементы.Очистить();
	
	ДобавитьСтраницуНастроек("ТаблицаЗагружаемыхРеквизитов", "Настройка");
	
	Если РежимЗагрузки = 5 Тогда
		НовыйЭлемент = Элементы.Добавить("Колонка_ПриИзмененииСоздатьДокумент", Тип("ПолеФормы"), Элементы["СтраницаТаблицаЗагружаемыхРеквизитов"]);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "Колонка_ПриИзмененииСоздатьДокумент";
		НовыйЭлемент.РежимВыбораИзСписка = Истина;
		Элементы.Переместить(Элементы["Колонка_ПриИзмененииСоздатьДокумент"], Элементы["СтраницаТаблицаЗагружаемыхРеквизитов"], Элементы["ТаблицаЗагружаемыхРеквизитовКоманднаяПанель"]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура добавляет условное оформление к добавленной странице настройки
//
//	НаименованиеЭлемента - Наименование таблицы настройки условное оформление которой нужно добавить
//
Процедура ДобавитьУсловноеОформлениеТаблицыНастроек(НаименованиеЭлемента)
	
	Оформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();	
	Отбор = Оформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + ".МожетБытьПолемПоиска");
	Отбор.ПравоеЗначение = Ложь;	
	ЗначениеУО = Оформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	ЗначениеУО.Значение = Истина;
	ЗначениеУО.Использование = Истина;	
	ПолеУО = Оформление.Поля.Элементы.Добавить();
	ПолеУО.Поле = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + "ПолеПоиска");
	ПолеУО.Использование = Истина;
	
	Оформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();	
	Отбор = Оформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + ".РежимЗагрузки");
	Отбор.ПравоеЗначение = "Вычислять";	
	ЗначениеУО = Оформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	ЗначениеУО.Значение = Ложь;
	ЗначениеУО.Использование = Истина;	
	ПолеУО = Оформление.Поля.Элементы.Добавить();
	ПолеУО.Поле = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + "ПредставлениеДопУсловий");
	ПолеУО.Использование = Истина;
		
	Оформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();	
	ОтборГруппаИЛИ = Оформление.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппаИЛИ.Использование = Истина;
	ОтборГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;	
	Отбор = ОтборГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + ".РежимЗагрузки");
	Отбор.ПравоеЗначение = "Устанавливать";		
	ОтборГруппаИ = ОтборГруппаИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппаИ.Использование = Истина;
	ОтборГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;	
	Отбор = ОтборГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + ".РежимЗагрузки");
	Отбор.ПравоеЗначение = "Искать";
	Отбор = ОтборГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + ".ИскатьПо");
	Отбор.ПравоеЗначение = "";
	Отбор = ОтборГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + ".СвязьПоВладельцу");
	Отбор.ПравоеЗначение = "";
	Отбор = ОтборГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + ".СвязьПоТипу");
	Отбор.ПравоеЗначение = "";
	ЗначениеУО = Оформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	ЗначениеУО.Значение = Истина;
	ЗначениеУО.Использование = Истина;	
	ПолеУО = Оформление.Поля.Элементы.Добавить();
	ПолеУО.Поле = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + "ПредставлениеДопУсловий");
	ПолеУО.Использование = Истина;
	
	Оформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();	
	Отбор = Оформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование = Истина;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + ".НеУбиратьПометку");
	Отбор.ПравоеЗначение = Истина;
	ЗначениеУО = Оформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	ЗначениеУО.Значение = Истина;
	ЗначениеУО.Использование = Истина;	
	ПолеУО = Оформление.Поля.Элементы.Добавить();
	ПолеУО.Поле = Новый ПолеКомпоновкиДанных(НаименованиеЭлемента + "Пометка");
	ПолеУО.Использование = Истина;
	
КонецПроцедуры                 

&НаСервере
Функция СтрокаИАСУПЗапись(СтрТаблицаЗарплаты)
		СтрокаИАСУПЗапись = "";
		СтрокаИАСУПЗапись = СтрокаИАСУПЗапись +"ТабНомер: "+ СтрТаблицаЗарплаты.ТабНомер+ Символы.ПС;
		СтрокаИАСУПЗапись = СтрокаИАСУПЗапись +"ДляПериод: "+ СтрТаблицаЗарплаты.ДляПериод+ Символы.ПС;
		СтрокаИАСУПЗапись = СтрокаИАСУПЗапись + "ВПериод: "+СтрТаблицаЗарплаты.ВПериод+ Символы.ПС;
		СтрокаИАСУПЗапись = СтрокаИАСУПЗапись + "ВидОплаты: "+СтрТаблицаЗарплаты.ВидОплаты+ Символы.ПС;
		СтрокаИАСУПЗапись = СтрокаИАСУПЗапись + "ТекстВидаОплаты: "+СтрТаблицаЗарплаты.ТекстВидаОплаты+ Символы.ПС;
		СтрокаИАСУПЗапись = СтрокаИАСУПЗапись + "Сумма: "+СтрТаблицаЗарплаты.Сумма+ Символы.ПС;
		СтрокаИАСУПЗапись = СтрокаИАСУПЗапись + "СчетДт: "+СтрТаблицаЗарплаты.СчетДт+ Символы.ПС;
		СтрокаИАСУПЗапись = СтрокаИАСУПЗапись + "СубконтоДт1: "+СтрТаблицаЗарплаты.СубконтоДт1+ Символы.ПС;
		СтрокаИАСУПЗапись = СтрокаИАСУПЗапись + "СубконтоДт2: "+СтрТаблицаЗарплаты.СубконтоДт2+ Символы.ПС;
		СтрокаИАСУПЗапись = СтрокаИАСУПЗапись + "СубконтоДт3: "+СтрТаблицаЗарплаты.СубконтоДт3+ Символы.ПС;
		СтрокаИАСУПЗапись = СтрокаИАСУПЗапись + "СубконтоДт4: "+СтрТаблицаЗарплаты.СубконтоДт4+ Символы.ПС;
		СтрокаИАСУПЗапись = СтрокаИАСУПЗапись + "СубконтоДт6: "+СтрТаблицаЗарплаты.СубконтоДт6+ Символы.ПС;
		СтрокаИАСУПЗапись = СтрокаИАСУПЗапись + "СубконтоДт7: "+СтрТаблицаЗарплаты.СубконтоДт7+ Символы.ПС;
		СтрокаИАСУПЗапись = СтрокаИАСУПЗапись + "СчетКт: "+СтрТаблицаЗарплаты.СчетКт+ Символы.ПС;
		СтрокаИАСУПЗапись = СтрокаИАСУПЗапись + "СубконтоКт1: "+СтрТаблицаЗарплаты.СубконтоКт1+ Символы.ПС;
		СтрокаИАСУПЗапись = СтрокаИАСУПЗапись + "СубконтоКт2: "+СтрТаблицаЗарплаты.СубконтоКт2+ Символы.ПС;
		СтрокаИАСУПЗапись = СтрокаИАСУПЗапись + "СубконтоКт3: "+СтрТаблицаЗарплаты.СубконтоКт3+ Символы.ПС;
		СтрокаИАСУПЗапись = СтрокаИАСУПЗапись + "СубконтоКт4: "+СтрТаблицаЗарплаты.СубконтоКт4+ Символы.ПС;
		СтрокаИАСУПЗапись = СтрокаИАСУПЗапись + "СубконтоКт5: "+СтрТаблицаЗарплаты.СубконтоКт5+ Символы.ПС;
		СтрокаИАСУПЗапись = СтрокаИАСУПЗапись + "Содержание: "+СтрТаблицаЗарплаты.Содержание;

	Возврат  СтрокаИАСУПЗапись;
	
КонецФункции	
&наСервере
Функция ВидОплаты_32Е(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп1ст255;
		//Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт2 = ;
		//Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт3 = ;
		
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("68.01.1");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		
		ДатаАктуальности = ТекущаяДатаСеанса();
		
		ПоследняяРегистрацияВНалоговомОргане = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.ПолучитьПоследнее(
		ДатаАктуальности,
 		Новый Структура("СтруктурнаяЕдиница", Подразделение));
	
		Если ЗначениеЗаполнено(ПоследняяРегистрацияВНалоговомОргане.РегистрацияВНалоговомОргане) Тогда
			РегистрацияВНалогОргане = ПоследняяРегистрацияВНалоговомОргане.РегистрацияВНалоговомОргане;
		Иначе
			РегистрацияВНалогОргане = НЕОПРЕДЕЛЕНО;
		КонецЕсли;

		
		
		
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт2 = РегистрацияВНалогОргане;
		//Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт3 = ;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		//Стр_ТЗ_ОтражениеВБухУчете20.ОтражениеВУСН = ;
		//Стр_ТЗ_ОтражениеВБухУчете20.ВидРасчета = ;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		//Стр_ТЗ_ОтражениеВБухУчете20.ВидНачисленияПоСт255НК = ;
		//Стр_ТЗ_ОтражениеВБухУчете20.ВидНачисленияУдержания = ;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = СтрТаблицаЗарплаты.Сумма;;
						
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "НДФЛ удержанный 13%";

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции	

&НаСервере
Функция ВидОплаты_0010_1010_1024(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20010200");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		Если  ВидОплаты = "0010" или ВидОплаты = "10" Тогда
			Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп1ст255;
		КонецЕсли;
		Если  ВидОплаты = "1010" или ВидОплаты = "1024" Тогда
			Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
		КонецЕсли;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = СтрТаблицаЗарплаты.Сумма;;
						
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Если  ВидОплаты = "0010" или ВидОплаты = "10" Тогда
			Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ОплОкладЧас/ТарифСтавка";
		КонецЕсли;
		Если  ВидОплаты = "1010" Тогда
			Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ИнтегрСтимНадбавка";
		КонецЕсли;
		Если  ВидОплаты = "1024" Тогда
			Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "Индексирующая выплата";
		КонецЕсли;


	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции


&НаСервере
Функция ВидОплаты_3000(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп7ст255;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "Основной отпуск";
		
		Стр_ТЗ_ОтражениеВБухУчете20_1 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20030200");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоКт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20_1.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаВР = СтрТаблицаЗарплаты.Сумма * (-1);
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_1.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ТекстВидаОплатыИАСУП = "Основной отпуск";

		Стр_ТЗ_ОтражениеВБухУчете20_2 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20010200");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп7ст255;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_2.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ТекстВидаОплатыИАСУП = "Основной отпуск";


	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции	

&НаСервере
Функция ВидОплаты_20(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20010200");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп1ст255;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "Оплата по окладу (дни)";


	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции

&НаСервере
Функция ВидОплаты_2000(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20010200");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп6ст255;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "Командировка(средн)";


	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции

&НаСервере
Функция ВидОплаты_8000(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		//Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20010200");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.09.3");
		//Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп6ст255;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "Профсоюзные взносы";


	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции

&НаСервере
Функция ВидОплаты_1273(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20010200");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ОперПремБезКорВрем(сумма)";


	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции

&НаСервере
Функция ВидОплаты_8121(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		//Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20010200");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("73.03");
		//Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "УдержРасхКомандир";


	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции





&НаСервере
Функция ВидОплаты_1221(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.03");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.Резервы.НайтиПоКоду("БП-000004");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ПремияДостКПЭзаГод";
		
		Стр_ТЗ_ОтражениеВБухУчете20_1 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20030100");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.03");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоКт1 = Справочники.Резервы.НайтиПоКоду("БП-000004");
		Стр_ТЗ_ОтражениеВБухУчете20_1.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаВР = СтрТаблицаЗарплаты.Сумма * (-1);
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаВРЗнакМинус = Истина;
		

		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_1.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ТекстВидаОплатыИАСУП = "ПремияДостКПЭзаГод";

		Стр_ТЗ_ОтражениеВБухУчете20_2 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20010200");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_2.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ТекстВидаОплатыИАСУП = "ПремияДостКПЭзаГод";


	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции


&НаСервере
Функция ВидОплаты_8302(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30000000");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.01");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ФондСоцСтрах";


	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции

&НаСервере
Функция ВидОплаты_8303(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30000000");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.03.1");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ФондМедСтрахФедер";


	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции

&НаСервере
Функция ВидОплаты_8305(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30000001");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.11");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ФондСоцСтрахНесчСлуч";


	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции
&НаСервере
Функция ВидОплаты_8311(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30000000");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.02.7");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ПФ РФ СтрахЧасть (лимит)";


	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции


&НаСервере
Функция ВидОплаты_83B1(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.03");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.Резервы.НайтиПоКоду("БП-000004");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.02.7");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ПФСтрахЧПремКПЭГод(лим)";
		
		Стр_ТЗ_ОтражениеВБухУчете20_1 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30500100");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.03");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоКт1 = Справочники.Резервы.НайтиПоКоду("БП-000004");
		Стр_ТЗ_ОтражениеВБухУчете20_1.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаВР = СтрТаблицаЗарплаты.Сумма * (-1);
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_1.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ТекстВидаОплатыИАСУП = "ПФСтрахЧПремКПЭГод(лим)";

		Стр_ТЗ_ОтражениеВБухУчете20_2 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30000000");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.02.7");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_2.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ТекстВидаОплатыИАСУП = "ПФСтрахЧПремКПЭГод(лим)";
	

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции

&НаСервере
Функция ВидОплаты_83B3(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.03");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.Резервы.НайтиПоКоду("БП-000004");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.03.1");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ФондМедСтрахФедПремКПЭГод";
		
		Стр_ТЗ_ОтражениеВБухУчете20_1 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30500100");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.03");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоКт1 = Справочники.Резервы.НайтиПоКоду("БП-000004");
		Стр_ТЗ_ОтражениеВБухУчете20_1.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаВР = СтрТаблицаЗарплаты.Сумма * (-1);
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_1.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ТекстВидаОплатыИАСУП = "ФондМедСтрахФедПремКПЭГод";

		Стр_ТЗ_ОтражениеВБухУчете20_2 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30000000");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.03.1");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_2.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ТекстВидаОплатыИАСУП = "ФондМедСтрахФедПремКПЭГод";	

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции

&НаСервере
Функция ВидОплаты_83B5(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.03");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.Резервы.НайтиПоКоду("БП-000004");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.01");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ФондСоцСтрахПремияКПЭГод";
		
		Стр_ТЗ_ОтражениеВБухУчете20_1 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30500100");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.03");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоКт1 = Справочники.Резервы.НайтиПоКоду("БП-000004");
		Стр_ТЗ_ОтражениеВБухУчете20_1.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаВР = СтрТаблицаЗарплаты.Сумма * (-1);
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_1.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ТекстВидаОплатыИАСУП = "ФондСоцСтрахПремияКПЭГод";

		Стр_ТЗ_ОтражениеВБухУчете20_2 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30000000");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.01");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_2.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ТекстВидаОплатыИАСУП = "ФондСоцСтрахПремияКПЭГод";	

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции

&НаСервере
Функция ВидОплаты_8342(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.01");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ФондСоцСтрахРОО";
		
		Стр_ТЗ_ОтражениеВБухУчете20_1 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30500100");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоКт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20_1.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаВР = СтрТаблицаЗарплаты.Сумма * (-1);
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_1.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ТекстВидаОплатыИАСУП = "ФондСоцСтрахРОО";

		Стр_ТЗ_ОтражениеВБухУчете20_2 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30000000");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.01");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_2.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ТекстВидаОплатыИАСУП = "ФондСоцСтрахРОО";	

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции
&НаСервере
Функция ВидОплаты_8343(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.03.1");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ФондМедСтрахФедерРОО";
		
		Стр_ТЗ_ОтражениеВБухУчете20_1 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30500200");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоКт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20_1.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаВР = СтрТаблицаЗарплаты.Сумма * (-1);
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_1.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ТекстВидаОплатыИАСУП = "ФондМедСтрахФедерРОО";

		Стр_ТЗ_ОтражениеВБухУчете20_2 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30000000");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.03.1");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_2.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ТекстВидаОплатыИАСУП = "ФондМедСтрахФедерРОО";	
	

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции
&НаСервере
Функция ВидОплаты_8345(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.11");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ФондСоцСтрахНесчСлучРОО";
		
		Стр_ТЗ_ОтражениеВБухУчете20_1 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30500100");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоКт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20_1.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаВР = СтрТаблицаЗарплаты.Сумма * (-1);
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_1.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ТекстВидаОплатыИАСУП = "ФондСоцСтрахНесчСлучРОО";

		Стр_ТЗ_ОтражениеВБухУчете20_2 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30000001");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.11");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_2.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ТекстВидаОплатыИАСУП = "ФондСоцСтрахНесчСлучРОО";	

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции
&НаСервере
Функция ВидОплаты_8351(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.02.7");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ПФондСтрахЧРОО(лимит)";
		
		Стр_ТЗ_ОтражениеВБухУчете20_1 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30500100");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоКт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20_1.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаВР = СтрТаблицаЗарплаты.Сумма * (-1);
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_1.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ТекстВидаОплатыИАСУП = "ПФондСтрахЧРОО(лимит)";

		Стр_ТЗ_ОтражениеВБухУчете20_2 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30000000");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.02.7");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_2.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ТекстВидаОплатыИАСУП = "ПФондСтрахЧРОО(лимит)";		

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции
&НаСервере
Функция ВидОплаты_8362(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.01");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ФондСоцСтрахРДО";
		
		Стр_ТЗ_ОтражениеВБухУчете20_1 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30500100");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоКт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20_1.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаВР = СтрТаблицаЗарплаты.Сумма * (-1);
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_1.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ТекстВидаОплатыИАСУП = "ФондСоцСтрахРДО";

		Стр_ТЗ_ОтражениеВБухУчете20_2 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30000000");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.01");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_2.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ТекстВидаОплатыИАСУП = "ФондСоцСтрахРДО";	

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции
&НаСервере
Функция ВидОплаты_8363(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
	Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.03.1");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ФондМедСтрахФедерРДО";
		
		Стр_ТЗ_ОтражениеВБухУчете20_1 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30500100");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоКт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20_1.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаВР = СтрТаблицаЗарплаты.Сумма * (-1);
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_1.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ТекстВидаОплатыИАСУП = "ФондМедСтрахФедерРДО";

		Стр_ТЗ_ОтражениеВБухУчете20_2 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30000000");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.03.1");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_2.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ТекстВидаОплатыИАСУП = "ФондМедСтрахФедерРДО";	

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции
&НаСервере
Функция ВидОплаты_8365(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.11");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ФондСоцСтрахНесчСлучРДО";
		
		Стр_ТЗ_ОтражениеВБухУчете20_1 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30500100");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоКт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20_1.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаВР = СтрТаблицаЗарплаты.Сумма * (-1);
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_1.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ТекстВидаОплатыИАСУП = "ФондСоцСтрахНесчСлучРДО";

		Стр_ТЗ_ОтражениеВБухУчете20_2 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30000000");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.11");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_2.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ТекстВидаОплатыИАСУП = "ФондСоцСтрахНесчСлучРДО";		

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции
&НаСервере
Функция ВидОплаты_8371(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
	Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.02.7");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ПФондСтрахЧРДО(лим)";
		
		Стр_ТЗ_ОтражениеВБухУчете20_1 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30500100");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоКт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20_1.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаВР = СтрТаблицаЗарплаты.Сумма * (-1);
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_1.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ТекстВидаОплатыИАСУП = "ПФондСтрахЧРДО(лим)";

		Стр_ТЗ_ОтражениеВБухУчете20_2 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30000000");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.02.7");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_2.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ТекстВидаОплатыИАСУП = "ПФондСтрахЧРДО(лим)";	

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции


&НаСервере
Функция ВидОплаты_6010(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
	Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп8ст255;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма /2;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "КомпЗаНеиспользОтп/Увольн";
		
		Стр_ТЗ_ОтражениеВБухУчете20_1 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20030200");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоКт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20_1.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаВР = СтрТаблицаЗарплаты.Сумма /2 * (-1);
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_1.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ТекстВидаОплатыИАСУП = "КомпЗаНеиспользОтп/Увольн";

		Стр_ТЗ_ОтражениеВБухУчете20_2 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20010200");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп8ст255;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаНУ = СтрТаблицаЗарплаты.Сумма /2;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_2.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ТекстВидаОплатыИАСУП = "КомпЗаНеиспользОтп/Увольн";	

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции





&НаСервере
Функция ВидОплаты_83B6(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
	Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.03");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.Резервы.НайтиПоКоду("БП-000004");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.11");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ФондСоцСтрахНСПремКПЭГод";
		
		Стр_ТЗ_ОтражениеВБухУчете20_1 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30500100");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.03");
		Стр_ТЗ_ОтражениеВБухУчете20_1.СубконтоКт1 = Справочники.Резервы.НайтиПоКоду("БП-000004");
		Стр_ТЗ_ОтражениеВБухУчете20_1.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаВР = СтрТаблицаЗарплаты.Сумма * (-1);
		Стр_ТЗ_ОтражениеВБухУчете20_1.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_1.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_1.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_1.ТекстВидаОплатыИАСУП = "ФондСоцСтрахНСПремКПЭГод";

		Стр_ТЗ_ОтражениеВБухУчете20_2 = ТЗ_ОтражениеВБухУчете20.Добавить();
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30000000");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.11");
		Стр_ТЗ_ОтражениеВБухУчете20_2.СубконтоКт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Сумма = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20_2.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20_2.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20_2.ТекстВидаОплатыИАСУП = "ФондСоцСтрахНСПремКПЭГод";		

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции

&НаСервере
Функция ВидОплаты_8B1A(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30500100");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.02");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное об-во по выплате вознаграждений КПЭ 2022");
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "РезервБонусФССОбщ";
	

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции

&НаСервере
Функция ВидОплаты_8BK1(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30500100");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.02");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное об-во по выплате вознаграждений КПЭ 2022");
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "8BK1 - описания нет";
	

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции



&НаСервере
Функция ВидОплаты_8B2A(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30500100");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.02");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное об-во по выплате вознаграждений КПЭ 2022");
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "РезервБонусНСОбщ";
	

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции

&НаСервере
Функция ВидОплаты_8RA1(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30500200");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "РезВыплФонОснОтпОбщ";
	

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции

&НаСервере
Функция ВидОплаты_8RA2(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("30500200");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "РезВыплФонОснОтпНСОбщ";
	

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции

&НаСервере
Функция ВидОплаты_922A(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20030100");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.02");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное об-во по выплате вознаграждений КПЭ 2022");
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "РезервБонусОбщ";
	

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции

&НаСервере
Функция ВидОплаты_9RA1(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20030200");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("96.01");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Справочники.Резервы.НайтиПоНаименованию("Оценочное обязательство по ежегодным отпускам");
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "Резерв на осн. отпуск общ";
	

	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции

&НаСервере
Функция ВидОплаты_5100(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.02");;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("2413000");
		//Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт2 = Справочники.Номенклатура.НайтиПоКоду(""); //Надо установить Номенклатуру
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		//Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп1ст255;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ЕжемКомпУходРебДо3хЛет";
		
	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции


&НаСервере
Функция ВидОплаты_1110(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20010200");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
		
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
						
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ИСН РВ в командировке";
		

	
	
	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции

&НаСервере
Функция ВидОплаты_0225(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20010200");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
		
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
						
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ОплРабВыхДопДенОтдК(О+ИВ)";
		

	
	
	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции

&НаСервере
Функция ВидОплаты_0205(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20010200");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
		
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
						
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ОплРабВыхДопДеньОтд(О+ИВ)";
		

	
	
	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции
&НаСервере
Функция ВидОплаты_0206(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20010200");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
		
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
						
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ОплатаЗаРаботуВых(Окл+ИВ)";
		

	
	
	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции
&НаСервере
Функция ВидОплаты_0207(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20010200");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп3ст255;
		
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
						
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "ДоплатаЗаРаботуВых(Ок+ИВ)";
		

	
	
	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции







&НаСервере
Функция ВидОплаты_НачинаетсяНа424(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20010200");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп11ст255;
		
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
						
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "424...";
		

	
	
	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции



&НаСервере
Функция ВидОплаты_НачинаетсяНа426(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20010200");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп12ст255;
		
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
						
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "426...";
		

	
	
	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции




&НаСервере
Функция ВидОплаты_5000(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = СчЗт;
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.СтатьиЗатрат.НайтиПоКоду("20010200");
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		//Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп1ст255;
		//Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = СтрТаблицаЗарплаты.Сумма;
						
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "БольничнЗаСчетРаботодат";
		

	
	
	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции
&НаСервере
Функция ВидОплаты_5311(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)
		Стр_ТЗ_ОтражениеВБухУчете20.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.02");
		Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт1 = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("2413000");
		//Стр_ТЗ_ОтражениеВБухУчете20.СубконтоДт2 = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("2413000"); надо заполнить из справочника номенклатура...
		Стр_ТЗ_ОтражениеВБухУчете20.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
		//Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп1ст255;
		//Стр_ТЗ_ОтражениеВБухУчете20.СубконтоКт1 = Перечисления.ВидыНачисленийОплатыТрудаДляНУ.пп2ст255;
		Стр_ТЗ_ОтражениеВБухУчете20.Сумма = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.Физлицо = ФЛСсылка;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеДт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.ПодразделениеКт = Подразделение;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаПР = 0;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаВР = СтрТаблицаЗарплаты.Сумма;
		Стр_ТЗ_ОтражениеВБухУчете20.СуммаНУ = 0;
						
		Стр_ТЗ_ОтражениеВБухУчете20.СтрокаИАСУП = СтрокаИАСУПЗапись(СтрТаблицаЗарплаты);
		Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП = СтрТаблицаЗарплаты.ВидОплаты;
		Стр_ТЗ_ОтражениеВБухУчете20.ТекстВидаОплатыИАСУП = "МатПомРожд/УсРеб(<50000)";
		

	
	
	Возврат Стр_ТЗ_ОтражениеВБухУчете20;
КонецФункции





&НаСервере
Процедура ОбработкаВидаОплаты(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт)

//////"/32E" +++++	
Если ВидОплаты = "/32E" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_32Е(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"/32E"-----	

//////"0010" +++++	
Если ВидОплаты = "0010" или ВидОплаты = "10" или ВидОплаты = "1010" ИЛИ ВидОплаты = "1024" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_0010_1010_1024(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"0010"-----	

//////"3000" +++++	
Если ВидОплаты = "3000" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_3000(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"3000"-----

//////"0020" или "20" +++++	
Если ВидОплаты = "20" или ВидОплаты = "0020" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_20(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"0020" или "20"-----
//////"1221" +++++	
Если ВидОплаты = "1221" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_1221(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"1221"-----
//////"8302" +++++	
Если ВидОплаты = "8302" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_8302(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"8302"-----
//////"8303" +++++	
Если ВидОплаты = "8303" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_8303(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"8303"-----
//////"8305" +++++	
Если ВидОплаты = "8305" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_8305(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"8305"-----
//////"8311" +++++	
Если ВидОплаты = "8311" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_8311(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"8311"-----


//////"83B1" +++++	
Если ВидОплаты = "83B1" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_83B1(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"83B1"-----

//////"83B3" +++++	
Если ВидОплаты = "83B3" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_83B3(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"83B3"-----

//////"83B5" +++++	
Если ВидОплаты = "83B5" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_83B5(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"83B5"-----

//////"83B6" +++++	
Если ВидОплаты = "83B6" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_83B6(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"83B6"-----

//////"8B1A" +++++	
Если ВидОплаты = "8B1A" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_8B1A(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"8B1A"-----

//////"8B2A" +++++	
Если ВидОплаты = "8B2A" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_8B2A(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"8B2A"-----

//////"8RA1" +++++	
Если ВидОплаты = "8RA1" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_8RA1(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"8RA1"-----

//////"8RA2" +++++	
Если ВидОплаты = "8RA2" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_8RA2(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"8RA2"-----

//////"922A" +++++	
Если ВидОплаты = "922A" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_922A(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"922A"-----

//////"9RA1" +++++	
Если ВидОплаты = "9RA1" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_9RA1(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"9RA1"-----

//////"5100" +++++	
Если ВидОплаты = "5100" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_5100(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"5100"-----

//////"2000" +++++	
Если ВидОплаты = "2000" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_2000(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"2000"-----
//////"8000" +++++	
Если ВидОплаты = "8000" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_8000(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"8000"-----
//////"8121" +++++	
Если ВидОплаты = "8121" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_8121(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"8121"-----
//////"1273" +++++	
Если ВидОплаты = "1273" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_1273(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"1273"-----
//////"5000" +++++	
Если ВидОплаты = "5000" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_5000(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"5000"-----
//////"8342" +++++	
Если ВидОплаты = "8342" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_8342(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"8342"-----
//////"8343" +++++	
Если ВидОплаты = "8343" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_8343(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"8343"-----
//////"8345" +++++	
Если ВидОплаты = "8345" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_8345(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"8345"-----
//////"8351" +++++	
Если ВидОплаты = "8351" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_8351(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"8351"-----
//////"8362" +++++	
Если ВидОплаты = "8362" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_8362(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"8362"-----
//////"8363" +++++	
Если ВидОплаты = "8363" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_8363(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"8363"-----
//////"8365" +++++	
Если ВидОплаты = "8365" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_8365(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"8365"-----
//////"8371" +++++	
Если ВидОплаты = "8371" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_8371(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"8371"-----
////////"5311" +++++	
Если ВидОплаты = "5311" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_5311(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
////////"5311"-----
////////"8BK1" +++++	
Если ВидОплаты = "8BK1" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_8BK1(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
////////"8BK1"-----
////////"6010" +++++	
Если ВидОплаты = "6010" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_6010(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
////////"6010"-----
////////"424..." +++++	
Если ВидОплаты = "4241"
	ИЛИ ВидОплаты = "4247" 
	ИЛИ ВидОплаты = "4248" 
	ИЛИ ВидОплаты = "424B" 
	ИЛИ ВидОплаты = "424C" 
	Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_НачинаетсяНа424(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
////////"424"-----
////////"426..." +++++	
Если ВидОплаты = "4261" 
	ИЛИ ВидОплаты = "4268" 
	ИЛИ ВидОплаты = "4267" 
	ИЛИ ВидОплаты = "426B" 
	ИЛИ ВидОплаты = "426C" 
	Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_НачинаетсяНа426(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
////////"426"-----
////////"1110" +++++	
Если ВидОплаты = "1110" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_1110(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
////////"1110"-----

////////"0225" +++++	
Если ВидОплаты = "0225" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_0225(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
////////"0225"-----
//////"0205" +++++	
Если ВидОплаты = "0205" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_0205(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"0205"-----
//////"0206" +++++	
Если ВидОплаты = "0206" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_0206(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"0206"-----
//////"0207" +++++	
Если ВидОплаты = "0207" Тогда
	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_0207(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
КонецЕсли; 
//////"0207"-----
////////"" +++++	
//Если ВидОплаты = "" Тогда
//	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
//КонецЕсли; 
////////""-----
////////"" +++++	
//Если ВидОплаты = "" Тогда
//	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
//КонецЕсли; 
////////""-----
////////"" +++++	
//Если ВидОплаты = "" Тогда
//	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
//КонецЕсли; 
////////""-----
////////"" +++++	
//Если ВидОплаты = "" Тогда
//	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
//КонецЕсли; 
////////""-----
////////"" +++++	
//Если ВидОплаты = "" Тогда
//	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
//КонецЕсли; 
////////""-----
////////"" +++++	
//Если ВидОплаты = "" Тогда
//	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
//КонецЕсли; 
////////""-----
////////"" +++++	
//Если ВидОплаты = "" Тогда
//	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
//КонецЕсли; 
////////""-----
////////"" +++++	
//Если ВидОплаты = "" Тогда
//	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
//КонецЕсли; 
////////""-----
////////"" +++++	
//Если ВидОплаты = "" Тогда
//	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
//КонецЕсли; 
////////""-----
////////"" +++++	
//Если ВидОплаты = "" Тогда
//	Стр_ТЗ_ОтражениеВБухУчете20 = ВидОплаты_(Стр_ТЗ_ОтражениеВБухУчете20,ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
//КонецЕсли; 
////////""-----







	
Конецпроцедуры	


&НаСервере
Функция ТабличныйДокументВТаблицуЗначений(ТабДок)
 
ТаблицаДанныеДокумента = Новый ТаблицаЗначений;
 
Для СчетчикКолонок = 1 По ТабДок.ШиринаТаблицы Цикл
 
ИмяКолонки = "_" + СчетчикКолонок;
ТаблицаДанныеДокумента.Колонки.Добавить(ИмяКолонки);
 
	Для СчетчикСтрок = 1 По ТабДок.ВысотаТаблицы Цикл
	 
		ИндексСтроки = СчетчикСтрок - 1;
		 
		Если СчетчикКолонок = 1 Тогда
			СтрокаТаблицы = ТаблицаДанныеДокумента.Добавить();
			Иначе
			СтрокаТаблицы = ТаблицаДанныеДокумента[ИндексСтроки];
		КонецЕсли;
		 
		ТекущаяЯчейка = ТабДок.Область(СчетчикСтрок, СчетчикКолонок);
		ЗначениеЯчейки = ТекущаяЯчейка.Текст;
		 
		СтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
	 
	КонецЦикла
КонецЦикла;

ТаблицаЗарплаты = Новый ТаблицаЗначений;
//ТаблицаЗарплаты.Колонки.Добавить("ТабНомер");
//ТаблицаЗарплаты.Колонки.Добавить("ДляПериод");
//ТаблицаЗарплаты.Колонки.Добавить("ВПериод");
//ТаблицаЗарплаты.Колонки.Добавить("ВидОплаты");
//ТаблицаЗарплаты.Колонки.Добавить("ТекстВидаОплаты");
//ТаблицаЗарплаты.Колонки.Добавить("СчетДт");
//ТаблицаЗарплаты.Колонки.Добавить("СубконтоДт1");
//ТаблицаЗарплаты.Колонки.Добавить("СубконтоДт2");
//ТаблицаЗарплаты.Колонки.Добавить("СубконтоДт3");
//ТаблицаЗарплаты.Колонки.Добавить("СубконтоДт4");
////ТаблицаЗарплаты.Колонки.Добавить("СубконтоДт5");
//ТаблицаЗарплаты.Колонки.Добавить("СубконтоДт6");
//ТаблицаЗарплаты.Колонки.Добавить("СубконтоДт7");
//ТаблицаЗарплаты.Колонки.Добавить("СчетКт");
//ТаблицаЗарплаты.Колонки.Добавить("СубконтоКт1");
//ТаблицаЗарплаты.Колонки.Добавить("СубконтоКт2");
//ТаблицаЗарплаты.Колонки.Добавить("СубконтоКт3");
//ТаблицаЗарплаты.Колонки.Добавить("СубконтоКт4");
//ТаблицаЗарплаты.Колонки.Добавить("СубконтоКт5");
////ТаблицаЗарплаты.Колонки.Добавить("СубконтоКт6");
////ТаблицаЗарплаты.Колонки.Добавить("СубконтоКт7");
//ТаблицаЗарплаты.Колонки.Добавить("Содержание");
//ТаблицаЗарплаты.Колонки.Добавить("Количество");
//ТаблицаЗарплаты.Колонки.Добавить("Сумма");
//ТаблицаЗарплаты.Колонки.Добавить("СубконтоДт5");
//ТаблицаЗарплаты.Колонки.Добавить("Валюта");
ТаблицаЗарплаты.Колонки.Добавить("_1");
ТаблицаЗарплаты.Колонки.Добавить("_2");
ТаблицаЗарплаты.Колонки.Добавить("_3");
ТаблицаЗарплаты.Колонки.Добавить("_4");
ТаблицаЗарплаты.Колонки.Добавить("_5");
ТаблицаЗарплаты.Колонки.Добавить("_6");
ТаблицаЗарплаты.Колонки.Добавить("_7");
ТаблицаЗарплаты.Колонки.Добавить("_8");
ТаблицаЗарплаты.Колонки.Добавить("_9");
ТаблицаЗарплаты.Колонки.Добавить("_10");
ТаблицаЗарплаты.Колонки.Добавить("_11");
ТаблицаЗарплаты.Колонки.Добавить("_12");
ТаблицаЗарплаты.Колонки.Добавить("_13");
ТаблицаЗарплаты.Колонки.Добавить("_14");
ТаблицаЗарплаты.Колонки.Добавить("_15");
ТаблицаЗарплаты.Колонки.Добавить("_16");
ТаблицаЗарплаты.Колонки.Добавить("_17");
ТаблицаЗарплаты.Колонки.Добавить("_18");
ТаблицаЗарплаты.Колонки.Добавить("_19");
ТаблицаЗарплаты.Колонки.Добавить("_20");
ТаблицаЗарплаты.Колонки.Добавить("_21");
ТаблицаЗарплаты.Колонки.Добавить("_22");
ТаблицаЗарплаты.Колонки.Добавить("_23");
ТаблицаЗарплаты.Колонки.Добавить("_24");
//ТаблицаЗарплаты.Колонки.Добавить("_");
//ТаблицаЗарплаты.Колонки.Добавить("_");
//ТаблицаЗарплаты.Колонки.Добавить("_");



ИндексТЗ = 0;
Пока ИндексТЗ < ТаблицаДанныеДокумента.Количество()-1 Цикл
	 ИндексТЗ = ИндексТЗ + 1;
	 СтрТаблицаДанныеДокумента =  ТаблицаДанныеДокумента.Получить(ИндексТЗ);
	 
	 СтрТаблицаЗарплаты = ТаблицаЗарплаты.Добавить();
	 СтрТаблицаЗарплаты._1 = СтрТаблицаДанныеДокумента._1;
	 СтрТаблицаЗарплаты._2 = СтрТаблицаДанныеДокумента._2;
	 СтрТаблицаЗарплаты._3 = СтрТаблицаДанныеДокумента._3;
	 СтрТаблицаЗарплаты._4 = СтрТаблицаДанныеДокумента._4;
	 СтрТаблицаЗарплаты._5 = СтрТаблицаДанныеДокумента._5;
	 СтрТаблицаЗарплаты._6 = СтрТаблицаДанныеДокумента._6;
	 СтрТаблицаЗарплаты._7 = СтрТаблицаДанныеДокумента._7;
	 СтрТаблицаЗарплаты._8 = СтрТаблицаДанныеДокумента._8;
	 СтрТаблицаЗарплаты._9 = СтрТаблицаДанныеДокумента._9 ;
	 СтрТаблицаЗарплаты._10 = СтрТаблицаДанныеДокумента._10;
	 СтрТаблицаЗарплаты._11 = СтрТаблицаДанныеДокумента._11;
	 СтрТаблицаЗарплаты._12 = СтрТаблицаДанныеДокумента._12;
	 СтрТаблицаЗарплаты._13 = СтрТаблицаДанныеДокумента._13;
	 СтрТаблицаЗарплаты._14 = СтрТаблицаДанныеДокумента._14;
	 СтрТаблицаЗарплаты._15 = СтрТаблицаДанныеДокумента._15;
	 СтрТаблицаЗарплаты._16 = СтрТаблицаДанныеДокумента._16;
	 СтрТаблицаЗарплаты._17 = СтрТаблицаДанныеДокумента._17;
	 СтрТаблицаЗарплаты._18 = СтрТаблицаДанныеДокумента._18;
	 СтрТаблицаЗарплаты._19 = СтрТаблицаДанныеДокумента._19;
	 СтрТаблицаЗарплаты._20 = СтрТаблицаДанныеДокумента._20;
	 СтрТаблицаЗарплаты._21 = СтрТаблицаДанныеДокумента._21;
	 СтрТаблицаЗарплаты._22 = СтрТаблицаДанныеДокумента._22;
	 СтрТаблицаЗарплаты._23 = СтрТаблицаДанныеДокумента._23;
	 СтрТаблицаЗарплаты._24 = СтрТаблицаДанныеДокумента._24;
	 
	 //СтрТаблицаЗарплаты.ТабНомер = СтрТаблицаДанныеДокумента._1 ; 
	 //СтрТаблицаЗарплаты.ДляПериод = СтрТаблицаДанныеДокумента._2 ; 
	 //СтрТаблицаЗарплаты.ВПериод = СтрТаблицаДанныеДокумента._3 ; 
	 //СтрТаблицаЗарплаты.ВидОплаты = СтрТаблицаДанныеДокумента._4 ; 
	 //СтрТаблицаЗарплаты.ТекстВидаОплаты = СтрТаблицаДанныеДокумента._5 ; 
	 //СтрТаблицаЗарплаты.СчетДт = СтрТаблицаДанныеДокумента._6 ;
	 //СтрТаблицаЗарплаты.СубконтоДт1 = СтрТаблицаДанныеДокумента._7 ; 
	 //СтрТаблицаЗарплаты.СубконтоДт2 = СтрТаблицаДанныеДокумента._8 ; 
	 //СтрТаблицаЗарплаты.СубконтоДт3 = СтрТаблицаДанныеДокумента._9 ;
	 //СтрТаблицаЗарплаты.СубконтоДт4 = СтрТаблицаДанныеДокумента._10 ; 
	 //СтрТаблицаЗарплаты.СубконтоДт6 = СтрТаблицаДанныеДокумента._11 ; 
	 //СтрТаблицаЗарплаты.СубконтоДт7 = СтрТаблицаДанныеДокумента._12 ;
	 //СтрТаблицаЗарплаты.СчетКт = СтрТаблицаДанныеДокумента._13 ; 
	 //СтрТаблицаЗарплаты.СубконтоКт1 = СтрТаблицаДанныеДокумента._14 ; 
	 //СтрТаблицаЗарплаты.СубконтоКт2 = СтрТаблицаДанныеДокумента._15 ;
	 //СтрТаблицаЗарплаты.СубконтоКт3 = СтрТаблицаДанныеДокумента._16 ; 
	 //СтрТаблицаЗарплаты.СубконтоКт4 = СтрТаблицаДанныеДокумента._17 ; 
	 //СтрТаблицаЗарплаты.СубконтоКт5 = СтрТаблицаДанныеДокумента._18 ;
	 //СтрТаблицаЗарплаты.Содержание = СтрТаблицаДанныеДокумента._19 ; 
	 //Попытка
	 //    СтрТаблицаЗарплаты.Количество = Число(СтрТаблицаДанныеДокумента._20) ; 
	 //	Исключение
	 //    СтрТаблицаЗарплаты.Количество = 0;
	 //Конецпопытки; 
	 //Попытка
	 //   СтрТаблицаЗарплаты.Сумма = Число(СтрТаблицаДанныеДокумента._21) ;
	 //	Исключение
	 //   СтрТаблицаЗарплаты.Сумма = 0;
	 //Конецпопытки;
	 //
	 //
	
////	 СтрТаблицаЗарплаты.СубконтоДт5 = СтрТаблицаДанныеДокумента._22 ; 
	 //СтрТаблицаЗарплаты.Валюта = СтрТаблицаДанныеДокумента._23 ; 
КонецЦикла;

////заполняем пробелы в подразделении
//	КоличествоСтрТЗ = ТаблицаЗарплаты.Количество();
//			Пока КоличествоСтрТЗ > 0 Цикл
//				КоличествоСтрТЗ = КоличествоСтрТЗ - 1;
//				СтрТЗ = ТаблицаЗарплаты.Получить(КоличествоСтрТЗ);
//				Если СокрЛП(Строка(СтрТЗ.СубконтоДТ1)) = "" И КоличествоСтрТЗ < (ТаблицаЗарплаты.Количество()-1) Тогда
//					 //СтрТЗ.СубконтоДТ1 = ТаблицаЗарплаты.Получить(КоличествоСтрТЗ + 1).СубконтоДТ1;
//					 НомерТекущий = КоличествоСтрТЗ+1;
//					 СубконтоДТ1 = "";
//					 Пока СубконтоДТ1 = "" Цикл
//						 Суб = ТаблицаЗарплаты.Получить(НомерТекущий).СубконтоДТ1;
//						 Если Суб <> "" Тогда
//							 СубконтоДТ1 = Суб;
//						 КонецЕсли;	 
//						 НомерТекущий = НомерТекущий + 1;
//					 КонецЦикла;
//					 
//					 СтрТЗ.СубконтоДТ1 = СубконтоДТ1;
//					 
//				КонецЕсли;
//			КонецЦикла;

/////


ВхСтруктура = Новый Структура;


//ТЗ_ОтражениеВБухУчете20 = Новый ТаблицаЗначений;
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("СчетДт");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("СубконтоДт1");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("СубконтоДт2");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("СубконтоДт3");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("СчетКт");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("СубконтоКт1");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("СубконтоКт2");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("СубконтоКт3");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("Сумма");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("СуммаЗнакМинус");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("ОтражениеВУСН");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("ВидРасчета");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("Физлицо");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("ВидНачисленияПоСт255НК");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("ВидНачисленияУдержания");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("ПодразделениеДт");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("ПодразделениеКт");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("СуммаПР");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("СуммаПРЗнакМинус");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("СуммаВР");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("СуммаВРЗнакМинус");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("СуммаНУ");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("СуммаНУЗнакМинус");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("СтрокаИАСУП");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("ВидОплатыИАСУП");
//ТЗ_ОтражениеВБухУчете20.Колонки.Добавить("ТекстВидаОплатыИАСУП");

//СчетЗатратПодразделения = "";
//СчетЗатратФизЛицо = "";
//ТабНомерСотрудника = "";
//КодПодразделенияИАСУП = "";
//ТЗПроблемныйВидОплаты = НОВЫЙ ТаблицаЗначений;
//ТЗПроблемныйВидОплаты.Колонки.Добавить("ВидОплатыИАСУП");
//Для Каждого СтрТаблицаЗарплаты ИЗ ТаблицаЗарплаты Цикл
//	
//	Если ТабНомерСотрудника <> СтрТаблицаЗарплаты.ТабНомер Тогда
//	    ТабНомерСотрудника =  СтрТаблицаЗарплаты.ТабНомер;
//		 СчЗт="";
//		 Подразделение = "";
//		 ФЛСсылка = "";
//		///////////////////////////////////////////////////////////////
//		СчетЗатратПодразделения = "";
//		ЗапросПодразделение = Новый Запрос;
//		ЗапросПодразделение.Текст = "ВЫБРАТЬ
//		| ДополнительныеСведения.Объект
//		| ИЗ
//		|   РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
//		|ГДЕ
//		|   ДополнительныеСведения.Значение = &Значение
//		|   И ДополнительныеСведения.Свойство = &Свойство
//		|";
//		Значение =  СтрТаблицаЗарплаты.СубконтоДт1;
//		ЗначениеПодразделения = СтрТаблицаЗарплаты.СубконтоДт1;
//		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ИдентификаторМВЗ");
//		ЗапросПодразделение.УстановитьПараметр("Значение",Значение);
//		ЗапросПодразделение.УстановитьПараметр("Свойство",Свойство);
//		ТЗ_Подразделение = ЗапросПодразделение.Выполнить().Выгрузить();
//		Если ТЗ_Подразделение.Количество() <> 1 Тогда
//			 Сообщение = Новый СообщениеПользователю();
//				Сообщение.Текст = "На одно подразделение ("+Строка(Значение)+") 0 или 2(и более) ИдентификаторовМВЗ назначено, "+Строка(ТЗ_Подразделение.Количество());
//				Сообщение.Сообщить();
//		КонецЕсли;
//		Если ТЗ_Подразделение.Количество() = 1 Тогда
//			СтрПодразделение = ТЗ_Подразделение.Получить(0);
//			Подразделение = СтрПодразделение.Объект;
//			КодПодразделенияИАСУП = Подразделение;
//			ЗапросПодразделениеСчетЗатрат = Новый Запрос;
//			ЗапросПодразделениеСчетЗатрат.Текст = "ВЫБРАТЬ
//			| ДополнительныеСведения.Значение КАК ЗНАЧЕНИЕ
//			| ИЗ
//			|   РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
//			|ГДЕ
//			|   ДополнительныеСведения.Объект = &Подразделение
//			|   И ДополнительныеСведения.Свойство = &Свойство
//			|";
//			Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("СчетЗатратПодразделения");
//			
//			ЗапросПодразделениеСчетЗатрат.УстановитьПараметр("Подразделение",Подразделение);
//			ЗапросПодразделениеСчетЗатрат.УстановитьПараметр("Свойство",Свойство);
//			ТЗ_ПодразделениеСчетЗатрат = ЗапросПодразделениеСчетЗатрат.Выполнить().Выгрузить();
//			Если ТЗ_ПодразделениеСчетЗатрат.Количество() <> 1 Тогда
//			 Сообщение = Новый СообщениеПользователю();
//				Сообщение.Текст = "На одно подразделение 0 или 2(и более) Счетов затрат назначено";
//				Сообщение.Сообщить();
//			КонецЕсли;
//			Если ТЗ_ПодразделениеСчетЗатрат.Количество() = 1 Тогда
//				СтрТЗ_ПодразделениеСчетЗатрат = ТЗ_ПодразделениеСчетЗатрат.Получить(0);
//				СчетЗатратПодразделения = СтрТЗ_ПодразделениеСчетЗатрат.Значение;
//			КонецЕсли;
//		КонецЕсли;
//		////////////////////////////////////////////////////////////////
//		////////////////////////////////////////////////////////////////
//		СчетЗатратФизЛицо = "";
//		ЗапросФИЗЛицо = Новый Запрос;
//		ЗапросФИЗЛицо.Текст = "ВЫБРАТЬ
//		| ДополнительныеСведения.Объект
//		| ИЗ
//		|   РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
//		|ГДЕ
//		|   ДополнительныеСведения.Значение = &Значение
//		|   И ДополнительныеСведения.Свойство = &Свойство
//		|";
//		Значение =  СтрТаблицаЗарплаты.ТабНомер;
//		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ТабНомерИАСУП");
//		ЗапросФИЗЛицо.УстановитьПараметр("Значение",Значение);
//		ЗапросФИЗЛицо.УстановитьПараметр("Свойство",Свойство);
//		ТЗ_ФизЛицо = ЗапросФИЗЛицо.Выполнить().Выгрузить();
//		Если ТЗ_ФизЛицо.Количество() <> 1 Тогда
//			 Сообщение = Новый СообщениеПользователю();
//				Сообщение.Текст = "На одно ФизЛицо ("+Строка(Значение)+") 0 или 2(и более) ТабНомерИАСУП назначено";
//				Сообщение.Сообщить();
//		КонецЕсли;
//		Если ТЗ_ФизЛицо.Количество() = 1 Тогда
//			СтрФЛ = ТЗ_ФизЛицо.Получить(0);
//			ФЛ = СтрФЛ.Объект;
//			ФЛСсылка = ФЛ;
//			ЗапросФЛСчетЗатрат = Новый Запрос;
//			ЗапросФЛСчетЗатрат.Текст = "ВЫБРАТЬ
//			| ДополнительныеСведения.Значение
//			| ИЗ
//			|   РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
//			|ГДЕ
//			|   ДополнительныеСведения.Объект = &ФЛСсылка
//			|   И ДополнительныеСведения.Свойство = &Свойство
//			|";
//			Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("СчетЗатратЗП");
//			ЗапросФЛСчетЗатрат.УстановитьПараметр("ФЛСсылка",ФЛСсылка);
//			ЗапросФЛСчетЗатрат.УстановитьПараметр("Свойство",Свойство);
//			ТЗ_ФЛСчетЗатрат = ЗапросФЛСчетЗатрат.Выполнить().Выгрузить();
//			Если ТЗ_ФЛСчетЗатрат.Количество() <> 1 Тогда
//			 Сообщение = Новый СообщениеПользователю();
//				Сообщение.Текст = "На одно ФизЛицо ("+Строка(ФЛСсылка)+") 0 или 2(и более) Счетов затрат назначено";
//				Сообщение.Сообщить();
//			КонецЕсли;
//			Попытка
//				Если ТЗ_ФЛСчетЗатрат.Количество() = 1 Тогда
//					СтрТЗ_СчетЗатратФизЛицо = ТЗ_ПодразделениеСчетЗатрат.Получить(0);
//					СчетЗатратФизЛицо = СтрТЗ_СчетЗатратФизЛицо.Значение;
//				КонецЕсли;
//			Исключение
//				СчетЗатратФизЛицо = "44.01";
//			КонецПопытки;
//		КонецЕсли;

//		
//				Если СокрЛП(Строка(СчетЗатратФизЛицо)) <> "" И СокрЛП(Строка(СчетЗатратФизЛицо)) <> СокрЛП(Строка(СчетЗатратПодразделения)) Тогда
//					СчЗт = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СокрЛП(Строка(СчетЗатратФизЛицо)));
//				Иначе
//					СчЗт = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СокрЛП(Строка(СчетЗатратПодразделения)));
//				КонецЕсли;	
//		////////////////////////////////////////////////////////////////
//	КонецЕсли;
//	Если Строка(СчЗт)="" Тогда
//		 НомерМВЗ = Сред(ЗначениеПодразделения, 6, 1); //ВИдентификаторе МВЗ определяем 6 символ от Y (включая Y)
//		
//		 СчЗт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01");
//		 
//		Если НомерМВЗ = "2" Тогда
//	     	СчЗт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("20.01");
//		КонецЕсли;
//		Если НомерМВЗ = "5" Тогда
//	     	СчЗт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("25");
//		КонецЕсли;
//		Если НомерМВЗ = "6" Тогда
//	     	СчЗт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("26");
//		КонецЕсли;
//		Если НомерМВЗ = "4" Тогда
//	     	СчЗт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01");
//		КонецЕсли;

//	КонецЕсли;
//	Стр_ТЗ_ОтражениеВБухУчете20 = ТЗ_ОтражениеВБухУчете20.Добавить();
//			
//	ОбработкаВидаОплаты(Стр_ТЗ_ОтражениеВБухУчете20,СтрТаблицаЗарплаты.ВидОплаты,СтрТаблицаЗарплаты,Подразделение,ФЛСсылка,СчЗт);
//	
//	Если Строка(Стр_ТЗ_ОтражениеВБухУчете20.ВидОплатыИАСУП) = "" Тогда
//		        СтрТЗПроблемныйВидОплаты = ТЗПроблемныйВидОплаты.Добавить();
//				СтрТЗПроблемныйВидОплаты.ВидОплатыИАСУП =  СтрТаблицаЗарплаты.ВидОплаты;
//				//Сообщение = Новый СообщениеПользователю();
//				//Сообщение.Текст = "На вид оплаты "+СтрТаблицаЗарплаты.ВидОплаты+" нет процесса формирования проводки !!!";
//				//Сообщение.Сообщить();
//		
//	КонецЕсли;	
//	
//КонецЦикла;
//ТЗПроблемныйВидОплаты.Свернуть("ВидОплатыИАСУП");
//Если  ТЗПроблемныйВидОплаты.Количество() > 0 Тогда
//	Для Каждого СтрТЗПроблемныйВидОплаты ИЗ ТЗПроблемныйВидОплаты Цикл
//		Сообщение = Новый СообщениеПользователю();
//		Сообщение.Текст = "На вид оплаты "+СтрТЗПроблемныйВидОплаты.ВидОплатыИАСУП+" нет процесса формирования проводки !!!";
//		Сообщение.Сообщить();
//	КонецЦикла;	


//КонецЕсли;
ТЗвСтруктуру1(ТаблицаЗарплаты, ВхСтруктура);

//Возврат ТаблицаДанныеДокумента;
Возврат ВхСтруктура;
 
КонецФункции




&НаСервере
Процедура ТЗвСтруктуру1(ИсхТаблицаЗначений, ВхСтруктура) //ВхСтруктура = Новый Структура;

    СписокКолонокТЗ = "";
    Для Каждого КолонкаТЗ Из ИсхТаблицаЗначений.Колонки Цикл
        СписокКолонокТЗ = СписокКолонокТЗ + ?(СписокКолонокТЗ = "", "", ",") + КолонкаТЗ.Имя;
		
	//	Сообщение = Новый СообщениеПользователю();
	//Сообщение.Текст = "КолонкаТЗ.Имя - "+Строка(КолонкаТЗ.Имя);
	//Сообщение.Сообщить();

		
    КонецЦикла;
	НомерИсхТЗ = 0;
	
	//Сообщение = Новый СообщениеПользователю();
	//Сообщение.Текст = "ИсхТаблицаЗначений количество - "+Строка(ИсхТаблицаЗначений.Количество());
	//Сообщение.Сообщить();

	
	
	
    //Цикл по ТЗ
	Для Каждого СтрТЗ Из ИсхТаблицаЗначений Цикл
		НомерИсхТЗ = НомерИсхТЗ + 1;
		
	//	Сообщение = Новый СообщениеПользователю();
	//Сообщение.Текст = "НомерИсхТЗ - "+Строка(НомерИсхТЗ);
	//Сообщение.Сообщить();

        //Структура для каждой строки
        СтруктураСтроки = Новый Структура(СписокКолонокТЗ);
		
		//Копируем значения строк в структуру
        ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрТЗ);

        //Выгрузим в структуру по индексу
		
	//		Сообщение = Новый СообщениеПользователю();
	//Сообщение.Текст = "ИсхТаблицаЗначенийИндекс(СтрТЗ) - "+Строка(ИсхТаблицаЗначений.Индекс(СтрТЗ));
	//Сообщение.Сообщить();
	
		ИсхТаблицаЗначенийИндекс = Строка(ИсхТаблицаЗначений.Индекс(СтрТЗ));
		ИсхТаблицаЗначенийИндекс = СтрЗаменить(ИсхТаблицаЗначенийИндекс, Символы.НПП, "");
		ВхСтруктура.Вставить("Строка" + ИсхТаблицаЗначенийИндекс, СтруктураСтроки);
        //ВхСтруктура.Вставить("Строка" + ИсхТаблицаЗначений.Индекс(СтрТЗ), СтруктураСтроки);
    КонецЦикла;

КонецПроцедуры

Функция СтруктураВТаблицуЗначенийСОписаниемТипов(Структра) 
	
	ТЗ = Новый ТаблицаЗначений;
	НовСтр=ТЗ.Добавить();
	ОписаниеТиповСсылок = Новый ОписаниеТипов(Новый ОписаниеТипов(Справочники.ТипВсеСсылки(), Документы.ТипВсеСсылки().Типы(),Перечисления.ТипВсеСсылки().Типы()));

	Для Каждого ТекЭлем из Структра Цикл
		
		ТЗ.Колонки.Добавить(ТекЭлем.Ключ, 
			?(ОписаниеТиповСсылок.СодержитТип(ТипЗнч(ТекЭлем.Значение)),
			Новый ОписаниеТипов(СтрЗаменить(ТекЭлем.Значение.Метаданные().ПолноеИмя(),".","Ссылка.")),
			Новый ОписаниеТипов(Строка(ТипЗнч(ТекЭлем.Значение)))));
			
		НовСтр[ТекЭлем.Ключ] = ТекЭлем.Значение;                          
		
	КонецЦикла;
 	
	Возврат ТЗ;
	
КонецФункции

&НаКлиенте
Процедура СформироватьКакБух20(Команда)
	//Заполняем пробелы и Передаем таб.часть на сервер для обработки
	СтруктураЗП = Новый Структура;
	
	//Сообщение = Новый СообщениеПользователю();
	//Сообщение.Текст = "Общее количество колонок - "+Строка(ТабличныйДокумент.ШиринаТаблицы);
	//Сообщение.Сообщить();
	
	//СформироватьКакБух20НаСервере(СтруктураЗП,Элементы.ТабДокумент);
	СтруктураЗП = ТабличныйДокументВТаблицуЗначений(ТабличныйДокумент);
	Объект.ОтражениеВУчете.Очистить();
	Для Каждого Элемент Из СтруктураЗП Цикл
	   //Сообщить(Элемент.Ключ + "  " + Элемент.Значение);
	   если ТипЗнч(Элемент.Значение)=Тип("Структура") тогда
		   Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
	        Для Каждого Элемент2 Из Элемент.Значение Цикл
	            //Сообщить(Элемент2.Ключ + " ..... " + Элемент2.Значение);    
				Если  Элемент2.Ключ = "Физлицо" Тогда
					  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
					  Стр_ОтражениеВУчете.Физлицо = Элемент2.Значение;
				  КонецЕсли;	
				  //СчетДт
				  Если  Элемент2.Ключ = "СчетДт" Тогда
					  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
					  Стр_ОтражениеВУчете.СчетДт = Элемент2.Значение;
				  КонецЕсли;
				   Если  Элемент2.Ключ = "СчетКт" Тогда
					  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
					  Стр_ОтражениеВУчете.СчетКт = Элемент2.Значение;
				  КонецЕсли;
				  Если  Элемент2.Ключ = "Сумма" Тогда
					  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
					  Стр_ОтражениеВУчете.Сумма = Элемент2.Значение;
				  КонецЕсли;
				  Если  Элемент2.Ключ = "СуммаНУ" Тогда
					  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
					  Стр_ОтражениеВУчете.СуммаНУ = Элемент2.Значение;
				  КонецЕсли;
				  Если  Элемент2.Ключ = "СуммаВР" Тогда
					  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
					  Стр_ОтражениеВУчете.СуммаВР = Элемент2.Значение;
				  КонецЕсли;
				  Если  Элемент2.Ключ = "СуммаПР" Тогда
					  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
					  Стр_ОтражениеВУчете.СуммаПР = Элемент2.Значение;
				  КонецЕсли;


				  Если  Элемент2.Ключ = "ПодразделениеДт" Тогда
					  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
					  Стр_ОтражениеВУчете.ПодразделениеДт = Элемент2.Значение;
				  КонецЕсли;
				  Если  Элемент2.Ключ = "ПодразделениеКт" Тогда
					  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
					  Стр_ОтражениеВУчете.ПодразделениеКт = Элемент2.Значение;
				  КонецЕсли;
				  Если  Элемент2.Ключ = "СубконтоДт1" Тогда
					  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
					  Стр_ОтражениеВУчете.СубконтоДт1 = Элемент2.Значение;
				  КонецЕсли;
				  Если  Элемент2.Ключ = "СубконтоКт1" Тогда
					  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
					  Стр_ОтражениеВУчете.СубконтоКт1 = Элемент2.Значение;
				  КонецЕсли;
				  Если  Элемент2.Ключ = "СубконтоДт2" Тогда
					  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
					  Стр_ОтражениеВУчете.СубконтоДт2 = Элемент2.Значение;
				  КонецЕсли;
				  Если  Элемент2.Ключ = "СубконтоКт2" Тогда
					  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
					  Стр_ОтражениеВУчете.СубконтоКт2 = Элемент2.Значение;
				  КонецЕсли;
				  Если  Элемент2.Ключ = "СубконтоДт3" Тогда
					  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
					  Стр_ОтражениеВУчете.СубконтоДт3 = Элемент2.Значение;
				  КонецЕсли;
				  Если  Элемент2.Ключ = "СубконтоКт3" Тогда
					  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
					  Стр_ОтражениеВУчете.СубконтоКт3 = Элемент2.Значение;
				  КонецЕсли;
				  Если  Элемент2.Ключ = "СтрокаИАСУП" Тогда
					  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
					  Стр_ОтражениеВУчете.СтрокаИАСУП = Элемент2.Значение;
				  КонецЕсли;
				  Если  Элемент2.Ключ = "ВидОплатыИАСУП" Тогда
					  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
					  Стр_ОтражениеВУчете.ВидОплатыИАСУП = Элемент2.Значение;
				  КонецЕсли;
				  Если  Элемент2.Ключ = "ТекстВидаОплатыИАСУП" Тогда
					  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
					  Стр_ОтражениеВУчете.ТекстВидаОплатыИАСУП = Элемент2.Значение;
				  КонецЕсли;






	        конецЦикла;    
	    конецЕсли;    
	КонецЦикла;
	

	ЭтаФорма.ОбновитьОтображениеДанных(ЭтаФорма.Элементы.ОтражениеЗарплатыВБухучете);
	///////
	КонецПроцедуры

&НаСервере
Процедура СформироватьБух30НаСервереОтражениеБухУчет(Пользователь)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура СформироватьБух30НаСервереОперация(Пользователь)
	// Вставить содержимое обработчика.
	ДокументОперация= Документы.ОперацияБух.СоздатьДокумент();
    ДокументОперация.Организация = Объект.ОрганизацияЗП.Ссылка;
    ДокументОперация.Дата = КонецДня(ТекущаяДатаСеанса());
	ДатаЗаписи = КонецДня(ТекущаяДатаСеанса());
    ДокументОперация.Ответственный = Пользователь;
	ДокументОперация.Содержание = "#Загрузка зарплаты из ГринАтома";
	ДокументОперация.СпособЗаполнения = "Вручную";
	
    ДокументОперация.Записать();
    
    ОперацияСсылка = ДокументОперация.Ссылка;
	
	
    Проводки = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
    Проводки.Отбор.Регистратор.Установить(ОперацияСсылка);
	ТЗ = Объект.ОтражениеВУчете.Выгрузить();
	Если Объект.СуммироватьПроводки Тогда
		Н = ТЗ.Количество() ;
		Пока Н > 0 Цикл
			Н = Н - 1;
			Стр = ТЗ.Получить(Н);
			Если Стр.Сумма = 0
				И Стр.СуммаНУ = 0
				И Стр.СуммаПР = 0
				И Стр.СуммаВР = 0
				Тогда
				ТЗ.Удалить(Н);
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Удалена строка - "+Строка(Н);
				Сообщение.Сообщить();

			КонецЕсли;
		КонецЦикла;
		
		
		Для Каждого Стр ИЗ ТЗ Цикл
			Стр.СтрокаИАСУП = Стр.ВидОплатыИАСУП;
		КонецЦикла;
		ТЗ.Свернуть("СчетДт,СчетКт,ПодразделениеДт,ПодразделениеКт,СтрокаИАСУП,СубконтоДт1,СубконтоДт2,СубконтоДт3,СубконтоКт1,СубконтоКт2,СубконтоКт3","Сумма,СуммаНУ,СуммаПР,СуммаВР");
	Конецесли;
	
	Для Каждого СтрТЗ Из ТЗ Цикл
		Если ЗначениеЗаполнено(СтрТЗ.СчетДт) Тогда 
			НоваяПроводка = Проводки.Добавить();  
			
  			НоваяПроводка.ВалютаДт = Справочники.Валюты.НайтиПоНаименованию("Российский рубль").Ссылка;
    		НоваяПроводка.ВалютаКт = Справочники.Валюты.НайтиПоНаименованию("Российский рубль").Ссылка;
			НоваяПроводка.Период = КонецДня(ДатаЗаписи);
		    НоваяПроводка.Регистратор = ОперацияСсылка; 
			
			
		    НоваяПроводка.СчетДт = СтрТЗ.СчетДт;
			Попытка
				НоваяПроводка.СубконтоДт.Вставить(НоваяПроводка.СчетДт.ВидыСубконто.Получить(0).ВидСубконто, СтрТЗ.СубконтоДт1);
			Исключение
			КонецПопытки;
			Попытка
				НоваяПроводка.СубконтоДт.Вставить(НоваяПроводка.СчетДт.ВидыСубконто.Получить(1).ВидСубконто, СтрТЗ.СубконтоДт2);
			Исключение
			КонецПопытки;
        	Попытка
				НоваяПроводка.СубконтоДт.Вставить(НоваяПроводка.СчетДт.ВидыСубконто.Получить(2).ВидСубконто, СтрТЗ.СубконтоДт3);
			Исключение
			КонецПопытки;
						
		    НоваяПроводка.СчетКт = СтрТЗ.СчетКт;
			Попытка
				НоваяПроводка.СубконтоКт.Вставить(НоваяПроводка.СчетКт.ВидыСубконто.Получить(0).ВидСубконто, СтрТЗ.СубконтоКт1);
			Исключение
			КонецПопытки;
			Попытка
				НоваяПроводка.СубконтоКт.Вставить(НоваяПроводка.СчетКт.ВидыСубконто.Получить(1).ВидСубконто, СтрТЗ.СубконтоКт2);
			Исключение
			КонецПопытки;
        	Попытка
				НоваяПроводка.СубконтоКт.Вставить(НоваяПроводка.СчетКт.ВидыСубконто.Получить(2).ВидСубконто, СтрТЗ.СубконтоКт3);
			Исключение
			КонецПопытки;

			
			
		    НоваяПроводка.Сумма = СтрТЗ.Сумма;
			
			
			//Сообщение = Новый СообщениеПользователю();
			//Сообщение.Текст = "СтрТЗ.СчетДт - "+Строка(СтрТЗ.СчетДт.УчетПоПодразделениям);
			//Сообщение.Сообщить();
			//Сообщение = Новый СообщениеПользователю();
			//Сообщение.Текст = "СтрТЗ.СчетКт - "+Строка(СтрТЗ.СчетКт.УчетПоПодразделениям);
			//Сообщение.Сообщить();

			
			Если Строка(СтрТЗ.СчетДт.УчетПоПодразделениям) = "Да" Тогда
				Если Строка(СтрТЗ.ПодразделениеДт) <> "" Тогда		
					НоваяПроводка.ПодразделениеДт = СтрТЗ.ПодразделениеДт;
				Иначе
					НоваяПроводка.ПодразделениеДт = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Основное подразделение (ЦА)");  //Для РЭК
				КонецЕсли;	
			
			Конецесли;
			
			
			Если Строка(СтрТЗ.СчетКт.УчетПоПодразделениям) = "Да" Тогда
			
				Если Строка(СтрТЗ.ПодразделениеКт) <> "" Тогда		
					НоваяПроводка.ПодразделениеКт = СтрТЗ.ПодразделениеКт;
				Иначе
					НоваяПроводка.ПодразделениеКт = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Основное подразделение (ЦА)"); //Для РЭК
				КонецЕсли;	
			
			Конецесли;
			///////

			
						
			НоваяПроводка.Содержание = СтрТЗ.СтрокаИАСУП;
			
			//Попытка
			//	Проводки.Записывать=Истина;
			//	Проводки.Записать();

			//Исключение
			//	Сообщение = Новый СообщениеПользователю();
			//	Сообщение.Текст = "Ошибка в СтрТЗ.СчетДт - "+Строка(СтрТЗ.СчетДт);
			//	Сообщение.Сообщить();
			//	Сообщение = Новый СообщениеПользователю();
			//	Сообщение.Текст = "или ошибка в СтрТЗ.СчетКт - "+Строка(СтрТЗ.СчетКт);
			//	Сообщение.Сообщить();

			//	
			//Конецпопытки;	
			
			 
		    
		КонецЕсли;	
	КонецЦикла;	
	
	
	
    
    Проводки.Записывать=Истина;
    Проводки.Записать();
	
	////
	ДокументОпер = ОперацияСсылка.ПолучитьОбъект();
 
    // получим набор проводок этого документа в регистр "Хозрасчетный"
    НаборПроводок = ДокументОпер.Движения.Хозрасчетный;
 
    // прочитаем проводки из базы данных
    НаборПроводок.Прочитать();
    НомерСтр = 0;
    Для Каждого Проводка Из НаборПроводок Цикл
        СтрТЗ = ТЗ.Получить(НомерСтр);
		
		//Если 
		//    Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70")
		//	И Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("68.01.1")
		//Тогда
		
		Если СтрТЗ.СуммаНУ <> 0 Тогда
			 Попытка
             Проводка.СуммаНУДт = СтрТЗ.СуммаНУ;
			 НаборПроводок.Записать(
		        Истина // удалим старые проводки и запишем вместо них новые
		    );
		Исключение
			Проводка.СуммаНУДт = 0;
			 НаборПроводок.Записать(
		        Истина // удалим старые проводки и запишем вместо них новые
		    );

			 КонецПопытки;
			 Попытка
             Проводка.СуммаНУКт = СтрТЗ.СуммаНУ;
			 НаборПроводок.Записать(
		        Истина // удалим старые проводки и запишем вместо них новые
		    );
		Исключение
			Проводка.СуммаНУКт = 0;
			 НаборПроводок.Записать(
		        Истина // удалим старые проводки и запишем вместо них новые
		    );

			 КонецПопытки;

		КонецЕсли;
		Если СтрТЗ.СуммаПР <> 0 Тогда
             Попытка
             Проводка.СуммаПРДт = СтрТЗ.СуммаПР;
			 НаборПроводок.Записать(
		        Истина // удалим старые проводки и запишем вместо них новые
		    );
		Исключение
			Проводка.СуммаПРДт = 0;
			 НаборПроводок.Записать(
		        Истина // удалим старые проводки и запишем вместо них новые
		    );

			 КонецПопытки;
			 Попытка
             Проводка.СуммаПРКт = СтрТЗ.СуммаПР;
			 НаборПроводок.Записать(
		        Истина // удалим старые проводки и запишем вместо них новые
		    );
		Исключение
			Проводка.СуммаПРКт = 0;
			 НаборПроводок.Записать(
		        Истина // удалим старые проводки и запишем вместо них новые
		    );

			 КонецПопытки;

		КонецЕсли;
		Если СтрТЗ.СуммаВР <> 0 Тогда
             Попытка
             Проводка.СуммаВРДт = СтрТЗ.СуммаВР;
			 НаборПроводок.Записать(
		        Истина // удалим старые проводки и запишем вместо них новые
		    );
		Исключение
			Проводка.СуммаВРДт = 0;
			 НаборПроводок.Записать(
		        Истина // удалим старые проводки и запишем вместо них новые
		    );

			 КонецПопытки;
			 Попытка
             Проводка.СуммаВРКт = СтрТЗ.СуммаВР;
			 НаборПроводок.Записать(
		        Истина // удалим старые проводки и запишем вместо них новые
		    );
		Исключение
			Проводка.СуммаВРКт = 0;
			 НаборПроводок.Записать(
		        Истина // удалим старые проводки и запишем вместо них новые
		    );

			 КонецПопытки;

		КонецЕсли;
		//КонецЕсли;
			
     НомерСтр = НомерСтр +1;
    КонецЦикла;
	
	
	НаборПроводок.Записать(
	    Истина // удалим старые проводки и запишем вместо них новые
	);
	
	
  
	Объект.ДокОтражениеЗарплатыБухучет =  ОперацияСсылка;
	
КонецПроцедуры



&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	

	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
    Если Результат = КодВозвратаДиалога.Да Тогда
        	Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Будет сформирован документ ""Операция...""";
			Сообщение.Сообщить();
			СформироватьБух30НаСервереОперация(Пользователь);
	КонецЕсли;
	Если Результат = КодВозвратаДиалога.Нет Тогда
        	Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Будет сформирован документ ""Отражение зарплаты в бухгалтерском учете...""";
			Сообщение.Сообщить();
			СформироватьБух30НаСервереОтражениеБухУчет(Пользователь);
    КонецЕсли;
 
КонецПроцедуры

&НаКлиенте
Процедура СформироватьБух30(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса",
      ЭтотОбъект);	
 
    ПоказатьВопрос(Оповещение,
        "Сформировать документ ""Операция бух...?",
        РежимДиалогаВопрос.ДаНет,
        10, // таймаут в секундах
        КодВозвратаДиалога.Да, // (необ.) кнопка по умолчанию
        "Какой документ будет создан..." // (необ.) заголовок
    ); 
	
	
	ЭтаФорма.ОбновитьОтображениеДанных(ЭтаФорма.Элементы.ДокОтражениеЗарплатыБухучет);

	
КонецПроцедуры

&НаСервере
Процедура УдалениеДублейСпецСимволов(СпецСимвол,СтрокаСтр)
	Н = 5;
	Пока Н>1 Цикл
		СтрЗамены = СпецСимвол;
		НомерЗамены = 1;
		Пока НомерЗамены < Н Цикл
			СтрЗамены = СтрЗамены + СпецСимвол;
			НомерЗамены = НомерЗамены + 1;
		КонецЦикла;
		СтрокаСтр = СтрЗаменить(СтрокаСтр, СтрЗамены, СпецСимвол);
		
		Н = Н - 1;
	КонецЦикла;
КонецПроцедуры	



&НаСервере
Процедура СформироватьЗаявкуИСУНаСервере(СтруктураДанных,НеПреобразовыватьАдрес)
	// Вставить содержимое обработчика.
	ТЗ_ПривязкаКолонок = Объект.Заявка_ИСУ_ФЗ_522.Выгрузить();
	ТЗ_Адрес = Новый ТаблицаЗначений;
	ТЗ_Адрес.Колонки.Добавить("КолЭл");
	ТЗ_Адрес.Колонки.Добавить("АдресПолный");
	ТЗ_Адрес.Колонки.Добавить("ЧислоЭл");

	
	

	СтрНумерация = Объект.Заявка_ИСУ_ФЗ_522.Получить(0);
	
	ПодразделениеНомерКолонки = СтрНумерация.Колонка1;
	НомерЗаявкиНомерКолонки= СтрНумерация.Колонка2;
	ТипЗаявкиНомерКолонки = СтрНумерация.Колонка3;
	ДатаШтСанкцНомерКолонки = СтрНумерация.Колонка4;
	ОписаниеНомерКолонки = СтрНумерация.Колонка5;
	СтадияНомерКолонки = СтрНумерация.Колонка6;
	ВключатьНДСНомерКолонки = СтрНумерация.Колонка7;
	ДатаИсполненияНомерКолонки = СтрНумерация.Колонка8;
	ИсполнительНомерКолонки = СтрНумерация.Колонка9;
	ОрганизацияНомерКолонки = СтрНумерация.Колонка10;
	АдресНомерКолонки = СтрНумерация.Колонка11;
	Если НеПреобразовыватьАдрес =Ложь Тогда 
	Для Каждого Элемент Из СтруктураДанных Цикл
	   //Сообщить(Элемент.Ключ + "  " + Элемент.Значение);
	   Если ТипЗнч(Элемент.Значение)=Тип("Структура") тогда
		
		   Для Каждого Элемент2 Из Элемент.Значение Цикл
			   
			    НомерАдреса="_"+Строка(АдресНомерКолонки);
				НомерПодразделениеНомерКолонки="_"+Строка(ПодразделениеНомерКолонки);
				НомерНомерЗаявкиНомерКолонки="_"+Строка(НомерЗаявкиНомерКолонки);
				НомерТипЗаявкиНомерКолонки="_"+Строка(ТипЗаявкиНомерКолонки);
				НомерДатаШтСанкцНомерКолонки="_"+Строка(ДатаШтСанкцНомерКолонки);
				НомерОписаниеНомерКолонки="_"+Строка(ОписаниеНомерКолонки);
				НомерСтадияНомерКолонки="_"+Строка(СтадияНомерКолонки);
				НомерВключатьНДСНомерКолонки="_"+Строка(ВключатьНДСНомерКолонки);
				НомерДатаИсполненияНомерКолонки="_"+Строка(ДатаИсполненияНомерКолонки);
				НомерИсполнительНомерКолонки="_"+Строка(ИсполнительНомерКолонки);
				НомерОрганизацияНомерКолонки="_"+Строка(ОрганизацияНомерКолонки);
								
			    Если  Элемент2.Ключ = НомерАдреса  Тогда
									  
					СтрокаАдрес=СокрЛП(Строка(Элемент2.Значение)) ;
					 
					УдалениеДублейСпецСимволов(" ",СтрокаАдрес);
					УдалениеДублейСпецСимволов(".",СтрокаАдрес);
					УдалениеДублейСпецСимволов(";",СтрокаАдрес);  
					УдалениеДублейСпецСимволов(",",СтрокаАдрес);
					  
					СтрокаАдрес = СтрЗаменить(СтрокаАдрес," ", ";");
					СтрокаАдрес = СтрЗаменить(СтрокаАдрес,".", ";");
					СтрокаАдрес = СтрЗаменить(СтрокаАдрес,",", ";");
					УдалениеДублейСпецСимволов(";",СтрокаАдрес); //повторно
					
					МассивСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаАдрес, ";");
					
					СтрТЗ_Адрес = ТЗ_Адрес.Добавить();
					СтрТЗ_Адрес.КолЭл = МассивСтроки.Количество();
					СтрТЗ_Адрес.АдресПолный = СтрокаАдрес;
					СтрТЗ_Адрес.ЧислоЭл = 1;
					  
				  КонецЕсли;
	 
	        конецЦикла;    
	    конецЕсли;    
	КонецЦикла;
	

	ТЗ_КолЭл = ТЗ_Адрес.Скопировать();
	ТЗ_КолЭл.Свернуть("КолЭл","ЧислоЭл");
	ТЗ_КолЭл.Сортировать("ЧислоЭл");
	
	ПопулярныйМассив = ТЗ_КолЭл.Получить(ТЗ_КолЭл.Количество()-1).КолЭл;
	
	//Показываем проблемные
	НомерПробл=1;
	Для Каждого Стр Из ТЗ_Адрес Цикл
		Если Стр.КолЭл <> ПопулярныйМассив  Тогда
			 		Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = Строка(НомерПробл)+";Проблемный адрес -("+Строка(Стр.АдресПолный)+")";
					Сообщение.Сообщить();
					НомерПробл = НомерПробл + 1;

		КонецЕсли;	
	КонецЦикла;
	 КонецЕсли;
	//Обработка строк для загрузки
	//временно
	ФлагСоздатьДокумент = Истина;
	
	Если НеПреобразовыватьАдрес =Ложь Тогда 
	СтрНумерацияАдрес = Объект.СопоставлениеАдреса.Получить(0);
	
	МуницОбразованиеНомерКолонки = СтрНумерацияАдрес.Колонка1;
	УлицаНомерКолонки= СтрНумерацияАдрес.Колонка2;
	ДомНомерКолонки = СтрНумерацияАдрес.Колонка3;
	КорпусНомерКолонки = СтрНумерацияАдрес.Колонка4;
	СтроеникНомерКолонки = СтрНумерацияАдрес.Колонка5;
	КвартираНомерКолонки = СтрНумерацияАдрес.Колонка6;
	ИндексНДСНомерКолонки = СтрНумерацияАдрес.Колонка7;
	ПомещениеНомерКолонки = СтрНумерацияАдрес.Колонка8;
	РайонНомерКолонки = СтрНумерацияАдрес.Колонка9;
	КонецЕсли;
	
	
	
	Для Каждого Элемент Из СтруктураДанных Цикл
	   //Сообщить(Элемент.Ключ + "  " + Элемент.Значение);
	   Если ТипЗнч(Элемент.Значение)=Тип("Структура") тогда
		   ТЗ_Адрес = Новый ТаблицаЗначений;
			ТЗ_Адрес.Колонки.Добавить("КолЭл");
			ТЗ_Адрес.Колонки.Добавить("АдресПолный");
			ТЗ_Адрес.Колонки.Добавить("ЧислоЭл");
			//Формируем переменные
		   Для Каждого Элемент2 Из Элемент.Значение Цикл
			   
			    НомерАдреса="_"+Строка(АдресНомерКолонки);
				НомерПодразделениеНомерКолонки="_"+Строка(ПодразделениеНомерКолонки);
				НомерНомерЗаявкиНомерКолонки="_"+Строка(НомерЗаявкиНомерКолонки);
				НомерТипЗаявкиНомерКолонки="_"+Строка(ТипЗаявкиНомерКолонки);
				НомерДатаШтСанкцНомерКолонки="_"+Строка(ДатаШтСанкцНомерКолонки);
				НомерОписаниеНомерКолонки="_"+Строка(ОписаниеНомерКолонки);
				НомерСтадияНомерКолонки="_"+Строка(СтадияНомерКолонки);
				НомерВключатьНДСНомерКолонки="_"+Строка(ВключатьНДСНомерКолонки);
				НомерДатаИсполненияНомерКолонки="_"+Строка(ДатаИсполненияНомерКолонки);
				НомерИсполнительНомерКолонки="_"+Строка(ИсполнительНомерКолонки);
				НомерОрганизацияНомерКолонки="_"+Строка(ОрганизацияНомерКолонки);

				
				
			    Если  Элемент2.Ключ = НомерАдреса  Тогда
									  
					СтрокаАдрес=СокрЛП(Строка(Элемент2.Значение)) ;
					Если НеПреобразовыватьАдрес =Ложь Тогда 
						УдалениеДублейСпецСимволов(" ",СтрокаАдрес);
						УдалениеДублейСпецСимволов(".",СтрокаАдрес);
						УдалениеДублейСпецСимволов(";",СтрокаАдрес);  
						УдалениеДублейСпецСимволов(",",СтрокаАдрес);
						  
						СтрокаАдрес = СтрЗаменить(СтрокаАдрес," ", ";");
						СтрокаАдрес = СтрЗаменить(СтрокаАдрес,".", ";");
						СтрокаАдрес = СтрЗаменить(СтрокаАдрес,",", ";");
						УдалениеДублейСпецСимволов(";",СтрокаАдрес); //повторно
						
						МассивСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаАдрес, ";");
						
						СтрТЗ_Адрес = ТЗ_Адрес.Добавить();
						СтрТЗ_Адрес.КолЭл = МассивСтроки.Количество();
						СтрТЗ_Адрес.АдресПолный = СтрокаАдрес;
						СтрТЗ_Адрес.ЧислоЭл = 1;
					
					КонецЕсли;
					ПеремАдресПолный = СтрокаАдрес;
					
				КонецЕсли;
				
				Если  Элемент2.Ключ = НомерПодразделениеНомерКолонки  Тогда
					Эл2Значение = СокрЛП(Строка(Элемент2.Значение)) ; 
					ПеремПодразделение = Эл2Значение;
				КонецЕсли;
				Если  Элемент2.Ключ = НомерНомерЗаявкиНомерКолонки  Тогда
					Эл2Значение = СокрЛП(Строка(Элемент2.Значение)) ; 
					ПеремНомерЗаявки = Эл2Значение;
				КонецЕсли;
				Если  Элемент2.Ключ = НомерДатаШтСанкцНомерКолонки  Тогда
					Эл2Значение = СокрЛП(Строка(Элемент2.Значение)) ; 
					ПеремДатаШтСанкц = Эл2Значение;
				КонецЕсли;
				Если  Элемент2.Ключ = НомерТипЗаявкиНомерКолонки  Тогда
					Эл2Значение = СокрЛП(Строка(Элемент2.Значение)) ; 
					ПеремТипЗаявки = Эл2Значение;
				КонецЕсли;
				Если  Элемент2.Ключ = НомерОписаниеНомерКолонки  Тогда
					Эл2Значение = СокрЛП(Строка(Элемент2.Значение)) ; 
					ПеремОписание = Эл2Значение;
				КонецЕсли;
				Если  Элемент2.Ключ = НомерСтадияНомерКолонки  Тогда
					Эл2Значение = СокрЛП(Строка(Элемент2.Значение)) ; 
					ПеремСтадия = Эл2Значение;
				КонецЕсли;
				Если  Элемент2.Ключ =  НомерВключатьНДСНомерКолонки Тогда
					Эл2Значение = СокрЛП(Строка(Элемент2.Значение)) ; 
					ПеремВключатьНДС = Эл2Значение;
				КонецЕсли;
				Если  Элемент2.Ключ = НомерДатаИсполненияНомерКолонки  Тогда
					Эл2Значение = СокрЛП(Строка(Элемент2.Значение)) ; 
					ПеремДатаИсполнения = Эл2Значение;
				КонецЕсли;
				Если  Элемент2.Ключ = НомерИсполнительНомерКолонки  Тогда
					Эл2Значение = СокрЛП(Строка(Элемент2.Значение)) ; 
					ПеремИсполнитель = Эл2Значение;
				КонецЕсли;
				Если  Элемент2.Ключ = НомерОрганизацияНомерКолонки  Тогда
					Эл2Значение = СокрЛП(Строка(Элемент2.Значение)) ; 
					ПеремОрганизация = Эл2Значение;
				КонецЕсли;

				
				
	 
			 КонецЦикла; 
			  
			 ///Обрабботка Переменных
			 //ФлагНеПроблемный = ЛОЖЬ;
			 ФлагНеПроблемный = Истина;
			 Если НеПреобразовыватьАдрес =Ложь Тогда
			Для Каждого Стр Из ТЗ_Адрес Цикл
				Если Стр.КолЭл = ПопулярныйМассив  Тогда
					 		ФлагНеПроблемный = ИСТИНА;

				КонецЕсли;	
			КонецЦикла;
			КонецЕсли;
			
			СтрокаАдрес = ПеремАдресПолный;
    Индекс = СтрНайти(СтрокаАдрес, " кв ");
	ФлагЕстьКвартира = Ложь;
	ПеремАдресПолныйБезКвартиры = "";
	Если  Индекс <> 0 Тогда
		       ПеремАдресПолныйБезКвартиры= СокрЛП(Лев(СтрокаАдрес,Индекс-2));
			   ФлагЕстьКвартира = Истина;
	КонецЕсли;		
	
	Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   АЭС_ИСУ522.ЗаявкаИСУ522,
        |   АЭС_ИСУ522.АдресУстановки
        |ИЗ
        |   РегистрСведений.АЭС_ИСУ522 КАК АЭС_ИСУ522
        |ГДЕ
        |   АЭС_ИСУ522.АдресУстановки = &АдресУстановки
        |УПОРЯДОЧИТЬ ПО
        |   АЭС_ИСУ522.ЗаявкаИСУ522";
 
    Запрос.УстановитьПараметр(
        "АдресУстановки",
        ПеремАдресПолный
    );
 
    РезультатЗапроса = Запрос.Выполнить();
 
    Записи = РезультатЗапроса.Выбрать();
	
	ФлагСоздатьДокумент =Истина;
	
	Пока Записи.Следующий() Цикл
		    Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = "Уже есть документ - "+Строка(Записи.ЗаявкаИСУ522);
					Сообщение.Сообщить();
					ФлагСоздатьДокумент =Ложь; //временно
     КонецЦикла;
	
	    
Если ФлагНеПроблемный и ФлагСоздатьДокумент Тогда
				//Создаем документ заявка ИСУ-522
				ДокЗаявка = Документы.АЭС_ЗаявкаИСУ_522ФЗ.СоздатьДокумент();
				ДокЗаявка.Подразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию(ПеремПодразделение);
				ДокЗаявка.НомерЗаявки = ПеремНомерЗаявки; 
				ДокЗаявка.Дата = ТекущаяДата();
				ДокЗаявка.ДатаНаступленияШтрафныхСанкций = ПеремДатаШтСанкц;
				ДокЗаявка.Организация = Объект.ОрганизацияЗП;
				ДокЗаявка.Комментарий = "#Загружено#"+ПеремАдресПолный;
				ДокЗаявка.Стадия = Справочники.АЭС_СтадииЗаявок_ИСУ522ФЗ.НайтиПоКоду("000000005");
				 Если ФлагЕстьКвартира Тогда

				АдресМКД_ИСУ522ФЗ =   ПеремАдресПолныйБезКвартиры;
			Иначе 
				     АдресМКД_ИСУ522ФЗ =   ПеремАдресПолный;
				КонецЕсли;
				
				ТЧАдресИсполнения =   ДокЗаявка.АдресИсполнения;
				СтрАдресИсполнения =   ТЧАдресИсполнения.Добавить();
				ЭлементАдреса =  Справочники.АЭС_АдресаМКД_ИСУ522ФЗ.НайтиПоРеквизиту("ФИАС",АдресМКД_ИСУ522ФЗ);
				
				ОтказЗаписи = Ложь;
				
				Если ЗначениеЗаполнено(ЭлементАдреса) Тогда
				СтрАдресИсполнения.Адрес =   ЭлементАдреса;
			Иначе
				    Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = "В справочнике АДРЕСА МКД ИСУ ФЗ522 нет элемента -  "+Строка(АдресМКД_ИСУ522ФЗ);
					Сообщение.Сообщить();
					 ОтказЗаписи = Истина;
				КонецЕсли;
				
	Если НЕ ОтказЗаписи Тогда			
				
				Попытка
				ДокЗаявка.Записать();
				Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = "Создан документ - "+Строка(ДокЗаявка.Ссылка);
					Сообщение.Сообщить();
					ФлагСоздатьДокумент = Ложь;
				Исключение
					ТекстПредставленияОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					Сообщение.Текст = "Ошибка - "+Строка(ТекстПредставленияОшибки);
					Сообщение.Сообщить();
					ФлагСоздатьДокумент = Ложь;
		
				КонецПопытки;	
				
			КонецЕсли;	
	КонецЕсли;		 
			  
	    КонецЕсли;    
	КонецЦикла;

	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаявкуИСУ(Команда)
	 //Заполняем пробелы и Передаем таб.часть на сервер для обработки
	СтруктураДанных = Новый Структура;
	ОчиститьСообщения();
	//Сообщение = Новый СообщениеПользователю();
	//Сообщение.Текст = "Общее количество колонок - "+Строка(ТабличныйДокумент.ШиринаТаблицы);
	//Сообщение.Сообщить();
	
		
	
	//СформироватьКакБух20НаСервере(СтруктураЗП,Элементы.ТабДокумент);
	СтруктураДанных = ТабличныйДокументВТаблицуЗначений(ТабличныйДокумент);

	////Объект.Заявка_ИСУ_ФЗ_522.Очистить();
	//СтрНумерация = Объект.Заявка_ИСУ_ФЗ_522.Получить(0);
	//АдресНомерКолонки = СтрНумерация.Колонка11;
	//Для Каждого Элемент Из СтруктураДанных Цикл
	//   //Сообщить(Элемент.Ключ + "  " + Элемент.Значение);
	// Если ТипЗнч(Элемент.Значение)=Тип("Структура") тогда
	//	   ///Стр_ОтражениеВУчете = Объект.Заявка_ИСУ_ФЗ_522.Добавить();
	//	   Для Каждого Элемент2 Из Элемент.Значение Цикл
	//		       	Если  Элемент2.Ключ = "Адрес" Тогда
	//								 ФИАС_ДО = Элемент2.Значение;
	//			  КонецЕсли;	

	//		  КонецЦикла;   
	//	  КонецЕсли;
	//КонецЦикла;	  
	//		   
	//		    НомерАдреса="_"+Строка(АдресНомерКолонки);
	//		    Если  Элемент2.Ключ = НомерАдреса  Тогда
	//				  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
	//				  //Стр_ОтражениеВУчете.Колонка11 = Элемент2.Значение;
	//				  
	//				Сообщение = Новый СообщениеПользователю();
	//				Сообщение.Текст = "Адрес -("+Строка(Элемент2.Значение)+")";
	//				Сообщение.Сообщить();

	//				  
	//			  КонецЕсли;
	//		   
	//            //Сообщить(Элемент2.Ключ + " ..... " + Элемент2.Значение);    
	//			//Если  Элемент2.Ключ = "Физлицо" Тогда
	//			//	  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
	//			//	  Стр_ОтражениеВУчете.Физлицо = Элемент2.Значение;
	//			//  КонецЕсли;	
	//			//  //СчетДт
	//			//  Если  Элемент2.Ключ = "СчетДт" Тогда
	//			//	  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
	//			//	  Стр_ОтражениеВУчете.СчетДт = Элемент2.Значение;
	//			//  КонецЕсли;
	//			//   Если  Элемент2.Ключ = "СчетКт" Тогда
	//			//	  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
	//			//	  Стр_ОтражениеВУчете.СчетКт = Элемент2.Значение;
	//			//  КонецЕсли;
	//			//  Если  Элемент2.Ключ = "Сумма" Тогда
	//			//	  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
	//			//	  Стр_ОтражениеВУчете.Сумма = Элемент2.Значение;
	//			//  КонецЕсли;
	//			//  Если  Элемент2.Ключ = "СуммаНУ" Тогда
	//			//	  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
	//			//	  Стр_ОтражениеВУчете.СуммаНУ = Элемент2.Значение;
	//			//  КонецЕсли;
	//			//  Если  Элемент2.Ключ = "СуммаВР" Тогда
	//			//	  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
	//			//	  Стр_ОтражениеВУчете.СуммаВР = Элемент2.Значение;
	//			//  КонецЕсли;
	//			//  Если  Элемент2.Ключ = "СуммаПР" Тогда
	//			//	  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
	//			//	  Стр_ОтражениеВУчете.СуммаПР = Элемент2.Значение;
	//			//  КонецЕсли;


	//			//  Если  Элемент2.Ключ = "ПодразделениеДт" Тогда
	//			//	  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
	//			//	  Стр_ОтражениеВУчете.ПодразделениеДт = Элемент2.Значение;
	//			//  КонецЕсли;
	//			//  Если  Элемент2.Ключ = "ПодразделениеКт" Тогда
	//			//	  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
	//			//	  Стр_ОтражениеВУчете.ПодразделениеКт = Элемент2.Значение;
	//			//  КонецЕсли;
	//			//  Если  Элемент2.Ключ = "СубконтоДт1" Тогда
	//			//	  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
	//			//	  Стр_ОтражениеВУчете.СубконтоДт1 = Элемент2.Значение;
	//			//  КонецЕсли;
	//			//  Если  Элемент2.Ключ = "СубконтоКт1" Тогда
	//			//	  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
	//			//	  Стр_ОтражениеВУчете.СубконтоКт1 = Элемент2.Значение;
	//			//  КонецЕсли;
	//			//  Если  Элемент2.Ключ = "СубконтоДт2" Тогда
	//			//	  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
	//			//	  Стр_ОтражениеВУчете.СубконтоДт2 = Элемент2.Значение;
	//			//  КонецЕсли;
	//			//  Если  Элемент2.Ключ = "СубконтоКт2" Тогда
	//			//	  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
	//			//	  Стр_ОтражениеВУчете.СубконтоКт2 = Элемент2.Значение;
	//			//  КонецЕсли;
	//			//  Если  Элемент2.Ключ = "СубконтоДт3" Тогда
	//			//	  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
	//			//	  Стр_ОтражениеВУчете.СубконтоДт3 = Элемент2.Значение;
	//			//  КонецЕсли;
	//			//  Если  Элемент2.Ключ = "СубконтоКт3" Тогда
	//			//	  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
	//			//	  Стр_ОтражениеВУчете.СубконтоКт3 = Элемент2.Значение;
	//			//  КонецЕсли;
	//			//  Если  Элемент2.Ключ = "СтрокаИАСУП" Тогда
	//			//	  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
	//			//	  Стр_ОтражениеВУчете.СтрокаИАСУП = Элемент2.Значение;
	//			//  КонецЕсли;
	//			//  Если  Элемент2.Ключ = "ВидОплатыИАСУП" Тогда
	//			//	  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
	//			//	  Стр_ОтражениеВУчете.ВидОплатыИАСУП = Элемент2.Значение;
	//			//  КонецЕсли;
	//			//  Если  Элемент2.Ключ = "ТекстВидаОплатыИАСУП" Тогда
	//			//	  //Стр_ОтражениеВУчете = Объект.ОтражениеВУчете.Добавить();
	//			//	  Стр_ОтражениеВУчете.ТекстВидаОплатыИАСУП = Элемент2.Значение;
	//			//  КонецЕсли;






	//        конецЦикла;    
	//    конецЕсли;    
	//КонецЦикла;
	//

	////ЭтаФорма.ОбновитьОтображениеДанных(ЭтаФорма.Элементы.Заявка_ИСУ_ФЗ_522);

	
	
	
	
	СформироватьЗаявкуИСУНаСервере(СтруктураДанных,НеПреобразовыватьАдрес);
	
	ЭтаФорма.ОбновитьОтображениеДанных(ЭтаФорма.Элементы.Заявка_ИСУ_ФЗ_522);

КонецПроцедуры

&НаКлиенте
Процедура АдресФИАС(Команда)
	// Вставить содержимое обработчика
	
	
	 Для СчетчикКолонок = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
 

Если СчетчикКолонок  =  НомерКолонкиАдрес Тогда

       СчетчикМах = ТабличныйДокумент.ВысотаТаблицы;
	Для СчетчикСтрок = 1 По ТабличныйДокумент.ВысотаТаблицы Цикл
	 
		ИндексСтроки = СчетчикСтрок - 1;
		
		счетчик =   СчетчикСтрок;
		
		
	  				 
		ТекущаяЯчейка = ТабличныйДокумент.Область(СчетчикСтрок, СчетчикКолонок);
		
		ЗначениеЯчейки = ТекущаяЯчейка.Текст;
		 
		ФИАС_ДО = СокрЛП(Строка(ЗначениеЯчейки));
		ФИАС_ДО = СтрЗаменить(ФИАС_ДО, "-","- ");
	Если СокрЛП(Строка(Объект.ОрганизацияЗП)) ="АтомЭнергоСбыт Смоленск" Тогда
		ФИАС_ДО = "Смоленская обл, " + ФИАС_ДО;  
		АдресФИАС = ПреобразоватьАдрес(ФИАС_ДО);
	КонецЕсли;
	Если СокрЛП(Строка(Объект.ОрганизацияЗП)) ="АтомЭнергоСбыт Курск" Тогда
		ФИАС_ДО = "Курская обл, " + ФИАС_ДО;  
		АдресФИАС = ПреобразоватьАдрес(ФИАС_ДО);
	КонецЕсли;
   Если СокрЛП(Строка(Объект.ОрганизацияЗП)) ="АтомЭнергоСбыт Мурманск" Тогда
		ФИАС_ДО = "Мурманская обл, " + ФИАС_ДО;  
		АдресФИАС = ПреобразоватьАдрес(ФИАС_ДО);
	КонецЕсли;
	Если СокрЛП(Строка(Объект.ОрганизацияЗП)) ="АтомЭнергоСбыт Тверь" Тогда
		ФИАС_ДО = "Тверская обл, " + ФИАС_ДО;  
		АдресФИАС = ПреобразоватьАдрес(ФИАС_ДО);
	КонецЕсли;
	Если СокрЛП(Строка(Объект.ОрганизацияЗП)) ="АтомЭнергоСбыт Хакасия" Тогда
		ФИАС_ДО = "Хакасия респ, " + ФИАС_ДО;  
		АдресФИАС = ПреобразоватьАдрес(ФИАС_ДО);
	КонецЕсли;



		
		ТекущаяЯчейка.Текст = АдресФИАС;
		
		Состояние(Строка(Строка(счетчик)+" из "+Строка(СчетчикМах)), счетчик/СчетчикМах*100,АдресФИАС, БиблиотекаКартинок.Обработка);

		
		сек = 2;
	    	КонДата = ТекущаяДата() + сек;
	    	  Пока ТекущаяДата() < КонДата Цикл
	    	      // ждемссс....
	    	  КонецЦикла;

	  
		  КонецЦикла
		  
  КонецЕсли;
		  
КонецЦикла;


ЭтаФорма.ОбновитьОтображениеДанных();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////

