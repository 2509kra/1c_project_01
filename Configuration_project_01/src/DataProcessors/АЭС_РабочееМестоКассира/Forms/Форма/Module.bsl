&НаКлиенте
Перем ДопПараметры;
// Получить основные данные по таблице товаров для чека о розничной продаже
//
// Параметры:
//  Объект - ДокументОбъект.ЧекККМ - Документ.
// 
// Возвращаемое значение:
//  Массив - Данные о продажах (см. ИнтеграцияЕГАИСКлиентСервер.СтруктураСтрокиЧекаЕГАИС()).
//
Функция ДанныеПоТоварамЧекККМВозврат(Объект, МенеджерВременныхТаблиц) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.Серия,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.Штрихкод,
	|	Товары.НоменклатураЕГАИС
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМарки.ИдентификаторСтроки,
	|	АкцизныеМарки.НомерСтроки,
	|	АкцизныеМарки.КодАкцизнойМарки
	|ПОМЕСТИТЬ ТаблицаАкцизныеМарки
	|ИЗ
	|	&АкцизныеМарки КАК АкцизныеМарки	
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторСтроки,
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка = Штрихкоды.Упаковка
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПриоритетШтрихКода
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО ТаблицаТовары.Номенклатура = Штрихкоды.Номенклатура
	|			И ТаблицаТовары.Характеристика = Штрихкоды.Характеристика
	|			И (ТаблицаТовары.Упаковка = Штрихкоды.Упаковка
	|				ИЛИ &ТекстЗапросаКоэффициентУпаковки1 = 1
	|					И ТаблицаТовары.Номенклатура.ЕдиницаИзмерения = ТаблицаТовары.Упаковка.ЕдиницаИзмерения
	|					И Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка,
	|	МАКСИМУМ(Штрихкоды.ПриоритетШтрихКода) КАК ПриоритетШтрихКода
	|ПОМЕСТИТЬ ПриотритетШтрихКода
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Номенклатура КАК Номенклатура,
	|	Штрихкоды.Характеристика КАК Характеристика,
	|	Штрихкоды.Упаковка КАК Упаковка,
	|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод
	|ПОМЕСТИТЬ ШтрихкодыНоменклатуры
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриотритетШтрихКода КАК ПриотритетШтрихКода
	|		ПО Штрихкоды.Номенклатура = ПриотритетШтрихКода.Номенклатура
	|			И Штрихкоды.Характеристика = ПриотритетШтрихКода.Характеристика
	|			И Штрихкоды.Упаковка = ПриотритетШтрихКода.Упаковка
	|			И Штрихкоды.ПриоритетШтрихКода = ПриотритетШтрихКода.ПриоритетШтрихКода
	|
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.НомерСтроки,
	|	Товары.НоменклатураЕГАИС,
	|	Товары.Номенклатура,
	|
	|	Товары.Номенклатура.ТипНоменклатуры                    КАК ТипНоменклатуры,
	|	Товары.Номенклатура.ПодакцизныйТовар                   КАК ПодакцизныйТовар,
	|	Товары.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре КАК АлкогольнаяПродукцияВоВскрытойТаре,
	|	
	|	Товары.Номенклатура.НаименованиеПолное   КАК НоменклатураНаименование,
	|	Товары.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименование,
	|	Товары.Упаковка.Наименование             КАК УпаковкаНаименование,
	|	
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Упаковка,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	ВЫБОР КОГДА Товары.Штрихкод <> """" ТОГДА
	|		Товары.Штрихкод
	|	ИНАЧЕ
	|       ЕстьNULL(ШтрихкодыНоменклатуры.Штрихкод,Неопределено)
	|	КОНЕЦ КАК Штрихкод
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ТаблицаТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО    ШтрихкодыНоменклатуры.Номенклатура   = Товары.Номенклатура
	|			И ШтрихкодыНоменклатуры.Характеристика = Товары.Характеристика
	|			И ШтрихкодыНоменклатуры.Упаковка       = Товары.Упаковка
	|
	|;
	|УНИЧТОЖИТЬ Штрихкоды;
	|УНИЧТОЖИТЬ ШтрихкодыНоменклатуры;
	|УНИЧТОЖИТЬ ПриотритетШтрихКода;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.НомерСтроки,
	|	Товары.НоменклатураЕГАИС,
	|	Товары.Номенклатура,
	|	Товары.ТипНоменклатуры,
	|	Товары.ПодакцизныйТовар,
	|	Товары.АлкогольнаяПродукцияВоВскрытойТаре,
	|	Товары.НоменклатураНаименование,
	|	Товары.ХарактеристикаНаименование,
	|	Товары.УпаковкаНаименование,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.Серия,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.Штрихкод
	|ИЗ Товары КАК Товары
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаТовары.Упаковка",
		"ТаблицаТовары.Номенклатура"));
		
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("АкцизныеМарки", Объект.АкцизныеМарки.Выгрузить());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции


Функция ДанныеПоТоварамЧек(Объект, МенеджерВременныхТаблиц) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.Серия,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.Цена,
	|	Товары.ПроцентАвтоматическойСкидки,
	|	Товары.СуммаАвтоматическойСкидки,
	|	Товары.ПроцентРучнойСкидки,
	|	Товары.СуммаРучнойСкидки,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.Штрихкод,
	|	Товары.НоменклатураЕГАИС
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМарки.ИдентификаторСтроки,
	|	АкцизныеМарки.НомерСтроки,
	|	АкцизныеМарки.КодАкцизнойМарки
	|ПОМЕСТИТЬ ТаблицаАкцизныеМарки
	|ИЗ
	|	&АкцизныеМарки КАК АкцизныеМарки	
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторСтроки,
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка = Штрихкоды.Упаковка
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПриоритетШтрихКода
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО ТаблицаТовары.Номенклатура = Штрихкоды.Номенклатура
	|			И ТаблицаТовары.Характеристика = Штрихкоды.Характеристика
	|			И (ТаблицаТовары.Упаковка = Штрихкоды.Упаковка
	|				ИЛИ &ТекстЗапросаКоэффициентУпаковки1 = 1
	|					И ТаблицаТовары.Номенклатура.ЕдиницаИзмерения = ТаблицаТовары.Упаковка.ЕдиницаИзмерения
	|					И Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка,
	|	МАКСИМУМ(Штрихкоды.ПриоритетШтрихКода) КАК ПриоритетШтрихКода
	|ПОМЕСТИТЬ ПриотритетШтрихКода
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Номенклатура КАК Номенклатура,
	|	Штрихкоды.Характеристика КАК Характеристика,
	|	Штрихкоды.Упаковка КАК Упаковка,
	|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод
	|ПОМЕСТИТЬ ШтрихкодыНоменклатуры
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриотритетШтрихКода КАК ПриотритетШтрихКода
	|		ПО Штрихкоды.Номенклатура = ПриотритетШтрихКода.Номенклатура
	|			И Штрихкоды.Характеристика = ПриотритетШтрихКода.Характеристика
	|			И Штрихкоды.Упаковка = ПриотритетШтрихКода.Упаковка
	|			И Штрихкоды.ПриоритетШтрихКода = ПриотритетШтрихКода.ПриоритетШтрихКода
	|
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.НомерСтроки,
	|	Товары.НоменклатураЕГАИС,
	|	Товары.Номенклатура,
	|
	|	Товары.Номенклатура.ТипНоменклатуры                    КАК ТипНоменклатуры,
	|	Товары.Номенклатура.ПодакцизныйТовар                   КАК ПодакцизныйТовар,
	|	Товары.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре КАК АлкогольнаяПродукцияВоВскрытойТаре,
	|	
	|	Товары.Номенклатура.НаименованиеПолное   КАК НоменклатураНаименование,
	|	Товары.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименование,
	|	Товары.Упаковка.Наименование             КАК УпаковкаНаименование,
	|	
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Упаковка,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.Цена,
	|	Товары.ПроцентАвтоматическойСкидки,
	|	Товары.СуммаАвтоматическойСкидки,
	|	Товары.ПроцентРучнойСкидки,
	|	Товары.СуммаРучнойСкидки,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	ВЫБОР КОГДА Товары.Штрихкод <> """" ТОГДА
	|		Товары.Штрихкод
	|	ИНАЧЕ
	|       ЕстьNULL(ШтрихкодыНоменклатуры.Штрихкод,Неопределено)
	|	КОНЕЦ КАК Штрихкод
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ТаблицаТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО    ШтрихкодыНоменклатуры.Номенклатура   = Товары.Номенклатура
	|			И ШтрихкодыНоменклатуры.Характеристика = Товары.Характеристика
	|			И ШтрихкодыНоменклатуры.Упаковка       = Товары.Упаковка
	|
	|;
	|УНИЧТОЖИТЬ Штрихкоды;
	|УНИЧТОЖИТЬ ШтрихкодыНоменклатуры;
	|УНИЧТОЖИТЬ ПриотритетШтрихКода;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.НомерСтроки,
	|	Товары.НоменклатураЕГАИС,
	|	Товары.Номенклатура,
	|	Товары.ТипНоменклатуры,
	|	Товары.ПодакцизныйТовар,
	|	Товары.АлкогольнаяПродукцияВоВскрытойТаре,
	|	Товары.НоменклатураНаименование,
	|	Товары.ХарактеристикаНаименование,
	|	Товары.УпаковкаНаименование,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.Серия,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.Цена,
	|	Товары.ПроцентАвтоматическойСкидки,
	|	Товары.СуммаАвтоматическойСкидки,
	|	Товары.ПроцентРучнойСкидки,
	|	Товары.СуммаРучнойСкидки,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.Штрихкод	
	|ИЗ Товары КАК Товары
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаТовары.Упаковка",
		"ТаблицаТовары.Номенклатура"));
		
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("АкцизныеМарки", Объект.АкцизныеМарки.Выгрузить());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции


&НаСервере
Функция ПолучитьСписокДокументовДляПечати()
	Схема = Элементы.НераспечатанныеЧеки.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.НераспечатанныеЧеки.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	//!!!!Сообщить(НераспечатанныеЧеки.ТекстЗапроса); переделать на запрос
	КМ = Новый  КомпоновщикМакетаКомпоновкиДанных;
	Макет = КМ.Выполнить(Схема,Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПК = Новый ПроцессорКомпоновкиДанных;
	ПК.Инициализировать(Макет);
	
	ТЗ = Новый ТаблицаЗначений;
	
	ПВ = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПВ.УстановитьОбъект(ТЗ);
	ПВ.Вывести(ПК);
	Если ТЗ.Количество()=0 Тогда 
		Возврат  Новый Структура;
	Иначе
		ДокументыПродажи = Новый Массив (ТЗ.Количество(),3);
		д=0;
		Для Каждого мДокументы Из  ТЗ Цикл
			НомерСекции = 0;
			ДокументыТЧТовары = Новый Массив;
			
			мМасив = Новый  ТаблицаЗначений;
			мМасив.Колонки.Добавить("ДокументПродажи");
			мМасив.Колонки.Добавить("Секция");
			мМасив.Колонки.Добавить("ФормаОплаты");
			мМасив.Колонки.Добавить("АгентскийПлатеж");
			мМасив.Колонки.Добавить("ИсполнительУслуг");
			мМасив.Колонки.Добавить("ПризнакСпособаРасчета");
			
			Для Каждого СТЧ из  мДокументы.Ссылка.ОсновнаяДеятельность Цикл
				НоваяСтрока = мМасив.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СТЧ);
			КонецЦикла;
			Для Каждого СТЧ из  мДокументы.Ссылка.СторонниеУслуги Цикл
				НоваяСтрока = мМасив.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СТЧ);
				НоваяСтрока.АгентскийПлатеж = СТЧ.ДокументПродажи.АгентскийПлатеж;
				НоваяСтрока.ИсполнительУслуг = мДокументы.Ссылка.Партнер;
			КонецЦикла;
			Для Каждого СТЧ из  мДокументы.Ссылка.Товары Цикл
				НоваяСтрока = мМасив.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СТЧ);
				НоваяСтрока.АгентскийПлатеж = Ложь;
				НоваяСтрока.ИсполнительУслуг = Справочники.Партнеры.ПустаяСсылка();
			КонецЦикла;
			мМасив.Свернуть("ДокументПродажи, Секция, ФормаОплаты, АгентскийПлатеж, ИсполнительУслуг, ПризнакСпособаРасчета");
			Для Каждого СТМ Из мМасив Цикл
				Если Не Документы.ЧекККМ.СтатусДокумента(СТМ.ДокументПродажи) = Перечисления.СтатусыЧековККМ.Пробит Тогда 
					CписокДокументов = Новый Структура;
					CписокДокументов.Вставить("Продажи", СТМ.ДокументПродажи);
					CписокДокументов.Вставить("Секция",  СТМ.Секция);
					CписокДокументов.Вставить("ФормаОплаты",  СТМ.ФормаОплаты);
					CписокДокументов.Вставить("АгентскийПлатеж",  СТМ.АгентскийПлатеж);
					CписокДокументов.Вставить("ИсполнительУслуг",  СТМ.ИсполнительУслуг);
					CписокДокументов.Вставить("ПризнакСпособаРасчета", СТМ.ПризнакСпособаРасчета);
					ДокументыТЧТовары.Добавить(CписокДокументов); 
				КонецЕсли;
			КонецЦикла;
			ДокументыПродажи[д][0] = мДокументы.Ссылка; 
			ДокументыПродажи[д][1] = ДокументыТЧТовары; 
			д=д+1;
		КонецЦикла;
		Возврат ДокументыПродажи; 
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОплатаНаличными(Команда)
	ОчиститьСообщения();
	//МИС
	//если не введен е-майл, то печать чек обязательно!	
	Если НеПечататьФискальныйЧек И ПустаяСтрока(Email) И ПустаяСтрока(Телефон) Тогда
		Предупреждение("Не указан e-mail или телефон клиента! 
		|Укажите способ передачи электронного чека или снимите флаг ""Не печатать фискальный чек""");
		Возврат;		
	КонецЕсли;		
	НастроитьРМК();	
	ПечатьЧеков();
	ОбновитьНаличностьВКассеККМ();
	Если Элементы.СписокПотребителей.ТекущиеДанные <> Неопределено Тогда
		ПроверитьЕмайл(Элементы.СписокПотребителей.ТекущиеДанные.ссылка);
	КонецЕсли;	
КонецПроцедуры

 &НаСервере
Процедура УдалитьИзНераспечатанныхЧековНаСервере(ДокПродажи)
	ДокОбъект = ДокПродажи.ПолучитьОбъект();
	ДокОбъект.ПометкаУдаления = Истина;
	ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзНераспечатанныхЧеков(Команда)
	ДокПродажи = Элементы.НераспечатанныеЧеки.ТекущаяСтрока;
	УдалитьИзНераспечатанныхЧековНаСервере(ДокПродажи);
	Элементы.НераспечатанныеЧеки.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ЛицевойСчетОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	//ГруппаОтбора = СписокПотребителей.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	//ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	//ЭлементОтбора = СписокПотребителей.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.Родитель = ГруппаОтбора;
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЮрФизЛицо");
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.ПравоеЗначение = Объект.ФизЮрЛицо;
	
	//ЭлементОтбора = СписокПотребителей.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.Родитель = ГруппаОтбора;
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НомерЛС");
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.ПравоеЗначение = Текст;
КонецПроцедуры

&НаКлиенте
Процедура ФизЮрЛицоПриИзменении(Элемент)
	УстановитьВидимостьПараметровПоиска();
	ИзменениеПараметровПоиска();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПараметровПоиска()
	
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		
		Элементы.ОбластьОтбораФЛ.Видимость = Истина;
		Элементы.ОбластьОтбораЮЛ.Видимость = Ложь;
		
	ИначеЕсли Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")Тогда
		
		Элементы.ОбластьОтбораФЛ.Видимость = Ложь;
		Элементы.ОбластьОтбораЮЛ.Видимость = Истина;
		
	Иначе
		// одинокий "РозничныйПокупатель"
		Элементы.ОбластьОтбораФЛ.Видимость = Ложь;
		Элементы.ОбластьОтбораЮЛ.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода,
	                                              |ДисплейПокупателя,
	                                              |ФискальныйРегистратор,
	                                              |ЭквайринговыйТерминал,
	                                              |ЭлектронныеВесы,
	                                              |СчитывательМагнитныхКарт";
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтотОбъект, "");
	РозничныеПродажи.ЗаполнитьТаблицуОборудование(ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ОборудованиеПодключено = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(
			Неопределено,
			Неопределено,
			МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента()).Количество() > 0;
		ЗначениеОткрыватьФормуСПодключеннымОборудованием = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ЧекККМ", "ОткрыватьФормуСПодключеннымОборудованием");
		Если ЗначениеОткрыватьФормуСПодключеннымОборудованием = Неопределено Тогда
			ОткрыватьФормуСПодключеннымОборудованием = ОборудованиеПодключено;
		Иначе
			ОткрыватьФормуСПодключеннымОборудованием = ЗначениеОткрыватьФормуСПодключеннымОборудованием И ОборудованиеПодключено;
		КонецЕсли;
	КонецЕсли;
	СписокКассККМ = Справочники.НастройкиРМК.НайтиПоРеквизиту("РабочееМесто",МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента()).КассыККМ;
	Если СписокКассККМ.Количество()>1 Тогда
		
		СписокВыбора = ЭтотОбъект.Элементы.КассаККМ.СписокВыбора;
		СписокВыбора.Очистить();
		Для Каждого стрТЗ Из СписокКассККМ Цикл
			СписокВыбора.Добавить(стрТЗ.КассаККМ);
		КонецЦикла;
		
	ИначеЕсли СписокКассККМ.Количество()=1 Тогда
		Объект.КассаККМ = СписокКассККМ[0].КассаККМ;
		Попытка
			Тест = Объект.КассаККМ.Наименование;
		Исключение
		    Объект.КассаККМ = Неопределено;
		КонецПопытки;
	Иначе
		Сообщить("Не определена КассаККМ, возможно не настроено РМК!");
		Если Не РольДоступна("ПолныеПрава") Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		ПриИзмененииКассыККМ();	
	КонецЕсли;
	
	Попытка
	
		//Объект.Касса = Справочники.Кассы.НайтиПоРеквизиту("Подразделение",Объект.КассаККМ.Подразделение);
	
	Исключение
	
	КонецПопытки;
	Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	РеквизитыКассира = РозничныеПродажи.РеквизитыКассира(Пользователи.ТекущийПользователь());
	ИспользоватьОплатуПлатежнымиКартами       = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами");
	ИспользоватьПодарочныеСертификаты         = ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты");
	НастроитьПраваДляПользователя();
	ОтправлятьEmailЧерезОФД                   = Константы.ОтправлятьЭлектронныеЧекиПоEmailЧерезОФД.Получить();
	ОтправлятьSMSЧерезОФД                     = Константы.ОтправлятьЭлектронныеЧекиПоSMSЧерезОФД.Получить();
	ДанныеФискальнойОперации = РозничныеПродажи.СтруктураДанныеФискальнойОперации();
КонецПроцедуры

&НаКлиенте
Процедура ЛицевойСчетПриИзменении(Элемент)
	Email               = "";
	Телефон             = "";
	НеПечататьФискальныйЧек = Ложь;

	ИзменениеПараметровПоиска();	
КонецПроцедуры

&НаСервере
Процедура ПоискПоШтрихКодуНаСервере()
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	ДанныеШтрихкодов = Новый Массив;
	ДанныеШтрихкодов.Добавить(ДанныеШтрихкода);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихКоду(Команда)
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) Экспорт 
	Если Источник = "ПодключаемоеОборудование" Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Объект.ЛицевойСчет 	= "";
			Объект.ИНН			= "";
			Email               = "";
			Телефон             = "";
			НеПечататьФискальныйЧек = Ложь;
			
			ДанныеШтрихкодов = МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			СтруктутураШтрихкода = АЭС_Штрихкодирование.ПолучитьДанныеКвитанции(ДанныеШтрихкодов[0].Штрихкод, Объект.Партнер);
			Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо");
			Если ЗначениеЗаполнено(СтруктутураШтрихкода.НомерЛС) Тогда
				Объект.ЛицевойСчет = СтруктутураШтрихкода.НомерЛС;	
				ЛицевойСчетПриИзменении(Элементы.ЛицевойСчет);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктутураШтрихкода.МесяцОплаты) Тогда
				мДата = Дата(Лев(Формат(Год(ТекущаяДата()),"ЧГ=0"),2)+СтруктутураШтрихкода.ГодОплаты+СтруктутураШтрихкода.МесяцОплаты + Формат("01","ЧЦ=2; ЧВН =1"));
			Иначе
				мДата = '00010101';
   			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктутураШтрихкода.СуммаОплаты) Тогда 
				Сумма = Число(СтруктутураШтрихкода.СуммаОплаты)/100;
			Иначе
				Сумма = 0;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктутураШтрихкода.Показания) Тогда  
				Показания = СтруктутураШтрихкода.Показания;
			Иначе
				Показания = 0;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктутураШтрихкода.ВидДокумента) Тогда  
				ВидДокумента = СтруктутураШтрихкода.ВидДокумента;
			Иначе
				ВидДокумента = "";
			КонецЕсли;
			
			Если СтруктутураШтрихкода.Распознано Тогда
		        //!!!! Пока другого решения не нашел
				Потребитель = ПолучитьПотребителяИзСписка();
				Если Показания = 0 Тогда 
					Показания = ПолучитьПоказанияИзРегистра(Потребитель);
				КонецЕсли;
				Если Потребитель = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка") Тогда
						СоздатьЛицевойСчет(Неопределено);
				Иначе
					СозадатьДокументПродажи(Потребитель,Сумма, мДата, Показания, ВидДокумента);
					//МИС заполним е-майл
					ЗаполнитьЕмайл(Потребитель);
				КонецЕсли;
			Иначе
				Сообщить(СтруктутураШтрихкода.ОписаниеОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	НастроитьПраваДляПользователя();
	НастроитьРМК();
КонецПроцедуры

&НаСервере
Функция ПолучитьПотребителяИзСписка()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	&Условие
	|	И Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)";
	
	Если ЗначениеЗаполнено(Объект.ЛицевойСчет) Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "Контрагенты.НомерЛС = &ЛицевойСчет И Контрагенты.Партнер = &Партнер");
		Запрос.УстановитьПараметр("ЛицевойСчет", Объект.ЛицевойСчет);
		Запрос.УстановитьПараметр("Партнер", Объект.Партнер);
	ИначеЕсли ЗначениеЗаполнено(Объект.АдресЛС)   Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "Контрагенты.АдресЛС = &АдресЛС");
		Запрос.УстановитьПараметр("АдресЛС", Объект.АдресЛС);
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		Возврат Результат[0].Ссылка;	
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьПоказанияИзРегистра(Контрагент)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(АЭС_ДанныеКонтрагентовСрезПоследних.ПоследниеПоказания, 0) КАК Показания
	|ИЗ
	|	РегистрСведений.АЭС_ДанныеКонтрагентов.СрезПоследних(&Период, Контрагент = &Контрагент) КАК АЭС_ДанныеКонтрагентовСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат  Выборка.Показания;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Для Каждого СтрокаТЧ Из Оборудование Цикл
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоИдентификатору(
		Новый ОписаниеОповещения("НачатьПодключениеОборудованиеПоИдентификаторуЗавершение", ЭтотОбъект, СтрокаТЧ),
		ЭтотОбъект.УникальныйИдентификатор,
		СтрокаТЧ.Ссылка);
	КонецЦикла;
	ОбновитьТЧ();	
	ОбновитьНаличностьВКассеККМ();
	УстановитьВидимостьПараметровПоиска();

	ИзменениеПараметровПоиска();

	НераспечатанныеЧекиПриИзменении(Неопределено);
	
	ОбновитьСписокПартнеров();
	
КонецПроцедуры

&НаКлиенте
процедура ОбновитьНаличностьВКассеККМ()
	НаличностьВкассеККМ = АЭС_Сервер.ПолучитьСуммуНаличностиВКассеККМ(Объект.КассаККМ);
	НаличностьВкассеККМ.Свойство("Сумма", ОсновнаяКасса);
	НаличностьВкассеККМ.Свойство("СуммаАг", АгентскаяКасса);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТЧ()
	НераспечатанныеЧеки.Параметры.УстановитьЗначениеПараметра("КассоваяСмена", Объект.КассоваяСмена);
	Элементы.НераспечатанныеЧеки.Обновить();
	ПлатежиЗаСмену.Параметры.УстановитьЗначениеПараметра("КассоваяСмена", Объект.КассоваяСмена);
	Элементы.ПлатежиЗаСмену.Обновить();	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеОборудованиеПоИдентификаторуЗавершение(Данные, СтрокаТЧ) Экспорт

	Если НЕ Данные.Результат Тогда
		
		ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка:
		                            |""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Данные.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		СтрокаТЧ.Подключено = 1;
		
	Иначе
		
		СтрокаТЧ.Подключено = 0;
		
		Если СтрокаТЧ.ТипОборудования = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ДисплейПокупателя") Тогда
			ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СписокПотребителейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Контрагент = Элементы.СписокПотребителей.ТекущиеДанные.Ссылка;
	СозадатьДокументПродажи(Контрагент, Неопределено, ТекущаяДата(), Неопределено, Неопределено, Неопределено);
КонецПроцедуры

&Наклиенте
Процедура СозадатьДокументПродажи(Контрагент, Сумма = Неопределено, Дата = неопределено, Показания = Неопределено, ВидДокумента = Неопределено, СтруктураТовара = Неопределено)
	ПараметрыЗаполнения = Новый Структура;
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		Сообщить("Не заполнен партнер в основных реквизитах рабочего места кассира!");
		Возврат;
	Иначе 
		СписокПартнеровПоУмолчанию = АЭС_Сервер.ПолучитьМассивПартнеровПоУмолчанию();
		Если СписокПартнеровПоУмолчанию.Найти(Объект.Партнер) <> Неопределено Тогда 
			ПараметрыЗаполнения.Вставить("АгентскийПлатеж", Ложь);
		Иначе
			ПараметрыЗаполнения.Вставить("АгентскийПлатеж", Истина);
		КонецЕсли;
	КонецЕсли;
	ПараметрыЗаполнения.Вставить("Контрагент", Контрагент);
	ПараметрыЗаполнения.Вставить("СуммаДокумента", Сумма);
	ПараметрыЗаполнения.Вставить("Показания", Показания);
	ПараметрыЗаполнения.Вставить("ПериодПлатежа", Дата);
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	ПараметрыЗаполнения.Вставить("КассаККМ", Объект.КассаККМ);
	//ПараметрыЗаполнения.Вставить("Касса", Объект.Касса);
	ПараметрыЗаполнения.Вставить("Секция", Объект.НомерСекции);
	ПараметрыЗаполнения.Вставить("КассоваяСмена", Объект.КассоваяСмена);
	ПараметрыЗаполнения.Вставить("Партнер", Объект.Партнер);
	ПараметрыЗаполнения.Вставить("Валюта", СтруктураСостояниеКассовойСмены.Валюта);
	ПараметрыЗаполнения.Вставить("ВидЦены", СтруктураСостояниеКассовойСмены.ВидЦены);
	ПараметрыЗаполнения.Вставить("ЦенаВключаетНДС", СтруктураСостояниеКассовойСмены.ЦенаВключаетНДС);
	ПараметрыЗаполнения.Вставить("Склад", СтруктураСостояниеКассовойСмены.Склад);
	ПараметрыЗаполнения.Вставить("НалогообложениеНДС", СтруктураСостояниеКассовойСмены.НалогообложениеНДС);
	ПараметрыЗаполнения.Вставить("ВидДокумента",ВидДокумента);
	ПараметрыЗаполнения.Вставить("ВариантЗаполнения",ВариантЗаполнения);
	Если Не Сумма=Неопределено Тогда 
		ПараметрыЗаполнения.Вставить("ШтрихКод", Истина);
	Иначе
		ПараметрыЗаполнения.Вставить("ШтрихКод", Ложь);
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("Товар", СтруктураТовара);
	
	//мПартнер = Объект.Партнер;
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
	фНовыйДокумент = ПолучитьФорму("Документ.АЭС_Платежи.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	фНовыйДокумент.Открыть();	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКассовуюСмену(Команда)
	РозничныеПродажиКлиент.ОткрытьКассовуюСмену(
		ПараметрыКассыККМ, 
		Новый ОписаниеОповещения("ПослеЗавершенияОперацииСКассовойСменой", ЭтотОбъект));
	ОбновитьТЧ();
КонецПроцедуры
	
&НаКлиенте
Процедура ПослеЗавершенияОперацииСКассовойСменой(Результат, ДополнительныеПараметры) Экспорт
	
	Оповестить("ИзменениеКассовойСмены");
	
	СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(Объект.КассаККМ);
	СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(Объект.КассаККМ);
	
	// м/б нужно так:
	// ЗаполнитьЗначенияСвойств(Объект, СтруктураСостояниеКассовойСмены,, "Кассир");
	// но пока так:
	Объект.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКассовуюСмену(Команда)
	Оповещение = Новый ОписаниеОповещения("ЗакрытьКассовуюСменуЗвершение", ЭтотОбъект);
	ТекстВопроса = "Кассовая смена будет закрыта! Продолжить выполнение операции?"; 
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);  
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКассовуюСменуЗвершение(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда 
		РозничныеПродажиКлиент.ЗакрытьКассовуюСмену(
		ПараметрыКассыККМ,
		Новый ОписаниеОповещения("ПослеЗавершенияОперацииСКассовойСменой", ЭтотОбъект));
		ОбновитьТЧ();
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеКассовойСменыНаСервереБезКонтекста(КассаККМ)
	
	Возврат РозничныеПродажи.ПолучитьСостояниеКассовойСмены(КассаККМ);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИнформацияОбОплате(Форма, мОбъект, мФорма)
	Если ТипЗнч(мОбъект) = Тип("ДокументСсылка.ЧекККМ") Тогда	
		СуммаСкидки = Форма.СуммаРучнойСкидки + Форма.СуммаАвтоматическойСкидки;
		СуммаСкидкиБонусныеБаллы = Форма.СуммаБонусныхБалловКСписаниюВВалюте;
		
		Если Форма.ЦенаВключаетНДС Тогда
			СуммаБезСкидки = Форма.СуммаДокумента + СуммаСкидки + СуммаСкидкиБонусныеБаллы;
		Иначе
			СуммаБезСкидки = Форма.СуммаДокумента - Форма.СуммаНДС + СуммаСкидки + СуммаСкидкиБонусныеБаллы;
		КонецЕсли;
		
		СуммаКОплате = СуммаБезСкидки - СуммаСкидки;
		
		ИнформацияОбОплате = Новый Структура;
		ИнформацияОбОплате.Вставить("Документ",              мОбъект);
		ИнформацияОбОплате.Вставить("Наличные",              Форма.ПолученоНаличными);
		ИнформацияОбОплате.Вставить("ПлатежныеКарты",        Форма.ОплатаПлатежнымиКартами);
		ИнформацияОбОплате.Вставить("ПодарочныеСертификаты", Форма.ПодарочныеСертификаты);
		ИнформацияОбОплате.Вставить("БонусныеБаллы",         СуммаСкидкиБонусныеБаллы);
		
		ИнформацияОбОплате.Вставить("СуммаДокумента",        Форма.СуммаДокумента);
		ИнформацияОбОплате.Вставить("СуммаБезСкидки",        СуммаБезСкидки);
		ИнформацияОбОплате.Вставить("СуммаКОплате",          СуммаКОплате);
		ИнформацияОбОплате.Вставить("СуммаСкидки",           СуммаСкидки);
		ИнформацияОбОплате.Вставить("ИтогоОплачено",         ИнформацияОбОплате.Наличные + ИнформацияОбОплате.ПлатежныеКарты + ИнформацияОбОплате.ПодарочныеСертификаты + ИнформацияОбОплате.БонусныеБаллы);
		
		ИнформацияОбОплате.Вставить("ДоступныеВидыОплаты", ДоступныеВидыОплаты(мФорма));
	ИначеЕсли ТипЗнч(мОбъект) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		
		Если Форма.ЦенаВключаетНДС Тогда
			СуммаБезСкидки = Форма.СуммаДокумента;
		Иначе
			СуммаБезСкидки = Форма.СуммаДокумента - Форма.СуммаНДС;
		КонецЕсли;
		
		ИнформацияОбОплате = Новый Структура;
		ИнформацияОбОплате.Вставить("Документ",               мОбъект);
		
		ИнформацияОбОплате.Вставить("Наличные",               Форма.ВыданоНаличными);
		ИнформацияОбОплате.Вставить("ПлатежныеКарты",         Форма.ОплатаПлатежнымиКартами);
		ИнформацияОбОплате.Вставить("ПлатежныеКартыОтменено", Форма.ОплатаПлатежнымиКартамиОтменено);
		ИнформацияОбОплате.Вставить("ПодарочныеСертификаты",  0);
		ИнформацияОбОплате.Вставить("БонусныеБаллы",          0);
		
		ИнформацияОбОплате.Вставить("СуммаДокумента",        Форма.СуммаДокумента);
		ИнформацияОбОплате.Вставить("СуммаКОплате",          СуммаБезСкидки);
		ИнформацияОбОплате.Вставить("СуммаСкидки",           0);
		ИнформацияОбОплате.Вставить("ИтогоОплачено",         ИнформацияОбОплате.Наличные + Форма.ОплатаПлатежнымиКартамиОтменено);
		
		ИнформацияОбОплате.Вставить("ДоступныеВидыОплаты", ДоступныеВидыОплаты(мФорма));
	КонецЕсли;
	Возврат ИнформацияОбОплате;
	
КонецФункции

&НаКлиенте
Функция ПараметрыЧека(мОбъект, ОплатаНаличными, НомерСекции, ДокументОснование, АгентскийПлатеж, ИсполнительУслуг, ДанныеОбъекта, ПризнакСпособаРасчета)
	Если ДанныеОбъекта.Количество() = 0 Тогда 
		Возврат Новый Структура;
	КонецЕсли;
	ПараметрыФискализацииЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	СуммаАгетскогоВознаграждения = 0;
	//Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
	//	//Данные = ДанныеДляЕГАИС();
	//Иначе
	//	Данные = Товары;
	//КонецЕсли;
	
	Данные = ДанныеДляЕГАИС(мОбъект);	
	ДанныеОрганизации = ПолучитьДанныеОрганизациипоДокументу(ДокументОснование);
	ЕстьАлкогольнаяПродукция = Ложь;
	мОрганизация = ДанныеОрганизации.Организация;
	ПечатьДанныхАгента = ДанныеОрганизации.АЭС_ПечатьДанныхАгента;
	Если АгентскийПлатеж Тогда
		ПараметрыФискализацииЧека.ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйАгент");
		КонтактныеДанныеАгента = ПолучитьДанныеАгента(мОрганизация, "Организации");
		КонтактныеДанныеПоставшика = ПолучитьДанныеАгента(ИсполнительУслуг, "Партнеры");
		Если НЕ КонтактныеДанныеАгента = Неопределено Тогда
			СтрокаАгент = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека(НСтр("ru = 'Пл. агент:'")+ " " + КонтактныеДанныеАгента.Агент );
			СтрокаАгент.ПереносСтроки = Истина;
			ПараметрыФискализацииЧека.ПозицииЧека.Добавить(СтрокаАгент);
			Если ПечатьДанныхАгента Тогда
				СтрокаАгентТелефон = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека(НСтр("ru = 'Тлф. пл. агента:'")+ " " + КонтактныеДанныеАгента.НомерТелефона);
				СтрокаАгентТелефон.ПереносСтроки = Истина;
				ПараметрыФискализацииЧека.ПозицииЧека.Добавить(СтрокаАгентТелефон);
			Иначе
				ПараметрыФискализацииЧека.ДанныеАгента.ПлатежныйАгент.Телефон	= КонтактныеДанныеАгента.НомерТелефона;	
			КонецЕсли;
		КонецЕсли;
		Если НЕ КонтактныеДанныеПоставшика = Неопределено Тогда
			СтрокаПоставщик = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека(НСтр("ru = 'Пост. услуг:'")+ " " + КонтактныеДанныеПоставшика.Агент );
			СтрокаПоставщик.ПереносСтроки = Истина;
			ПараметрыФискализацииЧека.ПозицииЧека.Добавить(СтрокаПоставщик);
			Если ПечатьДанныхАгента Тогда
				СтрокаПоставщикТелефон = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека(НСтр("ru = 'Тлф. пост.:'")+ " " + КонтактныеДанныеПоставшика.НомерТелефона );
				СтрокаПоставщикТелефон.ПереносСтроки = Истина;
				ПараметрыФискализацииЧека.ПозицииЧека.Добавить(СтрокаПоставщикТелефон);
			Иначе
				ПараметрыФискализацииЧека.Данныепоставщика.Наименование			= КонтактныеДанныеПоставшика.Агент;
				ПараметрыФискализацииЧека.Данныепоставщика.Телефон				= КонтактныеДанныеПоставшика.НомерТелефона;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ДанныеОбъекта.Свойство("Контрагент") Тогда 
		Если Не ДанныеОбъекта.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.РозничныйПокупатель") Тогда 
			ДанныеКонтрагента = ПолучитьДанныеКонтрагента(ДанныеОбъекта.Контрагент);
			ИП = ДанныеКонтрагента.ЮрФизЛицо;
			мНаименованиеКонтрагента = ДанныеКонтрагента.Наименование;
			Если НЕ ИП = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") И 
					НЕ ИП = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ПустаяСсылка")Тогда
				Если ЗначениеЗаполнено(мНаименованиеКонтрагента) Тогда 
					ПараметрыФискализацииЧека.Получатель = мНаименованиеКонтрагента;
				КонецЕсли;
				мИННКонтрагента = ДанныеКонтрагента.ИНН;
				Если ЗначениеЗаполнено(мИННКонтрагента) Тогда 
					ПараметрыФискализацииЧека.ПолучательИНН = мИННКонтрагента;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//данные по фио и л/с добавляем один раз
	
	Если ДанныеОбъекта.Свойство("Контрагент") Тогда 
		Если Не ДанныеОбъекта.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.РозничныйПокупатель") Тогда 
			Если ИП = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
				Если ЗначениеЗаполнено(мНаименованиеКонтрагента) Тогда 
					СтрокаПозицииЧекаТ = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека(НСтр("ru = 'Оплата от:'")+ " " + мНаименованиеКонтрагента );	
					СтрокаПозицииЧекаТ.ПереносСтроки = Истина;
					ПараметрыФискализацииЧека.ПозицииЧека.Добавить(СтрокаПозицииЧекаТ);
				КонецЕсли;				
			КонецЕсли;
			СтрокаПозицииЧекаТ = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека(НСтр("ru = 'ЛС:'")+ " "+ДанныеКонтрагента.НомерЛС);										   
			ПараметрыФискализацииЧека.ПозицииЧека.Добавить(СтрокаПозицииЧекаТ);
		КонецЕсли;
	КонецЕсли; 	
	
	Для Каждого СтрокаТЧ Из Данные Цикл
		
		СтавкаНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТЧ.СтавкаНДС);
		
		Если СтрокаТЧ.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") Тогда
			ЗначениеСтавкиНДС = Неопределено;
		Иначе
			//ЗначениеСтавкиНДС = СтавкаНДС * 100;
			ЗначениеСтавкиНДС = РозничныеПродажиКлиентСервер.СтавкаНДСФискальнойОперации(СтрокаТЧ.СтавкаНДС, Истина);
		КонецЕсли;
		
		Если ДанныеОбъекта.ЦенаВключаетНДС Тогда
			Сумма = СтрокаТЧ.Сумма;
		Иначе
			Сумма = СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС;
		КонецЕсли;
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		СтрокаПозицииЧека.ПризнакСпособаРасчета  = ПризнакСпособаРасчета;//ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой");
		ВидОплатыКомиссия = ПроверитьВидОплатыКомиссия(мОрганизация,СтрокаТЧ.Номенклатура);
		Если ВидОплатыКомиссия Тогда
			СтрокаПозицииЧека.ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.АгентскоеВознаграждение");
		Иначе
			СтрокаПозицииЧека.ПризнакПредметаРасчета = РозничныеПродажиКлиентСервер.ПризнакПредметаРасчетаФискальнойОперации(СтрокаТЧ.ТипНоменклатуры, СтрокаТЧ.ПодакцизныйТовар);
		КонецЕсли;
		//Если ДанныеОбъекта.Свойство("Контрагент") Тогда 
		//	Если Не ДанныеОбъекта.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.РозничныйПокупатель") Тогда 
		//		Если ИП = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		//			Если ЗначениеЗаполнено(мНаименованиеКонтрагента) Тогда 
		//				СтрокаПозицииЧекаТ = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека(НСтр("ru = 'Оплата от:'")+ " " + мНаименованиеКонтрагента );	
		//				СтрокаПозицииЧекаТ.ПереносСтроки = Истина;
		//				ПараметрыФискализацииЧека.ПозицииЧека.Добавить(СтрокаПозицииЧекаТ);
		//			КонецЕсли;
		//			//Если ЗначениеЗаполнено(мИННКонтрагента) Тогда
		//			//	СтрокаПозицииЧекаТ = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека(НСтр("ru = 'ИНН:'")+ " " + мИННКонтрагента );	
		//			//	ПараметрыФискализацииЧека.ПозицииЧека.Добавить(СтрокаПозицииЧекаТ);
		//			//КонецЕсли;
		//		КонецЕсли;
		//		СтрокаПозицииЧекаТ = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека(НСтр("ru = 'ЛС:'")+ " "+ДанныеКонтрагента.НомерЛС);										   
		//		ПараметрыФискализацииЧека.ПозицииЧека.Добавить(СтрокаПозицииЧекаТ);
		//	КонецЕсли;
		//КонецЕсли;
		//Код = ПолучитьЗначениеРеквизитаНаСервере(СтрокаТЧ.Номенклатура,"Код");
		//СтрокаПозицииЧека.Наименование = Строка(""+Код+" "+СтрокаТЧ.Номенклатура);
		//СтрокаПозицииЧека.КодТоварнойНоменклатуры = ПолучитьЗначениеРеквизитаНаСервере(СтрокаТЧ.Номенклатура,"Код");
		СтрокаПозицииЧека.Наименование		= Строка(СтрокаТЧ.Номенклатура);
		СтрокаПозицииЧека.Количество		= СтрокаТЧ.КоличествоУпаковок;
		СтрокаПозицииЧека.Цена				= СтрокаТЧ.Цена;
		СтрокаПозицииЧека.Сумма				= Сумма;
		СтрокаПозицииЧека.ЦенаСоСкидками 	= Окр(СтрокаПозицииЧека.Сумма / СтрокаПозицииЧека.Количество, 2);
		Если ДанныеОбъекта.Свойство("СуммаРучнойСкидки") Тогда 
			СтрокаПозицииЧека.СуммаСкидок		= ДанныеОбъекта.СуммаРучнойСкидки; 
		КонецЕсли;
		СтрокаПозицииЧека.СтавкаНДС			= ЗначениеСтавкиНДС;
		//АЭС МИС для дравейров ревизии интерфейса 3003
		СтрокаПозицииЧека.СуммаНДС          = СтрокаТЧ.СуммаНДС;
		СтрокаПозицииЧека.Штрихкод			= СтрокаТЧ.Штрихкод;
		СтрокаПозицииЧека.НомерСтрокиТовара = СтрокаТЧ.НомерСтроки;
		// Дополнительные параметры		
			
		СтрокаПозицииЧека.НомерСекции  = НомерСекции;
		Если СтрокаТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
				И НЕ ИП = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") И 
					НЕ ИП = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ПустаяСсылка")Тогда
			СтрокаПозицииЧека.КодСтраныПроисхожденияТовара = СтрокаТЧ.КодСтраныПроисхождения;
		КонецЕсли;
		
		ПараметрыФискализацииЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		//АМА+++
		ДрайверОборудования = ПолучитьДрайверККТ(Объект.КассаККМ);
		Если ДрайверОборудования = ПредопределенноеЗначение("Справочник.ДрайверыОборудования.ДрайверШтрихМККТ54ФЗ") или ДрайверОборудования = ПредопределенноеЗначение("Справочник.ДрайверыОборудования.ДрайверШтрихМККТ54ФЗ415") Тогда 
			Если Не СтавкаНДС = 0 Тогда
				//СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека("НДС "+Строка(СтрокаПозицииЧека.СтавкаНДС)+"%"
				//	+Прав("                                             "+Строка(Формат(Сумма - 100 * Сумма / (100 + СтавкаНДС), "ЧЦ=15; ЧДЦ=2")),41));
				Часть1 = "НДС "+Строка(СтрокаТЧ.СтавкаНДС);
				Часть2 = Прав("                                             "+Строка(Формат(Сумма - 100 * Сумма / (100 + СтавкаНДС), "ЧЦ=15; ЧДЦ=2")),48-СтрДлина(Часть1));
				СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека(Часть1 + Часть2);
				ПараметрыФискализацииЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
			Иначе
				СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека(Строка(СтрокаТЧ.СтавкаНДС));
				ПараметрыФискализацииЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
			КонецЕсли;
		КонецЕсли;
		
		//Если АгентскийПлатеж Тогда
		//	СуммаАгетскогоВознаграждения = ПолучитьСуммуКомиссииПоДокумету(ДокументОснование, СтрокаТЧ.Номенклатура); 			
		//КонецЕсли;
	КонецЦикла;
	//Если АгентскийПлатеж И Не СуммаАгетскогоВознаграждения = Неопределено Тогда
	//	СтрокаАгетскогоВознаграждени = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека(НСтр("ru = 'Агентское вознаграждение: '")+ " " + Формат(СуммаАгетскогоВознаграждения, "ЧДЦ =2"));
	//	ПараметрыФискализацииЧека.ПозицииЧека.Добавить(СтрокаАгетскогоВознаграждени);
	//	ПараметрыФискализацииЧека.ВознагражденияАгента    = СуммаАгетскогоВознаграждения;
	//Иначе
	//	ПараметрыФискализацииЧека.ВознагражденияАгента    = 0;
	//КонецЕсли;
	
	Если ТипЗнч(мОбъект) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ПараметрыФискализацииЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
	Иначе
		ПараметрыФискализацииЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
	КонецЕсли;
	
	ПараметрыФискализацииЧека.Электронно = НеПечататьФискальныйЧек;
	
	Если ЗначениеЗаполнено(Email) Тогда	
		Объект.ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail");	
		Объект.КонтактныеДанныеЭлектронногоЧека = Email;
	ИначеЕсли ЗначениеЗаполнено(Телефон) Тогда
		Объект.ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS");	
		Объект.КонтактныеДанныеЭлектронногоЧека = Телефон;			
	Иначе
		Объект.КонтактныеДанныеЭлектронногоЧека = "";			
	КонецЕсли;	
	
		
	Если Объект.ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS")
		И ЗначениеЗаполнено(Объект.КонтактныеДанныеЭлектронногоЧека) Тогда
		ПараметрыФискализацииЧека.Отправляет1СSMS = Не ОтправлятьSMSЧерезОФД;
		ПараметрыФискализацииЧека.ПокупательНомер = Объект.КонтактныеДанныеЭлектронногоЧека;
	КонецЕсли;
	
	Если Объект.ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail")
		И ЗначениеЗаполнено(Объект.КонтактныеДанныеЭлектронногоЧека) Тогда
		ПараметрыФискализацииЧека.Отправляет1СEmail = Не ОтправлятьEmailЧерезОФД;
		ПараметрыФискализацииЧека.ПокупательEmail = Объект.КонтактныеДанныеЭлектронногоЧека;
	КонецЕсли;
	РозничныеПродажиКлиентСервер.ЗаполнитьДанныеФискальнойОперации(ПараметрыФискализацииЧека, ДанныеФискальнойОперации);
	ПараметрыФискализацииЧека.ДокументОснование = мОбъект;
	
	//МИС - чтобы оперативно принимать решение о печати бумажного чека
	ПараметрыФискализацииЧека.Электронно = НеПечататьФискальныйЧек;
	
	ПараметрыФискализацииЧека.Кассир                 = РеквизитыКассира.Наименование;
	ПараметрыФискализацииЧека.КассирИНН              = РеквизитыКассира.ИНН;
	ПараметрыФискализацииЧека.СистемаНалогообложения = СтруктураСостояниеКассовойСмены.СистемаНалогообложения;
	ПараметрыФискализацииЧека.АдресРасчетов          = СтруктураСостояниеКассовойСмены.АдресСклада;
	ПараметрыФискализацииЧека.МестоРасчетов          = "";
	
	ПараметрыФискализацииЧека.ОрганизацияНазвание = СтруктураСостояниеКассовойСмены.СведенияООрганизации.ОфициальноеНаименование;
	ПараметрыФискализацииЧека.ОрганизацияИНН      = СтруктураСостояниеКассовойСмены.СведенияООрганизации.ИНН;
	ПараметрыФискализацииЧека.ОрганизацияКПП      = СтруктураСостояниеКассовойСмены.СведенияООрганизации.КПП;
	ПараметрыФискализацииЧека.НомерКассы          = "00001";
	ПараметрыФискализацииЧека.НомерЧека           = 1;
	ПараметрыФискализацииЧека.НомерСмены          = 1;
	
	ПараметрыФискализацииЧека.АдресМагазина             = СтруктураСостояниеКассовойСмены.АдресСклада;
	//ПараметрыФискализацииЧека.АдресОператораПеревода	= СтруктураСостояниеКассовойСмены.СведенияООрганизации.ЮридическийАдрес;
	
	ПараметрыФискализацииЧека.НаименованиеМагазина      = Строка(СтруктураСостояниеКассовойСмены.Склад);
	ПараметрыФискализацииЧека.СерийныйНомер             = СтруктураСостояниеКассовойСмены.СерийныйНомерККМ;
	ПараметрыФискализацииЧека.СистемаНалогообложения	= СтруктураСостояниеКассовойСмены.СистемаНалогообложения;
	
	//Если ТипЗнч(мОбъект) = Тип("ДокументСсылка.ЧекККМ") Тогда
	
		// Подготовка таблицы оплат
	ИнформацияОбОплате = ИнформацияОбОплате(ДанныеОбъекта, мОбъект, ЭтаФорма);
		
	// Наличные
	СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
	СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные"));
	СтрокаОплаты.Вставить("Сумма",     ИнформацияОбОплате.Наличные);
	ПараметрыФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
		
	// Безналичные
	СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
	СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно"));
	СтрокаОплаты.Вставить("Сумма",     ИнформацияОбОплате.ПлатежныеКарты);
	ПараметрыФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
		
	// Сертификатом
	СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
	СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата"));
	СтрокаОплаты.Вставить("Сумма",     ИнформацияОбОплате.ПодарочныеСертификаты);
	ПараметрыФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
			
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПараметрыФискализацииЧека", ПараметрыФискализацииЧека);
	ВозвращаемоеЗначение.Вставить("ЕстьАлкогольнаяПродукция",  ЕстьАлкогольнаяПродукция);
	Возврат ВозвращаемоеЗначение;
	
КонецФункции


&НаСервере
Функция ПолучитьДрайверККТ(КассаККТ)
	Отбор = Новый Структура;
	Отбор.Вставить("Объект", КассаККТ);
	НаденныеСтроки = Оборудование.НайтиСтроки(Отбор);
	Если НаденныеСтроки.Количество()>=1 Тогда
		Возврат НаденныеСтроки[0].Ссылка.ДрайверОборудования;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДоступныеВидыОплаты(Форма)
	                  
	ОплатаПлатежнымиКартами = Ложь;
	Если Форма.ИспользоватьОплатуПлатежнымиКартами
		И Форма.ЭквайринговыеТерминалы.Количество() > 0 Тогда
		
		ОплатаПлатежнымиКартами = Истина;
		
	КонецЕсли;
	
	//ОплатаБонуснымиБаллами = Ложь;
	//Если Форма.ИспользоватьБонусныеПрограммыЛояльности И ЗначениеЗаполнено(Форма.Объект.КартаЛояльности) Тогда
	//	
	//	ОплатаБонуснымиБаллами = Истина;
	//	
	//КонецЕсли;
	
	ДоступныеВидыОплаты = Новый Структура;
	ДоступныеВидыОплаты.Вставить("Наличные",              Истина);
	ДоступныеВидыОплаты.Вставить("ПлатежныеКарты",        ОплатаПлатежнымиКартами);
	//ДоступныеВидыОплаты.Вставить("БонусныеБаллы",         ОплатаБонуснымиБаллами);
	ДоступныеВидыОплаты.Вставить("ПодарочныеСертификаты", Форма.ИспользоватьПодарочныеСертификаты);
	
	Возврат ДоступныеВидыОплаты;
	
КонецФункции

&НаСервере
Функция ПолучитьТЧ(мСсылка, ОплатаНаличными, ДокументОснование)
	ЧекОбъект = мСсылка.ПолучитьОбъект(); 
	ВозвращаемоеЗначение = Новый Структура;	
	Если ЧекОбъект = Неопределено Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	Если ТипЗнч(мСсылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ВозвращаемоеЗначение.Вставить("СуммаРучнойСкидки",ЧекОбъект.Товары.Итог("СуммаРучнойСкидки"));
		ВозвращаемоеЗначение.Вставить("СуммаАвтоматическойСкидки", ЧекОбъект.Товары.Итог("СуммаАвтоматическойСкидки"));
		ВозвращаемоеЗначение.Вставить("СуммаБонусныхБалловКСписаниюВВалюте", ЧекОбъект.Товары.Итог("СуммаБонусныхБалловКСписаниюВВалюте"));
		ВозвращаемоеЗначение.Вставить("ПолученоНаличными", ЧекОбъект.ПолученоНаличными);
		ВозвращаемоеЗначение.Вставить("ПодарочныеСертификаты", ЧекОбъект.ПодарочныеСертификаты.Итог("Сумма"));
	ИначеЕсли ТипЗнч(мСсылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		ОплатаПлатежнымиКартамиОтменено = 0;
		Для Каждого СтрокаТЧ Из ЧекОбъект.ОплатаПлатежнымиКартами Цикл
			Если СтрокаТЧ.ОплатаОтменена Тогда
				ОплатаПлатежнымиКартамиОтменено = ОплатаПлатежнымиКартамиОтменено + СтрокаТЧ.Сумма;
			КонецЕсли;
		КонецЦикла;
		ВозвращаемоеЗначение.Вставить("ОплатаПлатежнымиКартамиОтменено",ОплатаПлатежнымиКартамиОтменено);
		ВозвращаемоеЗначение.Вставить("ВыданоНаличными", ЧекОбъект.ВыданоНаличными);
		
	КонецЕсли;
	
	ВозвращаемоеЗначение.Вставить("ЦенаВключаетНДС", ЧекОбъект.ЦенаВключаетНДС);
	Если ОплатаНаличными = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда 
		ВозвращаемоеЗначение.Вставить("ОплатаПлатежнымиКартами", ЧекОбъект.СуммаДокумента);
	Иначе
		ВозвращаемоеЗначение.Вставить("ОплатаПлатежнымиКартами", 0);
	КонецЕсли;
	ВозвращаемоеЗначение.Вставить("СуммаНДС", ЧекОбъект.Товары.Итог("СуммаНДС"));
	Если Не ДокументОснование = Неопределено Тогда
		ВозвращаемоеЗначение.Вставить("Контрагент", ДокументОснование.Контрагент);
		ВозвращаемоеЗначение.Вставить("АгентскийПлатеж", ДокументОснование.АгентскийПлатеж);
	КонецЕсли;
			
	ВозвращаемоеЗначение.Вставить("СуммаДокумента", ЧекОбъект.СуммаДокумента);
	
	

	//ДобавляемыеРеквизиты = Новый Массив;
	//УдаляемыеРеквизиты = Новый Массив;
	//
	//МассивКолонок = Новый Массив;
	//ТаблицаТовары = "Товары";
	//
	//
	//ТаблицаФормы = РеквизитФормыВЗначение(ТаблицаТовары);
	//
	//Для Каждого ТекКолонка из ТаблицаФормы.Колонки Цикл
	//	УдаляемыеРеквизиты.Добавить(ТаблицаТовары + "." + ТекКолонка.Имя);
	//КонецЦикла;
	//
	//Для Каждого ТекКолонка из ТЗ.Колонки Цикл
	//	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ТекКолонка.Имя, ТекКолонка.ТипЗначения, ТаблицаТовары));
	//	МассивКолонок.Добавить(ТекКолонка.Имя);
	//КонецЦикла;
	//
	// Добавим новые, удалим старые колонки
	//ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	// Поместим значение в реквизит формы
	//ЗначениеВРеквизитФормы(ТЗ, ТаблицаТовары);
	
	
	Возврат ВозвращаемоеЗначение;	
КонецФункции

&НаКлиенте
Процедура ПробитьЧекВыполнитьЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	ИзмененныеДанныеЗаписаны = Ложь;
	ВыполненаОперацияНаУстройстве = Ложь;
	Если РезультатВыполнения.Результат Тогда 
		ПроставитьСтатусДокумента(ДополнительныеПараметры.ДокументПродажи, ДополнительныеПараметры.ФормаОплаты, РезультатВыполнения.ВыходныеПараметры[1]);
		Если ТипЗнч(ДополнительныеПараметры.ДокументПродажи) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
			СозадатьДокументПродажиНаВозврат(ДополнительныеПараметры.ДокументПродажи);
		КонецЕсли;
		//// Установить полученное значение номера чека реквизиту документа.
		Если Не ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
			
			ТекстXML = ?(РезультатВыполнения.ВыходныеПараметры.Количество() > 7, РезультатВыполнения.ВыходныеПараметры[7], Неопределено);
			
			РеквизитыФискальнойОперацииКассовогоУзла = СтруктураРеквизитыФискальнойОперацииКассовогоУзла();//ПодключаемоеОборудованиеУТКлиент.СтруктураРеквизитыФискальнойОперацииКассовогоУзла();
			РеквизитыФискальнойОперацииКассовогоУзла.Данные            = ТекстXML;
			РеквизитыФискальнойОперацииКассовогоУзла.Дата              = ДополнительныеПараметры.ПараметрыОперацииФискализацииЧека.ДатаВремя;
			РеквизитыФискальнойОперацииКассовогоУзла.ДокументОснование = ДополнительныеПараметры.ДокументПродажи;
			РеквизитыФискальнойОперацииКассовогоУзла.Организация       = Объект.Организация;
			РеквизитыФискальнойОперацииКассовогоУзла.ТорговыйОбъект    = Объект.КассаККМ;
			РеквизитыФискальнойОперацииКассовогоУзла.Устройство        = ПараметрыКассыККМ.ИдентификаторУстройства;
			
			РеквизитыФискальнойОперацииКассовогоУзла.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыОперацииКассовогоУзла.ФискальнаяОперация");
			РеквизитыФискальнойОперацииКассовогоУзла.ТипРасчета  = ДополнительныеПараметры.ПараметрыОперацииФискализацииЧека.ТипРасчета;
			
			Если ПараметрыКассыККМ.ДоступнаПередачаДанных Тогда
				РеквизитыФискальнойОперацииКассовогоУзла.ВариантОтправкиЭлектронногоЧека  = ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека;
				РеквизитыФискальнойОперацииКассовогоУзла.КонтактныеДанныеЭлектронногоЧека = ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека;
			КонецЕсли;
			
			РеквизитыФискальнойОперацииКассовогоУзла.НомерСмены   = РезультатВыполнения.ВыходныеПараметры[0];
			РеквизитыФискальнойОперацииКассовогоУзла.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
			
			//ИнформацияОбОплате = ПолучитьТЧ(ДополнительныеПараметры.ДокументПродажи,ДополнительныеПараметры.ФормаОплаты, Неопределено);
			ИнформацияОбОплате = ДополнительныеПараметры.ДанныеОбъекта;
		//	ИнформацияОбОплате = ИнформацияОбОплате(ДанныеОбъекта, ДополнительныеПараметры.ДокументПродажи, ЭтаФорма);
			РеквизитыФискальнойОперацииКассовогоУзла.Сумма                     = ИнформацияОбОплате.СуммаДокумента;
			Если ТипЗнч(ДополнительныеПараметры.ДокументПродажи) = Тип("ДокументСсылка.ЧекККМВозврат")  Тогда 
				РеквизитыФискальнойОперацииКассовогоУзла.СуммаОплатыНаличные       = ИнформацияОбОплате.ВыданоНаличными;
				РеквизитыФискальнойОперацииКассовогоУзла.СуммаПредоплаты           = 0;
			Иначе
				РеквизитыФискальнойОперацииКассовогоУзла.СуммаОплатыНаличные       = ИнформацияОбОплате.ПолученоНаличными;
				РеквизитыФискальнойОперацииКассовогоУзла.СуммаПредоплаты           = ИнформацияОбОплате.ПодарочныеСертификаты;
			КонецЕсли;
			
			РеквизитыФискальнойОперацииКассовогоУзла.СуммаОплатыПлатежнаяКарта = ИнформацияОбОплате.ОплатаПлатежнымиКартами;
			РеквизитыФискальнойОперацииКассовогоУзла.СуммаКредит               = 0;
			
		КонецЕсли;
		
		
		ПараметрыЧека = ДопПараметры.Получить(ДополнительныеПараметры.ДокументПродажи);
		ПараметрыЧека.Вставить("ЧекПробит",1);  //пробит успешно
		ДопПараметры.Вставить(ДополнительныеПараметры.ДокументПродажи,ПараметрыЧека);
	Иначе
		ОшибкаПриПечатиОбрабоатьДокумент(ДополнительныеПараметры.ДокументПродажи);
		ПараметрыЧека = ДопПараметры.Получить(ДополнительныеПараметры.ДокументПродажи);
		ПараметрыЧека.Вставить("ЧекПробит",2);  //ошибка пробития чека
		ДопПараметры.Вставить(ДополнительныеПараметры.ДокументПродажи,ПараметрыЧека);
	КонецЕсли;
	ДанныеДляЖурналаРегистрации = Новый Структура;
	ДанныеДляЖурналаРегистрации.Вставить("Дата",   ПолучитьЗначениеРеквизитаНаСервере(ДополнительныеПараметры.ДокументПродажи, "Дата"));
	ДанныеДляЖурналаРегистрации.Вставить("Статус", ПолучитьЗначениеРеквизитаНаСервере(ДополнительныеПараметры.ДокументПродажи, "Статус"));
	Если РеквизитыФискальнойОперацииКассовогоУзла <> Неопределено Тогда
		ДанныеДляЖурналаРегистрации.Вставить("НомерЧекаККМ", РеквизитыФискальнойОперацииКассовогоУзла.НомерЧекаККМ);
	КонецЕсли;
	
	ВыполненаОперацияНаУстройстве = Истина;
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	ИзмененныеДанныеЗаписаны = ЗаписатьФискальнуюОперациюНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи, РеквизитыФискальнойОперацииКассовогоУзла);
	Если не ИзмененныеДанныеЗаписаны Тогда
			ДополнительныеПараметрыПовторЗаписи = РозничныеПродажиКлиентСервер.СтруктураПовтораЗаписи();
			ДополнительныеПараметрыПовторЗаписи.РеквизитыФискальнойОперацииКассовогоУзла = РеквизитыФискальнойОперацииКассовогоУзла;
			ДополнительныеПараметрыПовторЗаписи.ОписаниеОповещения                       = ДополнительныеПараметры.ОписаниеОповещения;
			ДополнительныеПараметрыПовторЗаписи.ТекстСообщения                 = НСтр("ru = 'После пробития чека на ФР не удалось сохранить документ.'");
			ДополнительныеПараметрыПовторЗаписи.ВозвращатьРезультатФункции     = Ложь;
			ДополнительныеПараметрыПовторЗаписи.РезультатПриУспешномПроведении = Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Истина);
			ДополнительныеПараметрыПовторЗаписи.РезультатПриОтмене             = Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Ложь);
			ДополнительныеПараметрыПовторЗаписи.ИмяПроцедуры                   = "ЗаписатьФискальнуюОперациюНаСервере";
			ДополнительныеПараметрыПовторЗаписи.РезультатОперации              = ИзмененныеДанныеЗаписаны;
			
			Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
				РезультатОперации = ЗаписатьФискальнуюОперациюНаСервере(ТребуетсяПовторнаяПопыткаЗаписи, ДополнительныеПараметры.РеквизитыФискальнойОперацииКассовогоУзла);
				Возврат;
			КонецЕсли;
	КонецЕсли;
	Если Не РезультатВыполнения.Результат Тогда
		Сообщить(РезультатВыполнения.ОписаниеОшибки, СтатусСообщения.ОченьВажное);
	КонецЕсли;
	
	ПроверитьДокументПродажи(ДополнительныеПараметры.ДокументПродажи);	
	ОбновитьТЧ();	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат.ВыполненаОперацияНаУстройстве
		И Результат.ИзмененныеДанныеЗаписаны Тогда
		
		ТолькоПросмотр = Истина;
		
		ПодключитьОбработчикОжидания("УстановитьТекущийЭлементНаКнопкуНовыйЧек", 0.1, Истина);
		
	Иначе
		
		Если Результат.ВыполненаОперацияНаУстройстве И Не Результат.ИзмененныеДанныеЗаписаны Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Данные", Объект.Ссылка);
			ПараметрыФормы.Вставить("ДанныеДляЖурналаРегистрации", ДанныеДляЖурналаРегистрации);
			ПараметрыФормы.Вставить("ТекстСообщения",
				НСтр("ru = 'ВНИМАНИЕ! Произошла исключительная ситуация:
				|Чек ККМ пробит, но не зафиксирован в системе.'"));
			
			ОткрытьФорму("Документ.ЧекККМ.Форма.ОшибкаЗаписи", ПараметрыФормы, ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	
	Если ПараметрыВыполнения.НомерСмены <> 0 Тогда
		ШапкаЧека.НомерСмены = ПараметрыВыполнения.НомерСмены;
	КонецЕсли;
	
	Если ПараметрыВыполнения.НомерЧека <> 0 Тогда
		ШапкаЧека.НомерЧека = ПараметрыВыполнения.НомерЧека;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукция
		И ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
		
		ИнтеграцияЕГАИСКлиент.НачатьФормированиеПодписиЧека(
			Новый ОписаниеОповещения("ПечатьЧека_ПослеПолученияПодписиВЕГАИС", ЭтотОбъект, ПараметрыВыполнения),
			ПараметрыВыполнения.ВходныеПараметры,
			ДополнительныеПараметры.ТранспортныйМодуль,
			Ложь);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	ШапкаЧека.НомерЧека = ШапкаЧека.НомерЧека + 1000000;
	
	Если ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств") Тогда
		ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
	Иначе
		ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьСсылкиНаОборудование()
	
	ЭквайринговыеТерминалы.Очистить();
	
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.ЭквайринговыйТерминал КАК Ссылка,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ИЗ
	|	Справочник.НастройкиРМК.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Ссылка.РабочееМесто = &РабочееМесто
	|	И ((ЭквайринговыеТерминалы.ПодключаемоеОборудование <> ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|		И ЭквайринговыеТерминалы.ПодключаемоеОборудование.РабочееМесто = &РабочееМестоОборудования)
	|		Или ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования)
	|	И ЭквайринговыеТерминалы.ЭквайринговыйТерминал.БанковскийСчет.Владелец = &Организация
	|");
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		Запрос.УстановитьПараметр("РабочееМестоОборудования", РабочееМесто);
	Иначе
		Запрос.УстановитьПараметр("РабочееМестоОборудования", Справочники.РабочиеМеста.ПустаяСсылка());
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЭквайринговыйТерминал = Новый Структура;
		ЭквайринговыйТерминал.Вставить("Ссылка",                                 Выборка.Ссылка);
		ЭквайринговыйТерминал.Вставить("ПодключаемоеОборудование",               Выборка.ПодключаемоеОборудование);
		ЭквайринговыйТерминал.Вставить("ИспользоватьБезПодключенияОборудования", Выборка.ИспользоватьБезПодключенияОборудования);
		
		ЭквайринговыеТерминалы.Добавить(ЭквайринговыйТерминал);
		
	КонецЦикла;
	
	//Если ИспользоватьПодключаемоеОборудование Тогда
	//	Дисплеи.ЗагрузитьЗначения(МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования("ДисплейПокупателя"));
	//КонецЕсли;
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	
	//ТранспортныйМодуль = ИнтеграцияЕГАИСВызовСервера.ТранспортныйМодуль(
	//	Объект.Организация,
	//	Объект.Склад);
	
КонецПроцедуры

&НаСервере 
Процедура ОшибкаПриПечатиОбрабоатьДокумент(мСсылка)
	ДокОбъект = мСсылка.ПолучитьОбъект();
	ЗаписатьДокумент = Ложь;
	Если ДокОбъект.Статус = Перечисления.СтатусыЧековККМ.Пробит Тогда
		ДокОбъект.Статус = Перечисления.СтатусыЧековККМ.Отложен;
		ЗаписатьДокумент = Истина;
	КонецЕсли;
	
	Если ДокОбъект.Проведен = Истина Тогда
		ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	ИначеЕсли ЗаписатьДокумент Тогда
		//повтор 1
		ДокОбъект.Записать();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПроставитьСтатусДокумента(мСсылка,ОплатаНаличными, НомерЧекаККМ)
	
	//!!!!отладка пустого номера чека ккм
	Попытка
		ТестНомерЧекаККМ = Число(НомерЧекаККМ);
		Если ТестНомерЧекаККМ <= 0 Тогда
			ВызватьИсключение "Некорректный номер чека";
		КонецЕсли;
	Исключение
		АЭС_Сервер.СообщениеАдминистратору("НомерЧекаККМ - ошибка: <" + Строка(НомерЧекаККМ) + ">" + "<" + Строка(ТипЗнч(НомерЧекаККМ)) + ">" + Символы.ПС + ПолучитьНавигационнуюСсылку(мСсылка));
	КонецПопытки;
	
	ДокОбъект = мСсылка.ПолучитьОбъект();
	ДокОбъект.Статус = Перечисления.СтатусыЧековККМ.Пробит;
	Если ТипЗнч(мСсылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ДокОбъект.ФормаОплаты = ОплатаНаличными;
	КонецЕсли;
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	РозничныеПродажи.ОчиститьДанныеФискальнойОперации(ДанныеФискальнойОперации);
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусПробит(Док_Платеж, Результат)
	ДокОбъект = Док_Платеж.ПолучитьОбъект();
	Если Результат Тогда
		ДокОбъект.Статус = Перечисления.СтатусыЧековККМ.Пробит;
	Иначе
		ДокОбъект.Статус = "";
	КонецЕсли;	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);	
КонецПроцедуры	

&НаКлиенте
Процедура  ПроверитьДокументПродажи(ДокПродажи)	
	Результат = Истина;
	Ошибка = Ложь;
	
	ПараметрыЧека = ДопПараметры.Получить(ДокПродажи);
	Док_Платеж = ПараметрыЧека.мПродажи;
	
	Если Док_Платеж = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СТЧ из ДопПараметры Цикл
		ПараметрыЧека = СТЧ.Значение;
		Если ПараметрыЧека.мПродажи = Док_Платеж Тогда
			Если ПараметрыЧека.ЧекПробит = 0 Тогда     //чек не пробит
				Результат = Ложь;
				Прервать;
			КонецЕсли;
			Если ПараметрыЧека.ЧекПробит = 2 Тогда     //ошибка при пробитии чека
				Результат = Ложь;
				Ошибка = Истина;
				Прервать;
			КонецЕсли;		
		КонецЕсли;			
	КонецЦикла;	
	
	//Для Каждого СТЧ Из мПродажи[1] Цикл
	//	//Если ТипЗнч(СТЧ.Продажи) = Тип("ДокументСсылка.ЧекККМ") Тогда
	//		Если Документы.ЧекККМ.СтатусДокумента(СТЧ.Продажи) = Перечисления.СтатусыЧековККМ.Пробит Тогда
	//			Результат = Истина;
	//		Иначе
	//			Результат = Ложь;
	//			Прервать;
	//		КонецЕсли;
	//	//ИначеЕсли  ТипЗнч(СТЧ.Продажи) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
	//	//	Если Документы.ПриходныйКассовыйОрдер.СтатусДокумента(СТЧ.Продажи) = Перечисления.СтатусыЧековККМ.Пробит Тогда
	//	//		Результат = Истина;
	//	//	Иначе
	//	//		Результат = Ложь;
	//	//		Прервать;
	//	//	КонецЕсли;
	//	//Иначе
	//	//	Сообщить("Что то пошло не так");
	//	//КонецЕсли;
	//КонецЦикла;
	Если Результат Тогда
		УстановитьСтатусПробит(Док_Платеж,Истина);		
	Иначе
		Если Ошибка Тогда
			Сообщить("Документ "+Док_Платеж+" распечатан не полностью");
			УстановитьСтатусПробит(Док_Платеж,Ложь);		
		КонецЕсли;	
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура EmailПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Email) Тогда	
		Объект.ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail");	
		Объект.КонтактныеДанныеЭлектронногоЧека = Email;
	ИначеЕсли ЗначениеЗаполнено(Телефон) Тогда
		Объект.ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS");	
		Объект.КонтактныеДанныеЭлектронногоЧека = Телефон;			
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПриИзменении(Элемент)
	Объект.ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS");	
	Объект.КонтактныеДанныеЭлектронногоЧека = Телефон;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизитаНаСервере(ИмяОбъекта, ИмяРеквизита)
  Возврат ИмяОбъекта[ИмяРеквизита];
КонецФункции

&НаКлиенте
Процедура ДобавитьОплатуКартой(ИзмененныеДанныеЗаписаны, ПараметрыЗавершения) Экспорт
	
	//Если Не ИзмененныеДанныеЗаписаны Тогда
	//	Возврат;
	//КонецЕсли;
	
	//Если ПараметрыЗавершения <> Неопределено Тогда
	//	Объект.ПолученоНаличными = 0;
	//КонецЕсли;
	
	//ВывестиКОплатеНаДисплейПокупателя = Истина;
	//ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
	
	//ИнформацияОбОплате = ИнформацияОбОплате(ЭтотОбъект);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения("ПечатьЭквайрингаЗавершение", ЭтотОбъект, ПараметрыЗавершения));
	ДополнительныеПараметры.Вставить("Форма",                  ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ЭквайринговыеТерминалы", ЭквайринговыеТерминалы);
	ДополнительныеПараметры.Вставить("ПараметрыКассыККМ",      ПараметрыКассыККМ);
	ДополнительныеПараметры.Вставить("ФормаАвторизации_Сумма",       ПараметрыЗавершения.СуммаБезналичнойОплаты);
	ДополнительныеПараметры.Вставить("ФормаАвторизации_ПределСуммы", ПараметрыЗавершения.СуммаБезналичнойОплаты);
	ДополнительныеПараметры.Вставить("Валюта",                       СтруктураСостояниеКассовойСмены.Валюта);
	ДополнительныеПараметры.Вставить("СтруктураЭквайринговыйТерминал");
	ДополнительныеПараметры.Вставить("ИдентификаторУстройстваЭТ");
	
	Если ЭквайринговыеТерминалы.Количество() = 1 тогда
		ДобавитьОплатуКартойЗавершение(ДополнительныеПараметры.ЭквайринговыеТерминалы[0].Значение, ДополнительныеПараметры); 
	ИначеЕсли ЭквайринговыеТерминалы.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокВыбора", Новый СписокЗначений);
		
		Для каждого Терминал Из ЭквайринговыеТерминалы Цикл
			ПараметрыФормы.СписокВыбора.Добавить(Терминал.Значение, Терминал.Значение.Ссылка);
		КонецЦикла;
		
		ОткрытьФорму(
			"Документ.ЧекККМ.Форма.ВыборЭквайринговогоТерминала",
			ПараметрыФормы,,,,,
			Новый ОписаниеОповещения(
				"ДобавитьОплатуКартойЗавершение",
				ЭтотОбъект, ДополнительныеПараметры),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
	//А.М.А. Печать с откурытием окна для ввода суммы
	//РозничныеПродажиКлиент.ДобавитьОплатуКартой(Истина,ДополнительныеПараметры);
	//А.М.А
	
	//ВыполнитьДействиеПослеЗаписи(
	//	Новый ОписаниеОповещения("ДобавитьОплатуКартой", РозничныеПродажиКлиент, ДополнительныеПараметры),
	//	НСтр("ru = 'Перед оплатой платежной картой не удалось записать документ.'"));
	
	
	//Второй спосоп печати эквайрингового чека
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуКартойЗавершение(СтруктураЭквайринговыйТерминал ,ДополнительныеПараметры) Экспорт
	
	Если СтруктураЭквайринговыйТерминал <> Неопределено Тогда
		ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
	Иначе
		ИдентификаторУстройстваЭТ = Неопределено;
	КонецЕсли;
	
	ДополнительныеПараметры.ИдентификаторУстройстваЭТ      = ИдентификаторУстройстваЭТ;
	ДополнительныеПараметры.СтруктураЭквайринговыйТерминал = СтруктураЭквайринговыйТерминал;

	
	Результат = Новый Структура;
	Результат.Вставить("Сумма"         , ДополнительныеПараметры.ФормаАвторизации_Сумма);
	Результат.Вставить("ДанныеКарты"   , "");
	Результат.Вставить("СсылочныйНомер", "");
	Результат.Вставить("ТипКарты"      , "");
	Результат.Вставить("НомерКарты"    , "");
	Результат.Вставить("НомерЧека"     , "");
	
	Если ДополнительныеПараметры.СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда 
		РозничныеПродажиКлиент.ОплатаКартойПослеЗавершенияВыбораЭквайринговогоТерминала(СтруктураЭквайринговыйТерминал, ДополнительныеПараметры);
	Иначе
		РозничныеПродажиКлиент.ДобавитьОплатуКартойЗавершение(Результат,ДополнительныеПараметры);
	КонецЕсли;
	
		
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧеков()	
	ДопПараметры = Новый Соответствие;
		
	//ОплатаНаличными(неопределено);
	ИдентификаторУстройстваФР              = ПараметрыКассыККМ.ИдентификаторУстройства;	
	Если НЕ КассовыеСменыВызовСервера.ПоследняяСменаЗакрыта(ИдентификаторУстройстваФР) Тогда
		СпискоДокументов = ПолучитьСписокДокументовДляПечати();
		Если Не СпискоДокументов.Количество()=0 Тогда
			ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
			
			Результат = МенеджерОборудованияУТКлиент.ОборудованиеПодключено(ИдентификаторУстройстваФР);
			
			Если Результат Или ИспользоватьБезПодключенияОборудования Тогда
				Если Не ИспользоватьБезПодключенияОборудования Тогда
					Для каждого мПродажи из СпискоДокументов Цикл						
						Для Каждого СТЧ Из мПродажи[1] Цикл
							Если СТЧ.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") и ЭквайринговыеТерминалы.Количество()=0 Тогда 
								Сообщить("В документе :"+Строка(СТЧ.Продажи)+" выбрана форма оплаты: "+Строка(СТЧ.ФормаОплаты)+". Эвайринговый терминал не настроен",СтатусСообщения.ОченьВажное);
								Прервать;
							КонецЕсли;							
							
							ОписаниеОповещения = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект);
							Попытка
								ПроизвестиПеремещениеТоваровНаСкладах(мПродажи[0]);
							Исключение
								Сообщить(ОписаниеОшибки());
								Прервать;
							КонецПопытки;
							ДанныеОбъекта = ПолучитьТЧ(СТЧ.Продажи, СТЧ.ФормаОплаты, мПродажи[0]);     
							ПараметрыЧека = ПараметрыЧека(СТЧ.Продажи,	СТЧ.ФормаОплаты, СТЧ.Секция, мПродажи[0], СТЧ.АгентскийПлатеж, СТЧ.ИсполнительУслуг, ДанныеОбъекта, СТЧ.ПризнакСпособаРасчета);
							Отказ = ИнициализироватьДокументНаСервере(СТЧ.Продажи);   //устанавливаем статус чека пробит!!!
							Если Не  ПараметрыЧека.Количество()=0 и Не Отказ Тогда 
								ОшибкаПлатежа = Ложь;
								ДополнительныеПараметры = Новый Структура;
								ДополнительныеПараметры.Вставить("ТранспортныйМодуль",                     ТранспортныйМодуль);
								ДополнительныеПараметры.Вставить("ИдентификаторУстройстваФР",              ИдентификаторУстройстваФР);
								ДополнительныеПараметры.Вставить("ИспользоватьБезПодключенияОборудования", ИспользоватьБезПодключенияОборудования);
								ДополнительныеПараметры.Вставить("ОписаниеОповещения",                     ОписаниеОповещения);
								ДополнительныеПараметры.Вставить("ЕстьАлкогольнаяПродукция",               ПараметрыЧека.ЕстьАлкогольнаяПродукция);
								ДополнительныеПараметры.Вставить("ДокументПродажи",               		   СТЧ.Продажи);
								ДополнительныеПараметры.Вставить("ФормаОплаты",							   СТЧ.ФормаОплаты);
								ДополнительныеПараметры.Вставить("ПараметрыОперацииФискализацииЧека",      ПараметрыЧека.ПараметрыФискализацииЧека);
								ДополнительныеПараметры.Вставить("ДанныеОбъекта",						   ДанныеОбъекта);
								ДополнительныеПараметры.Вставить("мПродажи",                               мПродажи[0]);
								ДополнительныеПараметры.Вставить("ЧекПробит",                              0);
										
								ДопПараметры.Вставить(СТЧ.Продажи,ДополнительныеПараметры);								
								
								Если СТЧ.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") Тогда
									СуммаБезналичнойОплаты = ПараметрыЧека.ПараметрыФискализацииЧека.ТаблицаОплат[1].Сумма; 
									Если СуммаБезналичнойОплаты>0 Тогда 
										ВыбраннаяФормаОплаты = Новый Структура;
										ВыбраннаяФормаОплаты.Вставить("Наличные",              Ложь);
										ВыбраннаяФормаОплаты.Вставить("БонусныеБаллы",         Ложь);
										ВыбраннаяФормаОплаты.Вставить("ПлатежныеКарты",        Истина);
										ВыбраннаяФормаОплаты.Вставить("ПодарочныеСертификаты", Ложь);
										
										ДополнительныеПараметрыБезНал = Новый Структура;
										ДополнительныеПараметрыБезНал.Вставить("ВыбраннаяФормаОплаты", ВыбраннаяФормаОплаты);
										ДополнительныеПараметрыБезНал.Вставить("СуммаБезналичнойОплаты", СуммаБезналичнойОплаты);
										ДополнительныеПараметрыБезНал.Вставить("ДокументПродажи",        СТЧ.Продажи);
										ДобавитьОплатуКартой(ЭтотОбъект, ДополнительныеПараметрыБезНал);
										Если ДополнительныеПараметрыБезНал.Свойство("Результат") Тогда
											ОшибкаПлатежа = Истина;	
											ОшибкаПриПечатиОбрабоатьДокумент(СТЧ.Продажи);
										КонецЕсли;
									Иначе
										Сообщить("Что то пошло не так");
									КонецЕсли;
								Иначе								
									Если Не ОшибкаПлатежа Тогда
										ПробитьЧекНаФискальномРегистраторе(СТЧ.Продажи);
										//Оповещение            = Новый ОписаниеОповещения("ПробитьЧекВыполнитьЗавершение",    ЭтотОбъект, ДополнительныеПараметры);
										//ПослеОткрытияЧека     = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека",     ЭтотОбъект, ДополнительныеПараметры);
										//ПослеОшибкиПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, ДополнительныеПараметры);
										//
										// МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
										//Оповещение,
										//УникальныйИдентификатор,
										//ПараметрыЧека.ПараметрыФискализацииЧека,
										//ИдентификаторУстройстваФР,,
										//ПослеОткрытияЧека,
										//ПослеОшибкиПечатиЧека);
									Иначе
										Сообщить("Ошибка проведения платежа");
									КонецЕсли;
								КонецЕсли;
							Иначе
								Сообщить("Оперция не выполнена. Ошибка при печати чека", СтатусСообщения.ОченьВажное);
							КонецЕсли;																			
						КонецЦикла;
						//ПроверитьДокументПродажи(мПродажи);
						////ПроизвестиПеремещениеТоваровНаСкладах(мПродажи[0]);
						//ОбновитьТЧ();
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Сообщить("Кассовая смена не открыта или истекла.");		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекНаФискальномРегистраторе(мПродажи) Экспорт	
	ДополнительныеПараметры = ДопПараметры.Получить(мПродажи);
	
	Оповещение            = Новый ОписаниеОповещения("ПробитьЧекВыполнитьЗавершение",    ЭтотОбъект, ДополнительныеПараметры);
	ПослеОткрытияЧека     = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека",     ЭтотОбъект, ДополнительныеПараметры);
	ПослеОшибкиПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, ДополнительныеПараметры);
	
	МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
	Оповещение,
	УникальныйИдентификатор,
	ДополнительныеПараметры.ПараметрыОперацииФискализацииЧека,
	ДополнительныеПараметры.ИдентификаторУстройстваФР,,
	ПослеОткрытияЧека,
	ПослеОшибкиПечатиЧека);	
КонецПроцедуры									
	



&НаСервере
Процедура ПроверитьЕмайл(ТекКонтрагент) //МИС		
	//проверяем, если значение емайл изменилось, то его нужно отправить в СТЕК.		
	Если ТекКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо и НЕ ТекКонтрагент = Справочники.Контрагенты.РозничныйПокупатель И ЗначениеЗаполнено(Email) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		СтруктураОтбора.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
		МассивСтрок = ТекКонтрагент.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			ТекЕмайл = МассивСтрок[0].Представление;
		Иначе
			ТекЕмайл = "";
		КонецЕсли;	
		Если СокрЛП(ТекЕмайл) <> СокрЛП(Email) Тогда
			//записать данные в табл. часть Контактная информация
			ОбъектКонтрагент = ТекКонтрагент.ПолучитьОбъект();
			МассивСтрок = ОбъектКонтрагент.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
			Если МассивСтрок.Количество()>0 Тогда
				НовСтр = МассивСтрок[0];								
			Иначе				
				НовСтр = ОбъектКонтрагент.КонтактнаяИнформация.Добавить();
				НовСтр.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				НовСтр.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;						
			КонецЕсли;
			
			НовСтр.Представление = Email;
			НовСтр.Значение = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Email, Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);			
			НовСтр.АдресЭП =  Email;				
			
			ОбъектКИ = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(НовСтр.Значение, НовСтр.Тип);

			НовСтр.Представление = ОбъектКИ.Value;
			НовСтр.Значение      = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(ОбъектКИ);
			НовСтр.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзJSONВXML(ОбъектКИ, НовСтр.Тип);
			Поз = СтрНайти(НовСтр.АдресЭП, "@");
			Если Поз <> 0 Тогда
				НовСтр.ДоменноеИмяСервера = Сред(НовСтр.АдресЭП, Поз+1);
			КонецЕсли;
		
			ОбъектКонтрагент.Записать();			
			
			//передать данные в Стек    			
			АЭС_Стек.ПередатьЕмайлВСтек(Объект.ЛицевойСчет,Email);
		КонецЕсли;	
	КонецЕсли;	
	//) МИС
	

	
КонецПроцедуры	

&НаСервере
Функция ИнициализироватьДокументНаСервере(Документ) 
	ДокОбъект = Документ.ПолучитьОбъект();
	//повтор 3
	Попытка;
		//ДокОбъект.Статус = Перечисления.СтатусыЧековККМ.Пробит;
		//МИС статус буду устанавливать только после пробития чека
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Возврат Ложь;
	Исключение
		Возврат Истина;
	КонецПопытки;
КонецФункции

&Наклиенте
Процедура НапечататьЧек()
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭквайрингаЗавершение(Результат, ВыходныеДанные) Экспорт
	Если Не Результат = Неопределено Тогда
		ДокументПродажи = ВыходныеДанные.ДокументПродажи; 
		Результат.Удалить("ОповещениеОЗавершении");
		
		ПечатьЭквайрингаЗавершениеНаСервере(Результат, ДокументПродажи);
		ПробитьЧекНаФискальномРегистраторе(ДокументПродажи);
	Иначе
		ВыходныеДанные.Вставить("Результат",Результат);
		//зафиксируем, что чек не пробит
		ПараметрыЧека = ДопПараметры.Получить(ВыходныеДанные.ДокументПродажи);
		ПараметрыЧека.Вставить("ЧекПробит",2);  //ошибка пробития чека
		ДопПараметры.Вставить(ВыходныеДанные.ДокументПродажи,ПараметрыЧека);
		ПроверитьДокументПродажи(ВыходныеДанные.ДокументПродажи);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПечатьЭквайрингаЗавершениеНаСервере(Результат, ДокументПродажи)
	ДокОбъек = ДокументПродажи.ПолучитьОбъект();
	Если ДокОбъек.ОплатаПлатежнымиКартами.Количество()>0 Тогда
		ДокОбъек.ОплатаПлатежнымиКартами.Очистить();
	КонецЕсли;
	
	НоваяСтрока = ДокОбъек.ОплатаПлатежнымиКартами.Добавить();
	НоваяСтрока.ЭквайринговыйТерминал = Результат.ЭквайринговыйТерминал;
	НоваяСтрока.НомерПлатежнойКарты = Результат.НомерКарты;
	НоваяСтрока.СсылочныйНомер = Результат.СсылочныйНомер;
	НоваяСтрока.КодАвторизации = Результат.КодАвторизации;
	НоваяСтрока.НомерЧекаЭТ    = Результат.НомерЧека;
	НоваяСтрока.Сумма = Результат.СуммаОперации;
	ДокОбъек.Записать();
	//повтор 4                               ПоказатьВопрос
	//ДокОбъек.Записать(РежимЗаписиДокумента.Проведение);
	//ОписаниеОповешение = Новый ОписаниеОповещения("ЗаписатьНаСервере", ЭтотОбъект);
	РезультатОперации = ЗаписатьНаСервере(ДокОбъек);
	//КоличествоЦиклов = 0;
	Если Не РезультатОперации Тогда
		Таймаут(10);

		Если ДокОбъек.ОплатаПлатежнымиКартами.Количество()=0 Тогда
			НоваяСтрока = ДокОбъек.ОплатаПлатежнымиКартами.Добавить();
			НоваяСтрока.ЭквайринговыйТерминал = Результат.ЭквайринговыйТерминал;
			НоваяСтрока.НомерПлатежнойКарты = Результат.НомерКарты;
			НоваяСтрока.СсылочныйНомер = Результат.СсылочныйНомер;
			НоваяСтрока.КодАвторизации = Результат.КодАвторизации;
			НоваяСтрока.НомерЧекаЭТ    = Результат.НомерЧека;
			НоваяСтрока.Сумма = Результат.СуммаОперации;
		КонецЕсли;
		
		РезультатОперации = ЗаписатьНаСервере(ДокОбъек);
		//КоличествоЦиклов = КоличествоЦиклов+1;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Таймаут(ЧислоСекунд)
    НачВремя = ТекущаяДата();
    Пока 1 = 1 Цикл
        Если ТекущаяДата() - НачВремя > ЧислоСекунд Тогда
            Прервать;
        КонецЕсли;
    КонецЦикла; 
КонецПроцедуры

&НаСервере
Функция ЗаписатьНаСервере(ДокОбъек)
	Попытка
		ДокОбъек.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаСервере
Функция ОтложитьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи)
	
	ОтложитьВыполнено = Истина;
	
	СтарыйСтатус = Объект.Статус;
	Объект.Статус = Перечисления.СтатусыЧековККМ.Отложен;
	
	Попытка
		
		ОтложитьВыполнено = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		
		Если Не ОтложитьВыполнено Тогда
			Объект.Статус = СтарыйСтатус;
		КонецЕсли;
		
	Исключение
		
		Объект.Статус = СтарыйСтатус;
		ОтложитьВыполнено = Ложь;
		
	КонецПопытки;
	
	Возврат ОтложитьВыполнено;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииКассыККМ()

	Попытка
		Объект.Организация = Объект.КассаККМ.Владелец;
	Исключение
	
	КонецПопытки;
	Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	
	ПолучитьСсылкиНаОборудование();
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	
	СтруктураСостояниеКассовойСмены = СостояниеКассовойСменыНаСервереБезКонтекста(Объект.КассаККМ);
	Объект.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	ПриИзмененииКассыККМ();	
	ОбновитьНаличностьВКассеККМ();
	ОрганизацияПриИзменении(Элемент);
КонецПроцедуры

&НаСервере
Процедура ИзменениеПараметровПоиска()
	
	СписокПотребителей.ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка,
	|	Контрагенты.Наименование,
	|	Контрагенты.НомерЛС
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	(&ПараметрыЗаполнены
	|		И
	|		Контрагенты.НомерЛС <> """"
	|		И
	|		Контрагенты.Партнер = &Партнер
	|		И
	|		(Контрагенты.ЮрФизЛицо = &ЮрФизЛицо)
	|		И 
	|		(&ТекстНомерЛС)
	|		И 
	|		(&ТекстНаименованиеФИО)
	|		И
	|		(&ТекстАдресЛС ИЛИ &ТекстИНН)
	|	)
	|	ИЛИ
	|	(НЕ &ПараметрыЗаполнены И Контрагенты.Ссылка = ЗНАЧЕНИЕ(Справочник.Контрагенты.РозничныйПокупатель))";

	
	
	СписокПотребителей.Параметры.УстановитьЗначениеПараметра("Партнер", Объект.Партнер);//!!!!сначала поиск и замена дублей предопр. партнеров
	СписокПотребителей.Параметры.УстановитьЗначениеПараметра("ЮрФизЛицо", Объект.ЮрФизЛицо);
	
	ТекстНомерЛС = ?(ЗначениеЗаполнено(Объект.ЛицевойСчет), "Контрагенты.НомерЛС = &НомерЛС", "ИСТИНА");
	СписокПотребителей.ТекстЗапроса = СтрЗаменить(СписокПотребителей.ТекстЗапроса, "&ТекстНомерЛС", ТекстНомерЛС); 

	ТекстНаименованиеФИО = ?(ЗначениеЗаполнено(Объект.НаименованиеФИО), "Контрагенты.Наименование ПОДОБНО &НаименованиеФИО", "ИСТИНА");
	СписокПотребителей.ТекстЗапроса = СтрЗаменить(СписокПотребителей.ТекстЗапроса, "&ТекстНаименованиеФИО", ТекстНаименованиеФИО); 

	Если ЗначениеЗаполнено(Объект.ЛицевойСчет) Тогда
		СписокПотребителей.Параметры.УстановитьЗначениеПараметра("НомерЛС", Объект.ЛицевойСчет);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НаименованиеФИО) Тогда
		СписокПотребителей.Параметры.УстановитьЗначениеПараметра("НаименованиеФИО", "%" + Объект.НаименованиеФИО + "%");
	КонецЕсли;
	
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		
		ПараметрыЗаполнены = ЗначениеЗаполнено(Объект.ЛицевойСчет) Или ЗначениеЗаполнено(Объект.АдресЛС) Или ЗначениеЗаполнено(Объект.НаименованиеФИО);
		СписокПотребителей.Параметры.УстановитьЗначениеПараметра("ПараметрыЗаполнены", ПараметрыЗаполнены);
		
		ТекстАдресЛС = ?(ЗначениеЗаполнено(Объект.АдресЛС),		"Контрагенты.АдресЛС ПОДОБНО &АдресЛС", "ИСТИНА");
		ТекстИНН = "ЛОЖЬ";
		
		СписокПотребителей.ТекстЗапроса = СтрЗаменить(СписокПотребителей.ТекстЗапроса, "&ТекстАдресЛС", ТекстАдресЛС); 
		СписокПотребителей.ТекстЗапроса = СтрЗаменить(СписокПотребителей.ТекстЗапроса, "&ТекстИНН", ТекстИНН); 
		
		Если ЗначениеЗаполнено(Объект.АдресЛС) Тогда
			СписокПотребителей.Параметры.УстановитьЗначениеПараметра("АдресЛС", "%" + Объект.АдресЛС + "%");
		КонецЕсли;
		
		//ИначеЕсли ЗначениеЗаполнено(Объект.ЛицевойСчет) Тогда
		//	СписокПотребителей.Параметры.УстановитьЗначениеПараметра("НомерЛС", Объект.ЛицевойСчет);
		//ИначеЕсли ЗначениеЗаполнено(Объект.АдресЛС) Тогда
		//	СписокПотребителей.Параметры.УстановитьЗначениеПараметра("АдресЛС", "%" + Объект.АдресЛС + "%");
		//КонецЕсли;
		
	ИначеЕсли Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")Тогда
		
		ПараметрыЗаполнены = ЗначениеЗаполнено(Объект.ЛицевойСчет) или ЗначениеЗаполнено(Объект.ИНН) Или ЗначениеЗаполнено(Объект.НаименованиеФИО);
		СписокПотребителей.Параметры.УстановитьЗначениеПараметра("ПараметрыЗаполнены", ПараметрыЗаполнены);
		
		ТекстИНН = ?(ЗначениеЗаполнено(Объект.ИНН),		"Контрагенты.ИНН = &ИНН", "ИСТИНА");
		ТекстАдресЛС = "ЛОЖЬ";
		
		СписокПотребителей.ТекстЗапроса = СтрЗаменить(СписокПотребителей.ТекстЗапроса, "&ТекстИНН", ТекстИНН); 
		СписокПотребителей.ТекстЗапроса = СтрЗаменить(СписокПотребителей.ТекстЗапроса, "&ТекстАдресЛС", ТекстАдресЛС); 
		
		Если ЗначениеЗаполнено(Объект.ИНН) Тогда
			СписокПотребителей.Параметры.УстановитьЗначениеПараметра("ИНН", Объект.ИНН);
		КонецЕсли;
				
	Иначе
		// одинокий "РозничныйПокупатель"
		
		ПараметрыЗаполнены = Ложь;
		СписокПотребителей.Параметры.УстановитьЗначениеПараметра("ПараметрыЗаполнены", ПараметрыЗаполнены);
		
		ТекстНомерЛС = "ЛОЖЬ";
		ТекстАдресЛС = "ЛОЖЬ";
		ТекстИНН	 = "ЛОЖЬ";
		СписокПотребителей.ТекстЗапроса = СтрЗаменить(СписокПотребителей.ТекстЗапроса, "&ТекстНомерЛС", ТекстНомерЛС); 
		СписокПотребителей.ТекстЗапроса = СтрЗаменить(СписокПотребителей.ТекстЗапроса, "&ТекстАдресЛС", ТекстАдресЛС); 
		СписокПотребителей.ТекстЗапроса = СтрЗаменить(СписокПотребителей.ТекстЗапроса, "&ТекстИНН",	   ТекстИНН); 
		
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ОбъектАдресЛСПриИзменении(Элемент)
	
	ИзменениеПараметровПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура НераспечатанныеЧекиПриИзменении(Элемент)
	СуммыПоПлатежам = РасчетСуммыПоНераспечатаннымЧекам();
	Наличными = СуммыПоПлатежам.Наличными;
	Безналичными = СуммыПоПлатежам.БезналичнаяОплата;
	СуммаПоНераспечатаннымЧЕкам = СуммыПоПлатежам.Итого;
КонецПроцедуры

&НаСервере
Функция РасчетСуммыПоНераспечатаннымЧекам()
	Схема = Элементы.НераспечатанныеЧеки.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.НераспечатанныеЧеки.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КМ = Новый  КомпоновщикМакетаКомпоновкиДанных;
	Макет = КМ.Выполнить(Схема,Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПК = Новый ПроцессорКомпоновкиДанных;
	ПК.Инициализировать(Макет);
	
	ТЗ = Новый ТаблицаЗначений;
	
	ПВ = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПВ.УстановитьОбъект(ТЗ);
	ПВ.Вывести(ПК);
	
	Результат = Новый Структура;
	Результат.Вставить("Наличными", ТЗ.Итог("СуммаНаличная" ));
	Результат.Вставить("БезналичнаяОплата", ТЗ.Итог("СуммаБезналичная" ));
	Результат.Вставить("Итого", ТЗ.Итог("СуммаДокумента" ));
	Объект.Сумма =  ТЗ.Итог("СуммаДокумента"); 
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ИтогоПриИзменении(Элемент)
	Сдача = ?(СуммаПоНераспечатаннымЧЕкам-Объект.Сумма>0, СуммаПоНераспечатаннымЧЕкам-Объект.Сумма, 0);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеКассовойСмены(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		Возврат;
	КонецЕсли;
	СтруктураСостояниеКассовойСмены = СостояниеКассовойСменыНаСервереБезКонтекста(Объект.КассаККМ);
	ОбновитьНаличностьВКассеККМ();
КонецПроцедуры

&НаСервере
Функция ВозвратПродажиНаСервере(Док)
	ДокОбъект = Документы.ЧекККМВозврат.СоздатьДокумент();
	ЗаполнитьЧекуККМВозврат(Док, ДокОбъект);
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.Записать();
	Если Не Док.Платеж.Товары.Найти(Док)= Неопределено Тогда 
		мСтрока = Док.Платеж.Товары.Найти(Док);
		НомерСекции = мСтрока.Секция;
		ИсполнительУслуг = Док.Платеж.Партнер;
		ПризнакСпособаРасчета = мСтрока.ПризнакСпособаРасчета;
	ИначеЕсли НЕ Док.Платеж.ОсновнаяДеятельность.Найти(Док) = Неопределено Тогда
		мСтрока = Док.Платеж.ОсновнаяДеятельность.Найти(Док);
		НомерСекции = мСтрока.Секция;
		ИсполнительУслуг = мСтрока.ИсполнительУслуг;
		ПризнакСпособаРасчета = мСтрока.ПризнакСпособаРасчета;
	ИначеЕсли НЕ Док.Платеж.СторонниеУслуги.Найти(Док) = Неопределено Тогда
		мСтрока = Док.Платеж.СторонниеУслуги.Найти(Док);
		НомерСекции = мСтрока.Секция;
		ИсполнительУслуг = Док.Платеж.Партнер;
		ПризнакСпособаРасчета = мСтрока.ПризнакСпособаРасчета;
	Иначе
		НомерСекции = 0;
		ИсполнительУслуг = Справочники.Партнеры.ПустаяСсылка();
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПустаяСсылка();
		Сообщить("Что то пошло не так");
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Документ", ДокОбъект.Ссылка);
	ПараметрыВыполнения.Вставить("ФормаОплаты", ДокОбъект.ЧекККМ.ФормаОплаты);
	ПараметрыВыполнения.Вставить("Секция", НомерСекции);
	ПараметрыВыполнения.Вставить("АгентскийПлатеж", ДокОбъект.АгентскийПлатеж); 
	ПараметрыВыполнения.Вставить("ИсполнительУслуг", ИсполнительУслуг);
	ПараметрыВыполнения.Вставить("ПризнакСпособаРасчета", ПризнакСпособаРасчета);
	Возврат ПараметрыВыполнения;

КонецФункции

&НаКлиенте
Процедура ВозвратПродажи(Команда, мДок = неопределено)
	Док = Элементы.ПлатежиЗаСмену.ТекущиеДанные.Ссылка;
	мФормаОплаты = ПолучитьЗначениеРеквизитаНаСервере(Док, "ФормаОплаты");
	Если мФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") и мДок = неопределено Тогда 
		Сообщить("Выберите Возврат (без. нал.)");
	Иначе
		Если Не мФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") Тогда
			Результат = ВозвратПродажиНаСервере(Док);
		Иначе
			Результат = мДок;
		КонецЕсли;
		ПлатежОснование = ПолучитьЗначениеРеквизитаНаСервере(Док, "Платеж");
		ДанныеОбъекта = ПолучитьТЧ(Результат.Документ, Результат.ФормаОплаты, ПлатежОснование);     
		ПараметрыЧека = ПараметрыЧека(Результат.Документ,	Результат.ФормаОплаты, Результат.Секция, ПлатежОснование, Результат.АгентскийПлатеж, Результат.ИсполнительУслуг, ДанныеОбъекта, Результат.ПризнакСпособаРасчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект);
		ИдентификаторУстройстваФР              = ПараметрыКассыККМ.ИдентификаторУстройства;
		ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
			
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТранспортныйМодуль",                     ТранспортныйМодуль);
		ДополнительныеПараметры.Вставить("ИдентификаторУстройстваФР",              ИдентификаторУстройстваФР);
		ДополнительныеПараметры.Вставить("ИспользоватьБезПодключенияОборудования", ИспользоватьБезПодключенияОборудования);
		ДополнительныеПараметры.Вставить("ОписаниеОповещения",                     ОписаниеОповещения);
		ДополнительныеПараметры.Вставить("ЕстьАлкогольнаяПродукция",               ПараметрыЧека.ЕстьАлкогольнаяПродукция);
		ДополнительныеПараметры.Вставить("ДокументПродажи",               		   Результат.Документ);
		ДополнительныеПараметры.Вставить("ФормаОплаты",               			   Неопределено);
		ДополнительныеПараметры.Вставить("ПараметрыОперацииФискализацииЧека",      ПараметрыЧека.ПараметрыФискализацииЧека);
		ДополнительныеПараметры.Вставить("ДанныеОбъекта",							ДанныеОбъекта);	
		ДополнительныеПараметры.Вставить("мПродажи",                               Неопределено);
		ДополнительныеПараметры.Вставить("ЧекПробит",                              0);
		
		ДопПараметры = Новый Соответствие;
		ДопПараметры.Вставить(Результат.Документ,ДополнительныеПараметры);
		
		
		Оповещение            = Новый ОписаниеОповещения("ПробитьЧекВыполнитьЗавершение",    ЭтотОбъект, ДополнительныеПараметры);
		ПослеОткрытияЧека     = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека",     ЭтотОбъект, ДополнительныеПараметры);
		ПослеОшибкиПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, ДополнительныеПараметры);
		
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
		Оповещение,
		УникальныйИдентификатор,
		ПараметрыЧека.ПараметрыФискализацииЧека,
		ИдентификаторУстройстваФР,,
		ПослеОткрытияЧека,
		ПослеОшибкиПечатиЧека);
		
		ПроизвестиПеремещениеТоваровНаСкладах(Док);
		ОбновитьТЧ();
		ОбновитьНаличностьВКассеККМ();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЧекуККМВозврат( ДокументОснование, ДокументЗаполнения)
	
	// Заполним данные шапки документа.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЧекККМ.Валюта КАК Валюта,
	|	ЧекККМ.Ссылка КАК ЧекККМ,
	|	ЧекККМ.ВидЦены КАК ВидЦены,
	|	ЧекККМ.Организация КАК Организация,
	|	ЧекККМ.КассаККМ КАК КассаККМ,
	|	ЧекККМ.КассоваяСмена КАК КассоваяСмена,
	|	ЧекККМ.Склад КАК Склад,
	|	ЧекККМ.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЧекККМ.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ЧекККМ.Статус КАК Статус,
	|	ЧекККМ.Проведен КАК Проведен,
	|	ЧекККМ.Партнер КАК Партнер,
	|	ЧекККМ.КартаЛояльности КАК КартаЛояльности,
	|	ЧекККМ.АгентскийПлатеж КАК АгентскийПлатеж
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НоменклатураЕГАИС КАК НоменклатураЕГАИС,
	|	Товары.НоменклатураНабора КАК НоменклатураНабора,
	|	Товары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Количество КАК Количество,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки + Товары.СуммаБонусныхБалловКСписаниюВВалюте = 0
	|					ИЛИ Товары.КоличествоУпаковок = 0
	|				ТОГДА Товары.Цена
	|			ИНАЧЕ Товары.Сумма / Товары.КоличествоУпаковок
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.Помещение КАК Помещение,
	|	Товары.Продавец КАК Продавец
	|ПОМЕСТИТЬ врТовары
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НоменклатураЕГАИС,
	|	Товары.НоменклатураНабора,
	|	Товары.ХарактеристикаНабора,
	|	Товары.Номенклатура,
	|	Товары.Номенклатура.ТипНоменклатуры,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.СтатусУказанияСерий,
	|	Товары.Упаковка,
	|	-Товары.КоличествоУпаковок,
	|	-Товары.Количество,
	|	Товары.Цена,
	|	-Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	-Товары.СуммаНДС,
	|	Товары.Помещение,
	|	Товары.Продавец
	|ИЗ
	|	Документ.ЧекККМВозврат.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка.ЧекККМ = &Ссылка
	|	И Товары.Ссылка.Проведен
	|	И Товары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НоменклатураЕГАИС КАК НоменклатураЕГАИС,
	|	Товары.НоменклатураНабора КАК НоменклатураНабора,
	|	Товары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.Цена КАК Цена,
	|	Товары.Помещение КАК Помещение,
	|	Товары.Продавец КАК Продавец,
	|	СУММА(Товары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(Товары.Количество) КАК Количество,
	|	СУММА(Товары.Сумма) КАК Сумма,
	|	СУММА(Товары.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	врТовары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.НоменклатураЕГАИС,
	|	Товары.НоменклатураНабора,
	|	Товары.ХарактеристикаНабора,
	|	Товары.Номенклатура,
	|	Товары.Номенклатура.ТипНоменклатуры,
	|	Товары.Характеристика,
	|	Товары.СтатусУказанияСерий,
	|	Товары.Серия,
	|	Товары.Помещение,
	|	Товары.Продавец,
	|	Товары.Упаковка,
	|	Товары.СтавкаНДС,
	|	Товары.Цена
	|
	|ИМЕЮЩИЕ
	|	СУММА(Товары.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Серия КАК Серия,
	|	Серии.Помещение КАК Помещение,
	|	Серии.Количество КАК Количество
	|ПОМЕСТИТЬ врСерии
	|ИЗ
	|	Документ.ЧекККМ.Серии КАК Серии
	|ГДЕ
	|	Серии.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Серия,
	|	Серии.Помещение,
	|	-Серии.Количество
	|ИЗ
	|	Документ.ЧекККМВозврат.Серии КАК Серии
	|ГДЕ
	|	Серии.Ссылка.ЧекККМ = &Ссылка
	|	И Серии.Ссылка.Проведен
	|	И Серии.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Серия КАК Серия,
	|	Серии.Помещение КАК Помещение,
	|	СУММА(Серии.Количество) КАК Количество
	|ИЗ
	|	врСерии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Серия,
	|	Серии.Помещение
	|
	|ИМЕЮЩИЕ
	|	СУММА(Серии.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ОплатаПлатежнымиКартами.КодАвторизации КАК КодАвторизации,
	|	ОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	ОплатаПлатежнымиКартами.Сумма КАК Сумма,
	|	ОплатаПлатежнымиКартами.СсылочныйНомер КАК СсылочныйНомер,
	|	ОплатаПлатежнымиКартами.НомерЧекаЭТ КАК НомерЧекаЭТ,
	|	ИСТИНА КАК ОплатаОтменена
	|ИЗ
	|	Документ.ЧекККМ.ОплатаПлатежнымиКартами КАК ОплатаПлатежнымиКартами
	|ГДЕ
	|	ОплатаПлатежнымиКартами.Ссылка = &Ссылка
	|	И НЕ (ОплатаПлатежнымиКартами.ЭквайринговыйТерминал, ОплатаПлатежнымиКартами.КодАвторизации, ОплатаПлатежнымиКартами.НомерПлатежнойКарты, ОплатаПлатежнымиКартами.Сумма) В
	|				(ВЫБРАТЬ
	|					Т.ЭквайринговыйТерминал,
	|					Т.КодАвторизации,
	|					Т.НомерПлатежнойКарты,
	|					Т.Сумма
	|				ИЗ
	|					Документ.ЧекККМВозврат.ОплатаПлатежнымиКартами КАК Т
	|				ГДЕ
	|					Т.Ссылка.ЧекККМ = &Ссылка)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДокументЗаполнения, Выборка, ,"Статус, Проведен");
	
	Если РезультатЗапроса[2].Пустой() Тогда
		ТекстОшибки = НСтр("ru='По данному чеку ККМ все товары уже возвращены.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Не Выборка.Проведен Тогда
		ТекстОшибки = НСтр("ru='Чек ККМ не проведен. Ввод на основании невозможен.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Выборка.Статус <> Перечисления.СтатусыЧековККМ.Пробит Тогда
		ТекстОшибки = НСтр("ru='Чек ККМ не пробит. Ввод на основании невозможен.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ДокументЗаполнения.Товары.Загрузить(РезультатЗапроса[2].Выгрузить());
	ДокументЗаполнения.Серии.Загрузить(РезультатЗапроса[4].Выгрузить());
	ДокументЗаполнения.ОплатаПлатежнымиКартами.Загрузить(РезультатЗапроса[5].Выгрузить());
	
	ДокументЗаполнения.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументЗаполнения.Товары, ДокументЗаполнения.ЦенаВключаетНДС);
	Если ДокументЗаполнения.ОплатаПлатежнымиКартами.Количество()=0 Тогда
		 ДокументЗаполнения.ВыданоНаличными = ДокументЗаполнения.СуммаДокумента;
	КонецЕсли;
	ДокументЗаполнения.ЧекККМ = ДокументОснование; 
	
КонецПроцедуры

&НаСервере
Функция СформироватьСписокПартнеров(Партнеры)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Партнер,
	               |	ВЫБОР
	               |		КОГДА ДоговорыКонтрагентов.Партнер В (&Партнеры)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ОсновнойПартнер
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Организация = &Организация
	               |	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	               |	И ДоговорыКонтрагентов.ДатаНачалаДействия <= &ДатаНачалаДействия
	               |	И ДоговорыКонтрагентов.ДатаОкончанияДействия >= &ДатаОкончанияДействия";

				   
				   
	Запрос.УстановитьПараметр("Организация", Объект.Организация );
	Запрос.УстановитьПараметр("Контрагент", Справочники.Контрагенты.РозничныйПокупатель);
	Запрос.УстановитьПараметр("ДатаНачалаДействия", ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаОкончанияДействия", ТекущаяДата());
	Запрос.УстановитьПараметр("Партнеры", Партнеры);

	Результат = Запрос.Выполнить().Выгрузить();
	Отбор = Новый Структура;
	Отбор.Вставить("ОсновнойПартнер", Истина);
	НайденныеСтроки  = Результат.НайтиСтроки(Отбор); 
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Сообщить("Не определен список доступных партнеров");
	Иначе
		Объект.Партнер = НайденныеСтроки[0].Партнер;
	КонецЕсли;	
	
	РезМассив = Результат.ВыгрузитьКолонку("Партнер");
	
	Если ПараметрыСеанса.ТекущийПользователь.ФОП = Справочники.Партнеры.АтомЭнергоСбытЦА
		Или СтрНайти(Константы.ЗаголовокСистемы.Получить(), "ТЕСТ") > 0 Тогда
		// для пользователям ЦА или в тестовой базе - все партнеры-ФОП доступны.
		РезМассив.Добавить(Справочники.Партнеры.КолАтомЭнергоСбыт);
		РезМассив.Добавить(Справочники.Партнеры.КурскАтомЭнергоСбыт);
		РезМассив.Добавить(Справочники.Партнеры.СмоленскАтомЭнергоСбыт);
		РезМассив.Добавить(Справочники.Партнеры.ТверьАтомЭнергоСбыт);
		РезМассив.Добавить(Справочники.Партнеры.АтомЭнергоСбытЦА);
	КонецЕсли;
	
	Возврат РезМассив;
	
КонецФункции

&НаСервере
Функция ПолучитьПартнераПоУмолчанию()
	Возврат Пользователи.ТекущийПользователь().ФОП;
КонецФункции


&НаКлиенте
Процедура СоздатьЛицевойСчет(Команда)
		
	Если ЗначениеЗаполнено(Объект.ЛицевойСчет) Или ЗначениеЗаполнено(Объект.ИНН) Тогда
		
		СтруктураПараметров = Новый Структура;

		СтруктураПараметров.Вставить("ПараметрПартнер",			Объект.Партнер);
		СтруктураПараметров.Вставить("ПараметрНаименование",	Объект.НаименованиеФИО);
		СтруктураПараметров.Вставить("ПараметрНомерЛС",			Объект.ЛицевойСчет);
		СтруктураПараметров.Вставить("ПараметрЮрФизЛицо",		Объект.ЮрФизЛицо);
		СтруктураПараметров.Вставить("ПараметрИНН",				Объект.ИНН);
		//СтруктураПараметров.Вставить("Наименование", 			"<Неизвестно>");
		
		ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаЭлементаЛС", СтруктураПараметров);
		
	Иначе
		Сообщить("Заполните поле лицевой счет или ИНН");
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПроизвестиПеремещениеТоваровНаСкладах(Док)
	ЭтоВозврат = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АЭС_ПлатежиТовары.Ссылка.Ссылка КАК ДокументОснование,
	               |	АЭС_ПлатежиТовары.Ссылка.Склад КАК Склад,
	               |	АЭС_ПлатежиТовары.Номенклатура,
	               |	АЭС_ПлатежиТовары.Количество,
	               |	ВложенныйЗапрос.Значение КАК СкладОХ,
	               |	АЭС_ПлатежиТовары.КоличествоУпаковок
	               |ИЗ
	               |	Документ.АЭС_Платежи.Товары КАК АЭС_ПлатежиТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			СкладыДополнительныеРеквизиты.Значение КАК Значение,
	               |			СкладыДополнительныеРеквизиты.Ссылка.Ссылка КАК Ссылка
	               |		ИЗ
	               |			Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
	               |		ГДЕ
	               |			СкладыДополнительныеРеквизиты.Значение ССЫЛКА Справочник.Склады
	               |			И СкладыДополнительныеРеквизиты.Свойство.Заголовок = ""Склад ОХ"") КАК ВложенныйЗапрос
	               |		ПО АЭС_ПлатежиТовары.Ссылка.Склад = ВложенныйЗапрос.Ссылка
	               |ГДЕ
	               |	АЭС_ПлатежиТовары.ВидОплаты = ЗНАЧЕНИЕ(Справочник.АЭС_ВидОплаты.ПродажаТовараПоДоговоруКонсигнации)
				   |	И #Условие#
	               |ИТОГИ ПО
	               |	Склад,
	               |	СкладОХ";
	
	Если ТипЗнч(Док) = Тип("ДокументСсылка.АЭС_Платежи") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"#Условие#","АЭС_ПлатежиТовары.Ссылка.Ссылка = &Ссылка");
		ЭтоВозврат = Ложь;
	ИначеЕсли ТипЗнч(Док) = Тип("ДокументСсылка.ЧекККМ") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"#Условие#","АЭС_ПлатежиТовары.ДокументПродажи = &Ссылка");
		ЭтоВозврат = Истина;
	КонецЕсли;	
	Запрос.УстановитьПараметр("Ссылка", Док);
	
	
	Результат = Запрос.Выполнить();
	ВыборкаСклад = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаСклад.Следующий() Тогда
		РезультатПроверки = ПроверитьПеремешениеТоваров(Док);
		НачатьТранзакцию();
		Если РезультатПроверки.Свойство("ДокОбъект") Тогда
			ДокОбъект = РезультатПроверки.ДокОбъект;
		Иначе
			ДокОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
		КонецЕсли;
		ДокОбъект.Дата = ТекущаяДата();
		ДокОбъект.ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
		ДокОбъект.ДокументПродажи = Док;
		ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		ДокОбъект.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
		ВыборкаСкладОХ = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаСкладОХ.Следующий();
		Если ЭтоВозврат Тогда 
			ДокОбъект.СкладОтправитель = ВыборкаСклад.Склад; 
			ДокОбъект.СкладПолучатель = ВыборкаСкладОХ.СкладОХ;
		Иначе
			ДокОбъект.СкладПолучатель = ВыборкаСклад.Склад; 
			ДокОбъект.СкладОтправитель = ВыборкаСкладОХ.СкладОХ;
		КонецЕсли;
		Выборка = ВыборкаСкладОХ.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ДокОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		КонецЦикла;
		ДокОбъект.Организация = Док.Организация;
		ДокОбъект.Ответственный = Док.Кассир;
		ДокОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		Если ЭтоВозврат Тогда 
			Если РезультатПроверки.Свойство("ДокПрихода") Тогда
				ДокПрихода = РезультатПроверки.ДокПрихода;
			Иначе
				ДокПрихода = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
			КонецЕсли;
			ДокПрихода.Дата = ТекущаяДата();
			ДокПрихода.ДокументПродажи = Док;
			ДокПрихода.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
			ДокПрихода.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
			ДокПрихода.Отправитель = ДокОбъект.СкладОтправитель;
			ДокПрихода.Склад = ДокОбъект.СкладПолучатель;
			ДокПрихода.Распоряжение = ДокОбъект.Ссылка; 
			Для Каждого СТЧ Из ДокОбъект.Товары Цикл
				НоваяСтрока = ДокПрихода.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СТЧ);
			КонецЦикла;
			ДокПрихода.Ответственный = Док.Кассир;
			ДокПрихода.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПоПеремещению;
			ДокПрихода.Записать(РежимЗаписиДокумента.Проведение);
			//ДокПрихода.Записать(РежимЗаписиДокумента.Запись);
			
		Иначе
			Если РезультатПроверки.Свойство("ДокРасхаод") Тогда
				ДокРасхаод = РезультатПроверки.ДокРасхаод;
			Иначе
				ДокРасхаод = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
			КонецЕсли;
			ДокРасхаод.Дата = ТекущаяДата();
			ДокРасхаод.ДокументПродажи = Док;
			ДокРасхаод.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
			ДокРасхаод.Получатель = ДокОбъект.СкладПолучатель; 
			ДокРасхаод.Склад = ДокОбъект.СкладОтправитель;
		
			Для каждого СТЧ из ДокОбъект.Товары Цикл
				ТоварыПоРаспоряжению = ДокРасхаод.ТоварыПоРаспоряжениям.Добавить();
				ОтгружаемыеТовары = ДокРасхаод.ОтгружаемыеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(ТоварыПоРаспоряжению,СТЧ);
				ЗаполнитьЗначенияСвойств(ОтгружаемыеТовары,СТЧ);
				ТоварыПоРаспоряжению.Распоряжение = ДокОбъект.Ссылка;
				ОтгружаемыеТовары.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
			КонецЦикла;
			ДокРасхаод.Ответственный =  Док.Кассир;
			ДокРасхаод.ДатаОтгрузки = ТекущаяДата();
			ДокРасхаод.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению;
			ДокРасхаод.Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(ДокРасхаод.Приоритет);
			ДокРасхаод.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьПеремешениеТоваров(ДокументПродажи)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДокументыПродажи.ДокОбъект
	               |ПОМЕСТИТЬ ВТ_Таб
	               |ИЗ
	               |	&ДокументПлатежи КАК ДокументыПродажи
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПеремещениеТоваров.Ссылка КАК ДокОбъект,
	               |	ПриходныйОрдерНаТовары.Ссылка КАК ДокПрихода,
	               |	РасходныйОрдерНаТовары.Ссылка КАК ДокРасхаод
	               |ИЗ
	               |	ВТ_Таб КАК ВТ_Таб
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	               |		ПО ВТ_Таб.ДокОбъект = ПеремещениеТоваров.ДокументПродажи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	               |		ПО ВТ_Таб.ДокОбъект = ПриходныйОрдерНаТовары.ДокументПродажи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	               |		ПО ВТ_Таб.ДокОбъект = РасходныйОрдерНаТовары.ДокументПродажи
	               |ГДЕ
	               |	ПеремещениеТоваров.Проведен = ИСТИНА
	               |	ИЛИ ПриходныйОрдерНаТовары.Проведен = ИСТИНА
	               |	ИЛИ РасходныйОрдерНаТовары.Проведен = ИСТИНА";
	
	мМассив = Новый Массив;
	мМассив.Добавить(Тип("ДокументСсылка.АЭС_Платежи"));
	мМассив.Добавить(Тип("ДокументСсылка.ЧекККМ"));
	мТип = Новый ОписаниеТипов(мМассив);
	ТаблиДокументов = Новый ТаблицаЗначений;
	ТаблиДокументов.Колонки.Добавить("ДокОбъект",мТип);
	НоваяСтрока = ТаблиДокументов.Добавить();
	НоваяСтрока.ДокОбъект = ДокументПродажи;
	
	Запрос.УстановитьПараметр("ДокументПлатежи", ТаблиДокументов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ВходныеДанные = Новый Структура;
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ДокПрихода) Тогда
			ДокПрихода = Выборка.ДокПрихода.ПолучитьОбъект();
			ДокПрихода.Товары.Очистить();
			ДокПрихода.Записать();
			ВходныеДанные.Вставить("ДокПрихода", ДокПрихода);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ДокРасхаод) Тогда
			ДокРасхаод = Выборка.ДокРасхаод.ПолучитьОбъект();
			ДокРасхаод.ТоварыПоРаспоряжениям.Очистить();
			ДокРасхаод.ОтгружаемыеТовары.Очистить();
			ДокРасхаод.Записать();
			ВходныеДанные.Вставить("ДокРасхаод", ДокРасхаод);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ДокОбъект) Тогда
			ДокОбъект = Выборка.ДокОбъект.ПолучитьОбъект();  
			ДокОбъект.Товары.Очистить();
			ДокОбъект.Записать();
			ВходныеДанные.Вставить("ДокОбъект", ДокОбъект);
		КонецЕсли;
	КонецЦикла;
	Возврат ВходныеДанные;	
КонецФункции

&НаКлиенте
Процедура НаименованиеФИОПриИзменении(Элемент)
	
	ИзменениеПараметровПоиска();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПартнеров()
	
	СписокПартнеровПоУмолчанию = АЭС_Сервер.ПолучитьМассивПартнеровПоУмолчанию();
	
	СписокПартнеров = СформироватьСписокПартнеров(СписокПартнеровПоУмолчанию);
	
	Элементы.Партнер.СписокВыбора.ЗагрузитьЗначения(СписокПартнеров);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьСписокПартнеров();
	
КонецПроцедуры


&НаКлиенте
Процедура ОбъектИННПриИзменении(Элемент)
	
	
	ИзменениеПараметровПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОплатыПлатежнымиКартами(Команда)
	Док = Элементы.ПлатежиЗаСмену.ТекущиеДанные.Ссылка;
	мФормаОплаты = ПолучитьЗначениеРеквизитаНаСервере(Док, "ФормаОплаты");
	Если Не мФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") Тогда 
		Сообщить("Выберите Возврат (нал.)");
	Иначе
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДокументВозврата",Док);
		ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения("ОтменитьОплатыПлатежнымиКартами", ЭтотОбъект, ДополнительныеПараметры));
	КонецЕсли;
КонецПроцедуры
	
&НаКлиенте
Процедура ОтменитьОплатыПлатежнымиКартами(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВХранилище", ПоместитьТабличнуюЧастьОплатыПлатежнымиКартамиВХранилище(ДополнительныеПараметры.ДокументВозврата));
	РезультатВыбора = Неопределено;
	
	Если ДополнительныеПараметры.Свойство("ПолученоНаличными") Тогда
		Объект.ПолученоНаличными = ДополнительныеПараметры.ПолученоНаличными;
	КонецЕсли;
	Результат = ВозвратПродажиНаСервере(ДополнительныеПараметры.ДокументВозврата);
    П = Новый Структура("Ключ", Результат.Документ);
	мФорма = ПолучитьФорму("Документ.ЧекККМВозврат.Форма.ФормаДокументаРМК", П);
	ДополнительныеПараметры.Вставить("Форма", мФорма);
	ДополнительныеПараметры.Вставить("Валюта", ПолучитьЗначениеРеквизитаНаСервере(ДополнительныеПараметры.ДокументВозврата, "Валюта"));
	ДополнительныеПараметры.Вставить("Результат", Результат);
	ДополнительныеПараметры.Вставить("ПараметрыКассыККМ", ПараметрыКассыККМ);
	ДополнительныеПараметры.Вставить("ТипТранзакции",     "AuthorizeVoid");

	ОткрытьФорму(
		"Документ.ЧекККМ.Форма.ТабличнаяЧастьОплатаПлатежнымиКартами",
		ПараметрыФормы,,,,,
		//Новый ОписаниеОповещения("ОтменитьОплатыПлатежнымиКартамиВыборСтрокиОплатыЗавершение", РозничныеПродажиКлиент, ДополнительныеПараметры),
		Новый ОписаниеОповещения("ОтменитьОплатуПлатежнымиКартамиЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуПлатежнымиКартамиЗавершение(Результат, ДополнительныеПараметры)Экспорт
	Если НЕ Результат = Неопределено Тогда
		РозничныеПродажиКлиент.ОтменитьОплатыПлатежнымиКартамиВыборСтрокиОплатыЗавершение(Результат,	ДополнительныеПараметры); 
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КодАвторизации");
		ПараметрыОтбора.Вставить("НомерПлатежнойКарты");
		ПараметрыОтбора.Вставить("НомерСтроки");
		ПараметрыОтбора.Вставить("НомерЧекаЭТ");
		ПараметрыОтбора.Вставить("СсылочныйНомер");
		ПараметрыОтбора.Вставить("Сумма");
		ПараметрыОтбора.Вставить("ЭквайринговыйТерминал");
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Результат.ВыбраннаяСтрока);
		//Если Не РезультатОтменыОплатыКартой(ДополнительныеПараметры.Результат, ПараметрыОтбора) Тогда
			ВозвратПродажи(Неопределено,ДополнительныеПараметры.Результат);
		//КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция РезультатОтменыОплатыКартой(Результат, ПараметрыОтбора)
	Отказ = Ложь;
	НайденныеСтроки = Результат.Документ.ОплатаПлатежнымиКартами.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СТЧ Из НайденныеСтроки Цикл 
		Если Не СТЧ.ОплатаОтменена Тогда
			Отказ = Истина;				
		КонецЕсли;
	КонецЦикла;
	Если Отказ Тогда
		ДокОбъект = Результат.Документ.ПолучитьОбъект();
		ДокОбъект.ЧекККМ = Документы.ЧекККМ.ПустаяСсылка();
		ДокОбъект.ПометкаУдаления = Истина;
		ДокОбъект.Записать();
	КонецЕсли;
		
		
	Возврат Отказ;
КонецФункции
	
&НаСервере
Функция ПоместитьТабличнуюЧастьОплатыПлатежнымиКартамиВХранилище(Док)
	
	Возврат ПоместитьВоВременноеХранилище(Док.ОплатаПлатежнымиКартами.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура Инкаcсация(Команда)
	ОчиститьСообщения();
	
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(
		ЭтотОбъект,
		Новый ОписаниеОповещения("ВыемкаДенежныхСредствПослеОбработкиСостоянияСмены", ЭтотОбъект,Новый Структура));

КонецПроцедуры

&НаКлиенте
Процедура Внесение(Команда)
	ОчиститьСообщения();
	
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(
		ЭтотОбъект,
		Новый ОписаниеОповещения("ВнесениеДенежныхСредствПослеОбработкиСостоянияСмены", ЭтотОбъект));

КонецПроцедуры
	
&НаКлиенте
Процедура ВыемкаДенежныхСредствПослеОбработкиСостоянияСмены(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	РозничныеПродажиКлиент.ВыемкаДенежныхСредств(
		ЭтотОбъект,
		ПараметрыКассыККМ,
		Новый ОписаниеОповещения("ПослеВнесенияВыемкиДенежныхСредств", ЭтотОбъект,Новый Структура));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВнесенияВыемкиДенежныхСредств(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьСостояниеКассовойСмены(Объект.КассаККМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнесениеДенежныхСредствПослеОбработкиСостоянияСмены(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	РозничныеПродажиКлиент.ВнесениеДенежныхСредств(
		ЭтотОбъект,
		ПараметрыКассыККМ,
		Новый ОписаниеОповещения("ПослеВнесенияВыемкиДенежныхСредств", ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Процедура СозадатьДокументПродажиНаВозврат(Док)
	ДокОбъект = Документы.АЭС_Платежи.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокОбъект, Док.ЧекККМ.Платеж);
	ДокОбъект.Номер = "";
	ДокОбъект.Дата = ТекущаяДата();
	// Простите_Но_Возврат
	ДокОбъект.Возврат = Истина;
	Отбор = Новый  Структура;
	Отбор.Вставить("ДокументПродажи", Док.ЧекККМ);
	ЗаполнитьТЧДокПродажи(Док.ЧекККМ.Платеж, ДокОбъект, "ОсновнаяДеятельность" , Отбор, Док);
	ЗаполнитьТЧДокПродажи(Док.ЧекККМ.Платеж, ДокОбъект, "Товары" , Отбор, Док);
	ЗаполнитьТЧДокПродажи(Док.ЧекККМ.Платеж, ДокОбъект, "СторонниеУслуги" , Отбор, Док);
	
	ДокОбъект.СуммаДокумента = ДокОбъект.Товары.Итог("Сумма")+ДокОбъект.ОсновнаяДеятельность.Итог("Сумма") + ДокОбъект.СторонниеУслуги.Итог("Сумма");
	мСуммаНаличные = 0;
	мСуммаБезНаличные = 0;
	
	Для Каждого СТЧ Из ДокОбъект.ОсновнаяДеятельность Цикл
		Если СТЧ.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда 
			 мСуммаНаличные =  мСуммаНаличные + СТЧ.Сумма;
		 ИначеЕсли СТЧ.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
			 мСуммаБезНаличные =  мСуммаБезНаличные + СТЧ.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СТЧ Из ДокОбъект.Товары Цикл
		Если СТЧ.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			 мСуммаНаличные =  мСуммаНаличные + СТЧ.Сумма;
		 ИначеЕсли СТЧ.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
			 мСуммаБезНаличные = мСуммаБезНаличные + СТЧ.Сумма;
		КонецЕсли;
	КонецЦикла;

	Для Каждого СТЧ Из ДокОбъект.СторонниеУслуги Цикл
		Если СТЧ.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			 мСуммаНаличные =  мСуммаНаличные + СТЧ.Сумма;
		 ИначеЕсли СТЧ.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
			 мСуммаБезНаличные = мСуммаБезНаличные + СТЧ.Сумма;
		КонецЕсли;
	КонецЦикла;

	ДокОбъект.СуммаНаличная = мСуммаНаличные;
	ДокОбъект.СуммаБезналичная = мСуммаБезНаличные;

	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧДокПродажи(Истичник, Приемник, ТЧ, Отбор, ДокументВозврата)
	НайденныеСтроки = Истичник[ТЧ].НайтиСтроки(Отбор);	
	Для Каждого СТЧ из НайденныеСтроки Цикл
		НоваяСтрока = Приемник[ТЧ].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СТЧ); 
		НоваяСтрока.ДокументПродажи = ДокументВозврата;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетБезГашения(Команда)
	ПодключенноеУстройство = МенеджерОборудованияКлиент.ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, ПараметрыКассыККМ.ИдентификаторУстройства);
	ОбъектДрайвера = ПодключенноеУстройство.ОбъектДрайвера;
	//Попытка
		//Если ПараметрыПодключения.РевизияИнтерфейса > 2001 Тогда // Версия стандарта 2.2 (ОФД 1.0.5/1.1)
		//	ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры);
		//	Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства, ПараметрыОперации);
		//Иначе
		//	Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства);
		//КонецЕсли;
		ОчиститьСообщения();
		Доступность = Ложь;
		
		ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперации();
		Кассир = "";
		СтандартнаяОбработка = Истина;
		Кассир = РозничныеПродажиВызовСервера.РеквизитыКассира().Наименование;
		ПараметрыОперации.Кассир = ?(Не СтандартнаяОбработка, Кассир, НСтр("ru='Администратор'")); 
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьФормированиеОтчетаБезГашения(ОповещениеПриЗавершении, УникальныйИдентификатор, ПараметрыОперации);
	//Исключение
	//	Результат = Ложь;
	//КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура НастроитьПраваДляПользователя()
	ПраваДоступа = НастройкиПродажДляПользователейСервер.ПраваДоступаРМК(Пользователи.ТекущийПользователь());	
КонецПроцедуры

&НаСервере
Процедура НастроитьРМК()
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтотОбъект, "");
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеАгента(Агент, Источник)
	Если НЕ ЗначениеЗаполнено(Агент) Тогда
		Сообщить("Не указан Партнер");
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,";
	Если Не Источник = "Партнеры" Тогда
		Запрос.Текст = Запрос.Текст+"	ПартнерыКонтактнаяИнформация.Ссылка.ИНН,";
		Запрос.Текст = Запрос.Текст+"	ПартнерыКонтактнаяИнформация.Ссылка.НаименованиеСокращенное КАК Наименование";
	Иначе
		Запрос.Текст = Запрос.Текст+"	ПартнерыКонтактнаяИнформация.Ссылка.Наименование КАК Наименование";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	
	|ИЗ
	|	Справочник."+Источник+".КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка.Ссылка = &Ссылка
	|	И ПартнерыКонтактнаяИнформация.НомерТелефона <> """"";
	
	Запрос.УстановитьПараметр("Ссылка", Агент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Результат.Пустой() Тогда
		ДанныеАгента = Неопределено;
	Иначе
		Пока Выборка.Следующий() Цикл
			ДанныеАгента = Новый Структура;
			ДанныеАгента.Вставить("Агент", Выборка.Наименование);
			Если Не Источник = "Партнеры" Тогда
				ДанныеАгента.Вставить("ИНН", Выборка.ИНН);
			КонецЕсли;
			ДанныеАгента.Вставить("НомерТелефона", Выборка.НомерТелефона);
		КонецЦикла;
	КонецЕсли;
	Возврат ДанныеАгента; 
КонецФункции


&НаКлиенте
Процедура ВвестиШтрихКод(Команда)
	
	СтрокаШК = "";
	
	ПоказатьВводСтроки(
			Новый ОписаниеОповещения("ВвестиШтрихКодЗавершение", ЭтотОбъект, Неопределено),
			СтрокаШК,
			"Введите штрих-код",
			,
			Ложь);
			
КонецПроцедуры

&НаКлиенте
Процедура ВвестиШтрихКодЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ПараметрМассив = Новый Массив;
		ПараметрМассив.Добавить(Результат);
		ПараметрМассив.Добавить(Неопределено);
		ОбработкаОповещения("ScanData", ПараметрМассив, "ПодключаемоеОборудование")
	КонецЕсли;	
	

КонецПроцедуры

&НаСервере
Функция ПолучитьСуммуКомиссииПоДокумету(ДокуметОснование, Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АЭС_ПлатежиТовары.Сумма
	               |ИЗ
	               |	Документ.АЭС_Платежи.СторонниеУслуги КАК АЭС_ПлатежиСторонниеУслуги
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АЭС_КомиссияНоменклатуры.СрезПоследних(&Дата, ) КАК АЭС_КомиссияНоменклатурыСрезПоследних
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.АЭС_Платежи.Товары КАК АЭС_ПлатежиТовары
	               |			ПО АЭС_КомиссияНоменклатурыСрезПоследних.НоменклатураКомиссии = АЭС_ПлатежиТовары.Номенклатура
	               |				И АЭС_КомиссияНоменклатурыСрезПоследних.ВидОплатыКомиссии = АЭС_ПлатежиТовары.ВидОплаты
	               |		ПО АЭС_ПлатежиСторонниеУслуги.Номенклатура = АЭС_КомиссияНоменклатурыСрезПоследних.Номенклатура
	               |			И АЭС_ПлатежиСторонниеУслуги.ВидОплаты = АЭС_КомиссияНоменклатурыСрезПоследних.ВидОплаты
	               |ГДЕ
	               |	АЭС_ПлатежиСторонниеУслуги.Номенклатура = &Номенклатура
	               |	И АЭС_ПлатежиСторонниеУслуги.Ссылка.Ссылка = &Ссылка
	               |	И АЭС_ПлатежиТовары.Ссылка.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Дата", ДокуметОснование.Дата);
	Запрос.УстановитьПараметр("Ссылка", ДокуметОснование);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если  Выборка.Следующий() Тогда
		СуммаКомисии = Выборка.Сумма;
	КонецЕсли;	
	Возврат СуммаКомисии;
КонецФункции

&НаКлиенте
Процедура ОперацияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Доступность = Истина;
	
	ТекстСообщения = ?(РезультатВыполнения.Результат, НСтр("ru='Операция успешно завершена.'"), РезультатВыполнения.ОписаниеОшибки);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры


&НаСервере
Функция ДанныеДляЕГАИС(мОбъект)
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Если ТипЗнч(мОбъект) = Тип("ДокументСсылка.ЧекККМ") Тогда 
		ДанныеПоТоварам = ДанныеПоТоварамЧек(мОбъект, МенеджерВременныхТаблиц);		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДанныеПоТоварам.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ДанныеПоТоварам.НомерСтроки КАК НомерСтроки,
		|	ДанныеПоТоварам.НоменклатураЕГАИС КАК НоменклатураЕГАИС,
		|	ДанныеПоТоварам.Номенклатура КАК Номенклатура,
		|	ДанныеПоТоварам.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ДанныеПоТоварам.ПодакцизныйТовар КАК ПодакцизныйТовар,
		|	ДанныеПоТоварам.АлкогольнаяПродукцияВоВскрытойТаре КАК АлкогольнаяПродукцияВоВскрытойТаре,
		|	ДанныеПоТоварам.НоменклатураНаименование КАК НоменклатураНаименование,
		|	ДанныеПоТоварам.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
		|	ДанныеПоТоварам.УпаковкаНаименование КАК УпаковкаНаименование,
		|	ДанныеПоТоварам.Характеристика КАК Характеристика,
		|	ДанныеПоТоварам.Упаковка КАК Упаковка,
		|	ДанныеПоТоварам.Серия КАК Серия,
		|	ДанныеПоТоварам.Количество КАК Количество,
		|	ДанныеПоТоварам.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ДанныеПоТоварам.Цена КАК Цена,
		|	ДанныеПоТоварам.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	ДанныеПоТоварам.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	ДанныеПоТоварам.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ДанныеПоТоварам.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	ДанныеПоТоварам.Сумма КАК Сумма,
		|	ДанныеПоТоварам.СтавкаНДС КАК СтавкаНДС,
		|	ДанныеПоТоварам.СуммаНДС КАК СуммаНДС,
		|	ДанныеПоТоварам.Штрихкод КАК Штрихкод
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	&ДанныеПоТоварам КАК ДанныеПоТоварам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Данные.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВТ_Данные.НомерСтроки КАК НомерСтроки,
		|	ВТ_Данные.НоменклатураЕГАИС КАК НоменклатураЕГАИС,
		|	ВТ_Данные.Номенклатура КАК Номенклатура,
		|	ВТ_Данные.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ВТ_Данные.ПодакцизныйТовар КАК ПодакцизныйТовар,
		|	ВТ_Данные.АлкогольнаяПродукцияВоВскрытойТаре КАК АлкогольнаяПродукцияВоВскрытойТаре,
		|	ВТ_Данные.НоменклатураНаименование КАК НоменклатураНаименование,
		|	ВТ_Данные.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
		|	ВТ_Данные.УпаковкаНаименование КАК УпаковкаНаименование,
		|	ВТ_Данные.Характеристика КАК Характеристика,
		|	ВТ_Данные.Упаковка КАК Упаковка,
		|	ВТ_Данные.Серия КАК Серия,
		|	ВТ_Данные.Количество КАК Количество,
		|	ВТ_Данные.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВТ_Данные.Цена КАК Цена,
		|	ВТ_Данные.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	ВТ_Данные.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	ВТ_Данные.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ВТ_Данные.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	ВТ_Данные.Сумма КАК Сумма,
		|	ВТ_Данные.СтавкаНДС КАК СтавкаНДС,
		|	ВТ_Данные.СуммаНДС КАК СуммаНДС,
		|	ВТ_Данные.Штрихкод КАК Штрихкод,
		|	ВЫБОР
		|		КОГДА НоменклатураДополнительныеРеквизиты.Значение ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
		|		ИНАЧЕ НоменклатураДополнительныеРеквизиты.Значение
		|	КОНЕЦ КАК СтранаПроисхождения
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|		ПО ВТ_Данные.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка
		|			И (НоменклатураДополнительныеРеквизиты.Значение ССЫЛКА Справочник.СтраныМира)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Данные";
		
		Запрос.УстановитьПараметр("ДанныеПоТоварам", ДанныеПоТоварам);		
		Результат = Запрос.Выполнить().Выгрузить();	
	Иначе
		ДанныеПоТоварам = ДанныеПоТоварамЧекККМВозврат(мОбъект, МенеджерВременныхТаблиц);		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДанныеПоТоварам.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ДанныеПоТоварам.НомерСтроки КАК НомерСтроки,
		|	ДанныеПоТоварам.НоменклатураЕГАИС КАК НоменклатураЕГАИС,
		|	ДанныеПоТоварам.Номенклатура КАК Номенклатура,
		|	ДанныеПоТоварам.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ДанныеПоТоварам.ПодакцизныйТовар КАК ПодакцизныйТовар,
		|	ДанныеПоТоварам.АлкогольнаяПродукцияВоВскрытойТаре КАК АлкогольнаяПродукцияВоВскрытойТаре,
		|	ДанныеПоТоварам.НоменклатураНаименование КАК НоменклатураНаименование,
		|	ДанныеПоТоварам.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
		|	ДанныеПоТоварам.УпаковкаНаименование КАК УпаковкаНаименование,
		|	ДанныеПоТоварам.Характеристика КАК Характеристика,
		|	ДанныеПоТоварам.Упаковка КАК Упаковка,
		|	ДанныеПоТоварам.Серия КАК Серия,
		|	ДанныеПоТоварам.Количество КАК Количество,
		|	ДанныеПоТоварам.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ДанныеПоТоварам.Цена КАК Цена,
		|	ДанныеПоТоварам.Сумма КАК Сумма,
		|	ДанныеПоТоварам.СтавкаНДС КАК СтавкаНДС,
		|	ДанныеПоТоварам.СуммаНДС КАК СуммаНДС,
		|	ДанныеПоТоварам.Штрихкод КАК Штрихкод
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	&ДанныеПоТоварам КАК ДанныеПоТоварам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Данные.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВТ_Данные.НомерСтроки КАК НомерСтроки,
		|	ВТ_Данные.НоменклатураЕГАИС КАК НоменклатураЕГАИС,
		|	ВТ_Данные.Номенклатура КАК Номенклатура,
		|	ВТ_Данные.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ВТ_Данные.ПодакцизныйТовар КАК ПодакцизныйТовар,
		|	ВТ_Данные.АлкогольнаяПродукцияВоВскрытойТаре КАК АлкогольнаяПродукцияВоВскрытойТаре,
		|	ВТ_Данные.НоменклатураНаименование КАК НоменклатураНаименование,
		|	ВТ_Данные.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
		|	ВТ_Данные.УпаковкаНаименование КАК УпаковкаНаименование,
		|	ВТ_Данные.Характеристика КАК Характеристика,
		|	ВТ_Данные.Упаковка КАК Упаковка,
		|	ВТ_Данные.Серия КАК Серия,
		|	ВТ_Данные.Количество КАК Количество,
		|	ВТ_Данные.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВТ_Данные.Цена КАК Цена,
		|	ВТ_Данные.Сумма КАК Сумма,
		|	ВТ_Данные.СтавкаНДС КАК СтавкаНДС,
		|	ВТ_Данные.СуммаНДС КАК СуммаНДС,
		|	ВТ_Данные.Штрихкод КАК Штрихкод,
		|	ВЫБОР
		|		КОГДА НоменклатураДополнительныеРеквизиты.Значение ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
		|		ИНАЧЕ НоменклатураДополнительныеРеквизиты.Значение
		|	КОНЕЦ КАК СтранаПроисхождения
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|		ПО ВТ_Данные.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка
		|			И (НоменклатураДополнительныеРеквизиты.Значение ССЫЛКА Справочник.СтраныМира)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Данные";
		
		Запрос.УстановитьПараметр("ДанныеПоТоварам", ДанныеПоТоварам);		
		
		Результат = Запрос.Выполнить().Выгрузить();	
	КонецЕсли;
	МассивСтрок = Новый Массив;
	Для каждого СтрокаТЧ из Результат Цикл
		НоваяСтрока  = РозничныеПродажиКлиентСервер.СтруктураСтрокиЧекаЕГАИС();
		НоваяСтрока.Вставить("КодСтраныПроисхождения", СтрокаТЧ.СтранаПроисхождения.Код);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.Наименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТЧ.НоменклатураНаименование,
			СтрокаТЧ.ХарактеристикаНаименование,
			СтрокаТЧ.УпаковкаНаименование);
		МассивСтрок.Добавить(НоваяСтрока);
	КонецЦикла;
	Возврат МассивСтрок;
КонецФункции

&НаКлиенте
Функция ЗаписатьФискальнуюОперациюНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи, РеквизитыФискальнойОперацииКассовогоУзла)
	
	Результат = ЗаписатьФискальнуюОперациюНаСервере(ТребуетсяПовторнаяПопыткаЗаписи, РеквизитыФискальнойОперацииКассовогоУзла);
	
	Если Результат Тогда
		Оповестить("Запись_ЧекККМ", Новый Структура, Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаписатьФискальнуюОперациюНаСервере(ТребуетсяПовторнаяПопыткаЗаписи, РеквизитыФискальнойОперацииКассовогоУзла)
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Объект.Дата = ТекущаяДатаСеанса();
	
	НачатьТранзакцию();
	Попытка
		
		Если РеквизитыФискальнойОперацииКассовогоУзла <> Неопределено Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить();
			ЭлементБлокировки.Область = "РегистрСведений.ЖурналФискальныхОпераций";
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировки.УстановитьЗначение("ДокументОснование", РеквизитыФискальнойОперацииКассовогоУзла.ДокументОснование);
			Блокировка.Заблокировать();
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		Если  ТипЗнч(РеквизитыФискальнойОперацииКассовогоУзла.ДокументОснование) = Тип("ДокументСсылка.ЧекККМ") Тогда 
			ЭлементБлокировки.Область = "Документ.ЧекККМ";
		Иначе
			ЭлементБлокировки.Область = "Документ.ЧекККМВозврат";
		КонецЕсли;
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", РеквизитыФискальнойОперацииКассовогоУзла.ДокументОснование);
		Блокировка.Заблокировать();
		
		Если РеквизитыФискальнойОперацииКассовогоУзла <> Неопределено Тогда
			ПодключаемоеОборудованиеУТСервер.ЗаписатьВЖурналФискальныхОперацийУпрощенно(
				РеквизитыФискальнойОперацииКассовогоУзла);
		КонецЕсли;
		
		Результат = ИнициализироватьДокументНаСервере(РеквизитыФискальнойОперацииКассовогоУзла.ДокументОснование);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТребуетсяПовторнаяПопыткаЗаписи = Истина;
		Возврат Ложь;
		
	КонецПопытки;
	
	Если Результат Тогда
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМ));
		
		//ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		
	КонецЕсли;
	
	Возврат Не Результат;
	
КонецФункции

&НаСервере 
Функция ПроверитьВидОплатыКомиссия(Организация, Номенклатура)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	АЭС_НоменклатураПоВидамОплат.Номенклатура,
	               |	АЭС_НоменклатураПоВидамОплат.ВидОплаты,
	               |	АЭС_НоменклатураПоВидамОплат.Наличная,
	               |	АЭС_НоменклатураПоВидамОплат.ПлатежнаяКарта,
	               |	АЭС_НоменклатураПоВидамОплат.КонсигнантПринципал
	               |ИЗ
	               |	РегистрСведений.АЭС_НоменклатураПоВидамОплат КАК АЭС_НоменклатураПоВидамОплат
	               |ГДЕ
	               |	(АЭС_НоменклатураПоВидамОплат.Организация = &Организация
	               |				И АЭС_НоменклатураПоВидамОплат.Номенклатура В (&Номенклатура)
	               |			ИЛИ АЭС_НоменклатураПоВидамОплат.Номенклатура В (&Группа))";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Группа", Номенклатура.Родитель);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда 
		Если Выборка.ВидОплаты = Справочники.АЭС_ВидОплаты.КомиссионноеВознаграждение Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ВвестиШтрихКодТовара(Команда)
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискТовараПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПоискТовараПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	СтруктураТовара = ОбработатьШтрихкодыНаСервере(ДанныеШтрихкода);
	Если Не СтруктураТовара = Неопределено Тогда
		Контрагент = Элементы.СписокПотребителей.ТекущиеДанные.Ссылка;
		СозадатьДокументПродажи(Контрагент, Неопределено, ТекущаяДата(), Неопределено, Неопределено, СтруктураТовара);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОбработатьШтрихкодыНаСервере(ДанныеШтрихкодов, ЗагрузкаИзТСД = Ложь)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", ДанныеШтрихкодов.ШтрихКод);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураТовара = Новый Структура;
		СтруктураТовара.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураТовара.Вставить("Количество", ДанныеШтрихкодов.Количество);
		Возврат СтруктураТовара;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция СтруктураРеквизитыФискальнойОперацииКассовогоУзла() 
	
	ДополнительныеПараметры = Новый Структура;
	
	Реквизиты = Новый Структура;
	
	Реквизиты.Вставить("Дата");
	Реквизиты.Вставить("ДокументОснование");
	Реквизиты.Вставить("Организация");
	Реквизиты.Вставить("ТорговыйОбъект");
	Реквизиты.Вставить("Устройство");
	
	Реквизиты.Вставить("ТипОперации");
	Реквизиты.Вставить("ТипРасчета");
	
	Реквизиты.Вставить("НомерЧекаККМ");
	Реквизиты.Вставить("НомерСмены");
	Реквизиты.Вставить("ВариантОтправкиЭлектронногоЧека");
	Реквизиты.Вставить("КонтактныеДанныеЭлектронногоЧека");
	
	Реквизиты.Вставить("Сумма");
	Реквизиты.Вставить("СуммаОплатыНаличные");
	Реквизиты.Вставить("СуммаОплатыПлатежнаяКарта");
	Реквизиты.Вставить("СуммаКредит");
	Реквизиты.Вставить("СуммаПредоплаты");
	Реквизиты.Вставить("СуммаВзаимозачет");
	
	Реквизиты.Вставить("Данные");
	
	Реквизиты.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	Возврат Реквизиты;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеОрганизациипоДокументу(мДокумент)
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	АЭС_Платежи.Организация КАК Организация,
	 |	АЭС_Платежи.Организация.АЭС_ПечатьДанныхАгента КАК АЭС_ПечатьДанныхАгента
	 |ИЗ
	 |	Документ.АЭС_Платежи КАК АЭС_Платежи
	 |ГДЕ
	 |	АЭС_Платежи.Ссылка = &Ссылка";
	 
	 Запрос.УстановитьПараметр("Ссылка", мДокумент);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 мДанные = Новый Структура;
	 мДанные.Вставить("Организация");
	 мДанные.Вставить("АЭС_ПечатьДанныхАгента");
	 
	 Если Выборка.Следующий() Тогда
		мДанные.Вставить("Организация",Выборка.Организация);
		мДанные.Вставить("АЭС_ПечатьДанныхАгента",Выборка.АЭС_ПечатьДанныхАгента);
	 Конецесли;
	 Возврат мДанные;
 КонецФункции
 
 &НаСервере 
 Функция ПолучитьДанныеКонтрагента(Контрагент)
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	Контрагенты.ЮрФизЛицо КАК ЮрФизЛицо,
	 |	Контрагенты.Наименование КАК Наименование,
	 |	Контрагенты.ИНН КАК ИНН,
	 |	Контрагенты.НомерЛС КАК НомерЛС
	 |ИЗ
	 |	Справочник.Контрагенты КАК Контрагенты
	 |ГДЕ
	 |	Контрагенты.Ссылка = &Контрагент";
	 
	 Запрос.УстановитьПараметр("Контрагент", Контрагент);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 мДанные = Новый Структура;
	 мДанные.Вставить("ЮрФизЛицо");
	 мДанные.Вставить("Наименование");
	 мДанные.Вставить("ИНН");
	 мДанные.Вставить("НомерЛС");
		 
	 Если Выборка.Следующий() Тогда
		 мДанные.Вставить("ЮрФизЛицо",Выборка.ЮрФизЛицо);
		 мДанные.Вставить("Наименование",Выборка.Наименование);
		 мДанные.Вставить("ИНН",Выборка.ИНН);
		 мДанные.Вставить("НомерЛС",Выборка.НомерЛС);
	 КонецЕсли;;
	 Возврат мДанные;
 КонецФункции

&НаКлиенте
Процедура ЗачетАвансаНаСервере()
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОборудованиеККТ", ПараметрыКассыККМ.ИдентификаторУстройства);
	ПараметрыФормы.Вставить("Организация", ПараметрыКассыККМ.Организация);
	ПараметрыФормы.Вставить("СерийныйНомер", ПараметрыКассыККМ.СерийныйНомер);
	ПараметрыФормы.Вставить("ТипОборудования", ПараметрыКассыККМ.ТипОборудования);
	
	ОткрытьФорму("Обработка.АЭС_ЗачетАванса.Форма.Форма", ПараметрыФормы);	 
 КонецПроцедуры

&НаКлиенте
 Процедура ЗачетАванса(Команда)
	 ЗачетАвансаНаСервере();
 КонецПроцедуры

 &НаСервере 
 Процедура ЗаполнитьЕмайл(ТекКонтрагент)
	 Если ЗначениеЗаполнено(ТекКонтрагент) Тогда
		 Если ТекКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо и НЕ ПустаяСтрока(Объект.ЛицевойСчет) и НЕ ТекКонтрагент = Справочники.Контрагенты.РозничныйПокупатель Тогда
			 СтруктураОтбора = Новый Структура;
			 СтруктураОтбора.Вставить("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			 СтруктураОтбора.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
			 МассивСтрок = ТекКонтрагент.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
			 Если МассивСтрок.Количество() > 0 Тогда
				 Email = МассивСтрок[0].Представление;
			 Иначе
				 Email = "";
			 КонецЕсли;	
			 
			 Если Email = "" и Объект.Партнер.Предопределенный Тогда				 
				 СтруктураДанныхПоЛицевомуСчету = АЭС_Стек.ПолучитьСтатусЛицевогоСчетаФЛ(Объект.ЛицевойСчет);
				 Если СтруктураДанныхПоЛицевомуСчету <> Неопределено Тогда
					 Email = СтруктураДанныхПоЛицевомуСчету.ЕмайлЛС;			 
				 КонецЕсли;	
			 КонецЕсли;
		 КонецЕсли;	
	 КонецЕсли;
 КонецПроцедуры
 
&НаКлиенте
Процедура СписокПотребителейПриАктивизацииСтроки(Элемент)	
	Если Элементы.СписокПотребителей.ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЕмайл(Элементы.СписокПотребителей.ТекущиеДанные.Ссылка);
	КонецЕсли; 
 КонецПроцедуры
