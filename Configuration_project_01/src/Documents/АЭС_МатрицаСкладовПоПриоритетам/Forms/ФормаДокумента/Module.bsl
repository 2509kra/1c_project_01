&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПунктыВыдачи = Документы.АЭС_МатрицаСкладовПоПриоритетам.ПолучитьСписокПунктовВыдачиПоОрганизации(Объект.Организация);
	Склады		 = Документы.АЭС_МатрицаСкладовПоПриоритетам.ПолучитьСписокСкладовПоОрганизации(Объект.БизнесРегион);
	
	ПоместитьМатрицуНаФорму(ПунктыВыдачи,Склады);
	
КонецПроцедуры // Процедура ОрганизацияПриИзмененииНаСервере()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
		
КонецПроцедуры // Процедура ОрганизацияПриИзменении(Элемент)

&НаСервере
Процедура ПоместитьМатрицуНаФорму(ПунктыВыдачи,Склады)
	
	Объект.ПунктВыдачи.Очистить();
	
	ДеревоОбъект = Новый ДеревоЗначений;
	
	Если Объект.ВидМатрицы	= Перечисления.АЭС_ВидМатрицыРезервирования.ПоПунктамВыдачи Тогда	
		ДеревоОбъект.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.АЭС_ПунктыВыдачи"));
	Иначе
		ДеревоОбъект.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.АЭС_ПунктыВыдачи"));
	КонецЕсли; // Если Объект.ВидМатрицы	= Перечисления.АЭС_ВидМатрицыРезервирования.ПоПунктамВыдачи Тогда

	ПорядковыйНомер	= 0;

	Если Объект.ВидМатрицы	= Перечисления.АЭС_ВидМатрицыРезервирования.ПоПунктамВыдачи Тогда
		// Описание колонок дерева
		Для Каждого стр Из ПунктыВыдачи Цикл
			
			ИмяКолонки 		= стр.Ссылка.Наименование;
			ПорядковыйНомер = ПорядковыйНомер+1;
			
			ДеревоОбъект.Колонки.Добавить("Колонка"+ПорядковыйНомер, Новый ОписаниеТипов("Число"),ИмяКолонки,);
			нстрПунктВыдачи	= Объект.ПунктВыдачи.Добавить();
			
			нстрПунктВыдачи.ИдентификаторКолонки	= "Колонка"+ПорядковыйНомер;
			нстрПунктВыдачи.ПунктВыдачи				= стр.Ссылка;

		КонецЦикла; // Для Каждого стр Из ПунктыВыдачи Цикл		
	Иначе
		
		// Описание колонок дерева
		Для Каждого стр Из Склады Цикл
			
			ИмяКолонки 		= стр.Ссылка.Наименование;
			ПорядковыйНомер = ПорядковыйНомер+1;
			
			ДеревоОбъект.Колонки.Добавить("Колонка"+ПорядковыйНомер, Новый ОписаниеТипов("Число"),ИмяКолонки,);
			нстрПунктВыдачи	= Объект.ПунктВыдачи.Добавить();
			
			нстрПунктВыдачи.ИдентификаторКолонки	= "Колонка"+ПорядковыйНомер;
			нстрПунктВыдачи.СкладРезерва			= стр.Ссылка;

		КонецЦикла; // Для Каждого стр Из ПунктыВыдачи Цикл	
	
	КонецЕсли; // Если Объект.ВидМатрицы	= Перечисления.АЭС_ВидМатрицыРезервирования.ПоПунктамВыдачи Тогда	
		
	// Добавляем строки дерева
	Для Каждого стр Из ПунктыВыдачи Цикл
				
		СтрокаДерева = ДеревоОбъект.Строки.Добавить();
		
		СтрокаДерева.Склад	= стр.Ссылка;
		 
	КонецЦикла; // Для Каждого стр Из ПунктыВыдачи Цикл
	
    // Создание Реквизита формы типа ДанныеФормыДерево
    МассивДобавляемыхРеквизитов = Новый Массив;
    МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Дерево", Новый ОписаниеТипов("ДеревоЗначений")));
	
    Для Каждого Колонка Из ДеревоОбъект.Колонки Цикл
        МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "Дерево"));
    КонецЦикла; // Для Каждого Колонка Из ДеревоОбъект.Колонки Цикл

    ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

    // Преобразование объекта прикладного типа ДеревоЗначений
    // в реквизит управляемой формы (данные формы)
    ЗначениеВРеквизитФормы(ДеревоОбъект, "Дерево");

    // Создание элемента формы типа ТаблицаФормы для отображения дерева
    ЭлементДерево = Элементы.Добавить("Дерево", Тип("ТаблицаФормы"));
    ЭлементДерево.ПутьКДанным = "Дерево";
    ЭлементДерево.Отображение = ОтображениеТаблицы.Дерево;
	ЭлементДерево.КоманднаяПанель.Доступность	= Ложь; 
	
	ЭлементДерево.УстановитьДействие("ПриИзменении","ПриИзмененииПриоритет");

	Для Каждого Колонка Из ДеревоОбъект.Колонки Цикл
		
        НовыйЭлемент = Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), ЭлементДерево);
		
		НовыйЭлемент.Заголовок		= Колонка.Заголовок; 
        НовыйЭлемент.Вид 			= ВидПоляФормы.ПолеВвода;
        НовыйЭлемент.ПутьКДанным 	= "Дерево." + Колонка.Имя;
		НовыйЭлемент.УстановитьДействие("ПриИзменении","ПриоритетПриИзменении");
		
	КонецЦикла; // Для Каждого Колонка Из ДеревоОбъект.Колонки Цикл
			
КонецПроцедуры // Процедура ПоместитьМатрицуНаФорму(ПунктыВыдачи)	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
		ЗаполнитьСохраненнымиЗначениями();
	КонецЕсли; // Если ЗначениеЗаполнено(Объект.Организация) Тогда	
		
КонецПроцедуры // Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

&НаКлиенте
Процедура ПриоритетПриИзменении(Элемент)
	
	ТекущаяСтрока = ТекущийЭлемент.ТекущиеДанные;

	ИдентификаторКолонки	= Элемент.Имя; 

	Приоритет = ТекущаяСтрока[ИдентификаторКолонки];

	ПунктКуда = ТекущаяСтрока.Склад;

	ПараметрыПоиска	= Новый Структура;
	ПараметрыПоиска.Вставить("ИдентификаторКолонки",ИдентификаторКолонки);

	НайденныеСтроки	= Объект.ПунктВыдачи.НайтиСтроки(ПараметрыПоиска);

	Если НайденныеСтроки.Количество() = 0 Тогда	
		//Отказ = Истина;		
	Иначе
		Если Объект.ВидМатрицы	= ПредопределенноеЗначение("Перечисление.АЭС_ВидМатрицыРезервирования.ПоПунктамВыдачи") Тогда			
			ПунктОткуда	= НайденныеСтроки[0].ПунктВыдачи;	
		Иначе
			ПунктОткуда	= НайденныеСтроки[0].СкладРезерва;	
		КонецЕсли; // Если Объект.ВидМатрицы	= ПредопределенноеЗначение("Перечисление.АЭС_ВидМатрицыРезервирования.ПоПунктамВыдачи") Тогда
	КонецЕсли; // Если НайденныеСтроки.Количество() = 0 Тогда
		
	ПараметрыПоиска	= Новый Структура;
	ПараметрыПоиска.Вставить("ПунктКуда"	,ПунктКуда);
	ПараметрыПоиска.Вставить("ПунктОткуда",ПунктОткуда);
	
	НайденныеПриоритеты	= Объект.ТаблицаПриоритетов.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеПриоритеты.Количество() = 0 Тогда
		
		Если Объект.ВидМатрицы	= ПредопределенноеЗначение("Перечисление.АЭС_ВидМатрицыРезервирования.ПоПунктамВыдачи") Тогда
			нстр	= Объект.ТаблицаПриоритетов.Добавить();
		Иначе
			нстр	= Объект.ПриоритетыПоСкладам.Добавить();	
		КонецЕсли; // Если Объект.ВидМатрицы	= ПредопределенноеЗначение("Перечисление.АЭС_ВидМатрицыРезервирования.ПоПунктамВыдачи") Тогда	
				
		нстр.ПунктКуда		= ПунктКуда;
		нстр.ПунктОткуда	= ПунктОткуда;
		нстр.Приоритет		= Приоритет;
		
	Иначе
		
		Если Приоритет = 0 Тогда
			Объект.ТаблицаПриоритетов.Удалить(НайденныеПриоритеты[0].ПолучитьИдентификатор());	
		Иначе	
			
			НайденнаяСтрока = НайденныеПриоритеты[0];
			НайденнаяСтрока.Приоритет	= Приоритет;
	
		КонецЕсли; // Если Приоритет <> 0 Тогда	
		
	КонецЕсли; // Если НайденныеПриоритеты.Количество() = 0 Тогда
		
КонецПроцедуры // Процедура ПриоритетПриИзменении(Элемент)

&НаСервере
Процедура ЗаполнитьСохраненнымиЗначениями()
	
	Если Объект.ВидМатрицы	= Перечисления.АЭС_ВидМатрицыРезервирования.ПоПунктамВыдачи Тогда
		ТаблицаПриоритетов 	= Объект.ТаблицаПриоритетов;
	Иначе
		ТаблицаПриоритетов 	= Объект.ПриоритетыПоСкладам;	
	КонецЕсли;
	ТаблицаПунктВыдачи	= Объект.ПунктВыдачи;
	
	ТЗДерево = РеквизитФормыВЗначение("Дерево");
	
	Для каждого СтрокаДерева Из ТЗДерево.Строки Цикл
		
		ПараметрыПоиска	= Новый Структура;
		ПараметрыПоиска.Вставить("ПунктКуда",СтрокаДерева.Склад);
		
		НайденныеСтроки	= ТаблицаПриоритетов.НайтиСтроки(ПараметрыПоиска);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ПараметрыПоискаПунктВыдачи	= Новый Структура;
			Если Объект.ВидМатрицы	= Перечисления.АЭС_ВидМатрицыРезервирования.ПоПунктамВыдачи Тогда
				ПараметрыПоискаПунктВыдачи.Вставить("ПунктВыдачи",НайденнаяСтрока.ПунктОткуда);
			Иначе
				ПараметрыПоискаПунктВыдачи.Вставить("СкладРезерва",НайденнаяСтрока.ПунктОткуда);
			КонецЕсли;
			
			НайденныеСтрокиСоответствия	= ТаблицаПунктВыдачи.НайтиСтроки(ПараметрыПоискаПунктВыдачи);
			
			Если НайденныеСтрокиСоответствия.Количество()<> 0 Тогда
				СтрокаДерева[НайденныеСтрокиСоответствия[0].ИдентификаторКолонки] = НайденнаяСтрока.Приоритет;	
			КонецЕсли; // Если НайденныеСтрокиСоответствия.Количество()<> 0 Тогда	
			
		КонецЦикла; // Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл	
		
	КонецЦикла;	// Для каждого СтрокаДерева Из ТЗДерево Цикл
	
	ЗначениеВРеквизитФормы(ТЗДерево, "Дерево");
	
КонецПроцедуры // Процедура ЗаполнитьСохраненнымиЗначениями()
