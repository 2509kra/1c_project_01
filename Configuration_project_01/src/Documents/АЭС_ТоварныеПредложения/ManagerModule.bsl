
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаТоварныхПредложений(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);	
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаТоварныхПредложений(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "АЭС_ТорговыеПредложения";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
		
	ТекстЗапроса ="
		|ВЫБРАТЬ
		|	Товары.Ссылка       				КАК Ссылка,
		|	Товары.Ссылка.Склад     			КАК Склад,
		|	Товары.Ссылка.Организация   		КАК Организация, 
		|	Товары.Ссылка.Подразделение   		КАК Подразделение,
		|	Товары.Ссылка.ТипОперации   		КАК ТипОперации,
		|	Товары.Ссылка.Контрагент   			КАК Контрагент,
		|	Товары.Ссылка.СоглашениеСКлиентом	КАК СоглашениеСКлиентом,
		|	Товары.Ссылка.ВидЦеныКонтрагента	КАК ВидЦеныКонтрагента,
		|	Товары.Ссылка.ВидЦены   			КАК ТипЦены,
		|	Товары.Ссылка.Дата					КАК ПЕРИОД,
		|	Товары.Номенклатура 				КАК Номенклатура
		|ИЗ
		|	Документ.АЭС_ТоварныеПредложения.Товары КАК Товары
		|
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	
		|СГРУППИРОВАТЬ ПО
		|	Товары.Ссылка,
		|	Товары.Номенклатура
		|
		|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗарегистрироватьТорговыеПредложенияДляВыгрузки(ДокументСсылка) Экспорт
		
	Запрос	= Новый Запрос;
	ТекстЗапроса	= "	
		|ВЫБРАТЬ
		|	Б_ОбменССайтом.Ссылка КАК УзелОбмена,
		|	ТоварныеПредложения.Номенклатура КАК Номенклатура
		|ИЗ
		|	ПланОбмена.Б_ОбменССайтом КАК Б_ОбменССайтом,
		|	Документ.АЭС_ТоварныеПредложения.Товары КАК ТоварныеПредложения
		|ГДЕ
		|	НЕ Б_ОбменССайтом.ЭтотУзел
		|	И НЕ Б_ОбменССайтом.ПометкаУдаления
		|	И Б_ОбменССайтом.ОбменТоварами
		|	И Б_ОбменССайтом.ВыгружатьТолькоИзменения
		|	И ТоварныеПредложения.Ссылка В (&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	
	Запрос.Текст	= ТекстЗапроса;
	Выборка	= Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПланыОбмена.ЗарегистрироватьИзменения(Выборка.УзелОбмена,Выборка.Номенклатура);
		
	КонецЦикла; // Пока Выборка.Следующий() Цикл
		
КонецПроцедуры // Процедура ЗарегистрироватьТорговыеПредложенияДлявыгрузки()	

#КонецОбласти

#Область Прочее

Функция ЗаполнитьТовары(ТипЗаполнения,ТипОперации,Организация,Контрагент,Дата,БизнесРегион) Экспорт
	
	Запрос	= Новый Запрос;
	
	Если ТипОперации	= Перечисления.АЭС_ВидТорговогоПредложения.Атом Тогда
			
		Если ТипЗаполнения = "1" Тогда 
			
			ТекстЗапроса	= "
				|ВЫБРАТЬ
				|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
				|	СвободныеОстаткиОстатки.Номенклатура.Код КАК Код,
				|	СвободныеОстаткиОстатки.Номенклатура.Артикул КАК Артикул
				|ИЗ
				|	РегистрНакопления.СвободныеОстатки.Остатки(
				|			&ДатаСреза,
				|			Склад.БизнесРегион = &БизнесРегион 
				|			И НЕ Склад.СкладОтветственногоХранения) КАК СвободныеОстаткиОстатки
				|
				|УПОРЯДОЧИТЬ ПО
				|	СвободныеОстаткиОстатки.Номенклатура.Наименование";
		ИначеЕсли ТипЗаполнения = "2" Тогда
			
			ТекстЗапроса	= "
				|ВЫБРАТЬ
				|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
				|	СвободныеОстаткиОстатки.Номенклатура.Код КАК Код,
				|	СвободныеОстаткиОстатки.Номенклатура.Артикул КАК Артикул
				|ИЗ
				|	РегистрНакопления.СвободныеОстатки.Остатки(
				|			&ДатаСреза,
				|			Склад.БизнесРегион = &БизнесРегион) КАК СвободныеОстаткиОстатки
				|
				|УПОРЯДОЧИТЬ ПО
				|	СвободныеОстаткиОстатки.Номенклатура.Наименование";

			
		ИначеЕсли ТипЗаполнения = "3" Тогда
			
			ТекстЗапроса	= "
				|ВЫБРАТЬ
				|	Документ.Организация КАК Организация,
				|	Документ.Регистратор КАК Регистратор
				|ПОМЕСТИТЬ ДокРегистратор
				|ИЗ
				|	РегистрСведений.АЭС_АктуальныеПриоритеты.СрезПоследних(
				|			,
				|			Организация = &Организация) КАК Документ
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ПриоритетыСкладов.Склад КАК Склад
				|ПОМЕСТИТЬ ВТ_Склады	
				|ИЗ
				|	РегистрСведений.АЭС_ПриоритетыСкладов.СрезПоследних(
				|			,
				|			Регистратор В
				|				(ВЫБРАТЬ
				|					Рег.Регистратор
				|				ИЗ
				|					ДокРегистратор КАК Рег)) КАК ПриоритетыСкладов
				|					
				|;
				|////////////////////////////////////////////////////////////////////////////////					
				|					
				|ВЫБРАТЬ
				|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
				|	СвободныеОстаткиОстатки.Номенклатура.Код КАК Код,
				|	СвободныеОстаткиОстатки.Номенклатура.Артикул КАК Артикул
				|ИЗ
				|	РегистрНакопления.СвободныеОстатки.Остатки(&ДатаСреза, Склад В (ВЫБРАТЬ Склады.Склад ИЗ ВТ_Склады КАК Склады )) КАК СвободныеОстаткиОстатки
				|
				|УПОРЯДОЧИТЬ ПО
				|	СвободныеОстаткиОстатки.Номенклатура.Наименование";
			
			Запрос.УстановитьПараметр("Организация",	Организация);
			
		КонецЕсли; // Если ТипЗаполнения = "1" Тогда	
		
	ИначеЕсли ТипОперации	= Перечисления.АЭС_ВидТорговогоПредложения.Консигнация Тогда
		
		ТекстЗапроса	= "
			|ВЫБРАТЬ
			|	АЭС_КонсигнантыПринципалыНоменклатуры.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ ТНоменклатуры
			|ИЗ
			|	РегистрСведений.АЭС_КонсигнантыПринципалыНоменклатуры КАК АЭС_КонсигнантыПринципалыНоменклатуры
			|ГДЕ
			|	АЭС_КонсигнантыПринципалыНоменклатуры.Организация = &Организация
			|	И АЭС_КонсигнантыПринципалыНоменклатуры.КонсигнантыПринципалы = &Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
			|	СвободныеОстаткиОстатки.Номенклатура.Код КАК Код,
			|	СвободныеОстаткиОстатки.Номенклатура.Артикул КАК Артикул
			|	ПОМЕСТИТЬ Остатки
			|ИЗ
			|	РегистрНакопления.СвободныеОстатки.Остатки(
			|			&ДатаСреза,
			|			Склад.БизнесРегион = &БизнесРегион
			|				И Склад.СкладОтветственногоХранения) КАК СвободныеОстаткиОстатки
			|;
			|////////////////////////////////				
			|ВЫБРАТЬ
			|	Выборка.Номенклатура,
			|	Выборка.Код,
			|	Выборка.Артикул
			|ИЗ
			|	Остатки КАК Выборка
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТНоменклатуры КАК ТНоменклатуры
			|		ПО Выборка.Номенклатура = ТНоменклатуры.Номенклатура
			|УПОРЯДОЧИТЬ ПО
			|	Выборка.Номенклатура.Наименование";
		
	 	Запрос.УстановитьПараметр("Организация",	Организация);
		Запрос.УстановитьПараметр("Контрагент",		Контрагент);

	КонецЕсли; // Если Объект.ТипОперации	= Перечисления.АЭС_ВидТорговогоПредложения.Атом Тогда
	
	Запрос.Текст	= ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаСреза",		Дата);
	Запрос.УстановитьПараметр("БизнесРегион",	БизнесРегион);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции // Функция ЗаполнитьТовары()	

//Формирование префикса документа
//
// Параметры:
// Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//  Строка - строковое значение префикса документа
//
Функция УстановитьПрефикс(Организация) Экспорт
	
	ПрефиксИнформационнойБазы = "";
	ПрефиксОрганизации        = "";
	
	// устанавливаем привилегированный режим
	УстановитьПривилегированныйРежим(Истина);
	
	ПрефиксИнформационнойБазы = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
	СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПрефиксИнформационнойБазы, 2, "0", "Слева");

	ПрефиксОрганизации = ПолучитьФункциональнуюОпцию("ПрефиксыОрганизаций", Новый Структура("Организация", Организация));
	
	// если задана пустая ссылка на организацию
	Если ПрефиксОрганизации = Ложь Тогда
		
		ПрефиксОрганизации = "";
		
	КонецЕсли;
	
	СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПрефиксОрганизации, 2, "0", "Слева");
	
	ОсновнойПрефикс = ПрефиксОрганизации + ПрефиксИнформационнойБазы;
	
	Разделитель = ?(ПустаяСтрока(ОсновнойПрефикс), "", "-");
	
	Префикс = ОсновнойПрефикс + Разделитель + Префикс;
	
	// если префикс не задан, то устанавливаем значение по умолчанию
	Если ПустаяСтрока(Префикс) Тогда
		
		Префикс = "0";
		
	КонецЕсли;
	
	Возврат Префикс;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
