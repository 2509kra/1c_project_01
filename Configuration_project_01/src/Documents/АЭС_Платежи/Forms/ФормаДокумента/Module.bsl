
&НаКлиенте
Перем КэшированныеЗначения;//используется механизмом обработки изменения реквизитов ТЧ

&НаСервере
Процедура ОбновитьТаблицуСчетчиковПоказанийИзСТЕКНаСервере()
	
	ПерезаполнитьТаблицуСчетчиков = Истина;
	АЭС_Сервер.ФормаДокументаАЭС_Платежи_ЗаполнитьТаблицуСчетчиковИПоказанияИзСТЕК(Объект, Элементы, ПерезаполнитьТаблицуСчетчиков);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуСчетчиковПоказанийИзСТЕК(Команда)
	ОбновитьТаблицуСчетчиковПоказанийИзСТЕКНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Не ЗначениеЗаполнено(Объект.ПериодПлатежа) Тогда
		Объект.ПериодПлатежа = ДобавитьМесяц(ТекущаяДата(), -1);
	КонецЕсли;
	Если Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.РозничныйПокупатель") или ЗначениеЗаполнено(Объект.Заказ) Тогда 
		Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.СтраницаОсновнаяДеятельность.Видимость = Ложь;
		Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.СтраницаСчетчикиПоказания.Видимость = Ложь;
		Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.СтраницаПродажаТоваров.Видимость = Истина;
		Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.СтраницаСторонниеУслуги.Видимость = Ложь;
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.СтраницаПродажаТоваров; 
	ИначеЕсли Объект.АгентскийПлатеж Тогда
		Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.СтраницаОсновнаяДеятельность.Видимость = Ложь;
		Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.СтраницаСчетчикиПоказания.Видимость = Ложь;
		Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.СтраницаПродажаТоваров.Видимость = Ложь;
		Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.СтраницаСторонниеУслуги.Видимость = Истина;
		Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.СтраницаСторонниеУслуги;
		Элементы.Заказ.Видимость = Ложь;
	Иначе
		Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.СтраницаОсновнаяДеятельность.Видимость = Истина;
		Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.СтраницаСчетчикиПоказания.Видимость = Истина;
		Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.СтраницаПродажаТоваров.Видимость = Истина;
		Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.СтраницаСторонниеУслуги.Видимость = Ложь;
		Элементы.Заказ.Видимость = Ложь;
	КонецЕсли;	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") тогда
		Элементы.Заказ.ТолькоПросмотр = Истина;
	КонецЕсли;
	Если Объект.ШтрихКод и Не ЗначениеЗаполнено(Объект.Ссылка) и Не Объект.АгентскийПлатеж Тогда
		ЗаполнитьТаблицуЗадолженности(Неопределено);	
		РаспределитьОплату(Объект.СуммаДокумента);
		РассчитатьКомиссиюОснДеятельность();
		РасчтатьСуммуДокумента();
	ИначеЕсли Объект.Товары.Количество()>0 и Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекущаяСтрока = Элементы.Товары.ДанныеСтроки(0);
		НоменклатураПриИзменени(ТекущаяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьОплату(СуммаДокумента) 
	Если ЗначениеЗаполнено(СуммаДокумента) Тогда
		мСумма = СуммаДокумента;
		Для каждого СТЧ Из Объект.ОсновнаяДеятельность Цикл
			Если мСумма<=0 Тогда
				Прервать;
			ИначеЕсли СТЧ.Сальдо>=мСумма Тогда
				СТЧ.Сумма = мСумма;
			ИначеЕсли СТЧ.Сальдо<мСумма Тогда
				СТЧ.Сумма = СТЧ.Сальдо;
			КонецЕсли;
			мСумма = мСумма - СТЧ.Сальдо;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
		
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.АЭС_Платежи.ФормаДокумента.Команда.ОткрытьПодбор");
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='чек ККМ'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидЦены", Объект.ВидЦены);
	ПараметрыФормы.Вставить("РежимПодбораБезСоглашенийСКлиентами ", Истина);
	ПараметрыФормы.Вставить("ВариантАнализаНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.РозничнаяТорговля"));
	ПараметрыФормы.Вставить("РежимОтбораПоАссортименту", КонтролироватьАссортимент);
	
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Ложь);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                      Ложь);
	ПараметрыФормы.Вставить("СкрыватьПодакцизныеТовары",               Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	ПараметрыФормы.Вставить("ОтображатьФлагСкрыватьПодакцизныеТовары", Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	ПараметрыФормы.Вставить("Склад",                                   Объект.Склад);
	ПараметрыФормы.Вставить("Валюта",                                  Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок",                               ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                                    Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                Объект.Ссылка);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                  Истина);
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий",                  ПараметрыУказанияСерий);
	
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = тип("ДокументСсылка.ЗаказКлиента") Тогда
		Объект.Заказ = ВыбранноеЗначение;
		ДоступностьПодбора();
		Объект.Товары.Очистить();
		ЗаполнитьДокументНаОснованииЗаказа();
		ТЧ = "Товары";
	ИначеЕсли Не Элементы.ГруппаСтраниц.ТекущаяСтраница.ПодчиненныеЭлементы.Найти("Товары") = Неопределено Тогда 
		ТЧ = "Товары";
	ИначеЕсли Не Элементы.ГруппаСтраниц.ТекущаяСтраница.ПодчиненныеЭлементы.Найти("СторонниеУслуги") = Неопределено Тогда
		ТЧ = "СторонниеУслуги";	
	Иначе
		Сообщить("Что то пошло не так"	);
		ТЧ=""
	КонецЕсли;
	
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтотОбъект, ПараметрыУказанияСерий, ВыбранноеЗначение);
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ТЧ);
		//ПересчитатьДокументНаКлиенте();
		
		ПодключитьОбработчикОжидания("УстановитьТекущийЭлементНаТабличнуюЧасть"+ТЧ, 0.1, Истина);
	КонецЕсли;
	ОпределитьФормуОплаты(Неопределено, ТЧ);	
	РасчтатьСуммуДокумента();
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ТЧ)
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ЗаполнитьФлагАлкогольнаяПродукция", Истина);
	ПараметрыЗаполнения.Вставить("ИмяКолонки", "НоменклатураЕГАИС");
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект[ТЧ].Добавить();
		
		Если ТЧ = "Товары" Тогда 
			СписокСвойств = "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Упаковка, Серия, Цена, 
				|КоличествоУпаковок, ПроцентРучнойСкидки";
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, СписокСвойств);
			//ТекущаяСтрока.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой");
		ИначеЕсли ТЧ = "СторонниеУслуги" Тогда
			//СписокСвойств = "Номенклатура";
			ТекущаяСтрока.Номенклатура			= СтрокаТовара.Номенклатура;
			ТекущаяСтрока.Характеристика		= СтрокаТовара.Характеристика;
			ТекущаяСтрока.Сумма 				= СтрокаТовара.Цена *  СтрокаТовара.КоличествоУпаковок;
			ТекущаяСтрока.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой");
		КонецЕсли;
		
		
		СтруктураДействий = Новый Структура;
		Если ТЧ = "Товары" Тогда 
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		ИначеЕсли ТЧ = "СторонниеУслуги" Тогда 
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		ИначеЕсли ТЧ = "ОсновнаяДеятельность" Тогда
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		КонецЕсли;
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
		Если ТЧ = "Товары" Тогда 
			СтруктураДействий.Вставить("ЗаполнитьПомещение", Новый Структура("Склад, Номенклатура, Характеристика", Объект.Склад, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика));
			СтруктураДействий.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", ТекущийПродавец));
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			//СтруктураДействий.Вставить("ЗаполнитьПризнакМаркируемаяПродукция", Новый Структура("Номенклатура", "МаркируемаяПродукция"));
			//СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
			СтруктураДействий.Вставить("ЗаполнитьНоменклатуруЕГАИС", ПараметрыЗаполнения);
			//СтруктураДействий.Вставить("ЗаполнитьИндексАкцизнойМарки");
			//СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));			
			
			Если КонтролироватьАссортимент Тогда
				
				СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
				СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
				СтруктураПроверкиАссортимента.Склад = Объект.Склад;
				СтруктураПроверкиАссортимента.Дата = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
				СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина или запрещен к продаже.'");
				СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныПродажи";
				СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
				СтруктураПроверкиАссортимента.РазрешатьДобавление = Ложь;
				
				СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);
				
			КонецЕсли;
		
			СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
				ЭтотОбъект.ИмяФормы, "Товары"));
		КонецЕсли;	
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		Если ТекущаяСтрока.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная") Тогда 
			ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120");
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	//НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМ));
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Элементы[ТЧ].ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	//ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина = ТолькоПросмотр);
	//ОпределитьФормуОплаты(Неопределено);	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.АЭС_Платежи));
	НастроитьПользователя();
	НастроитьПраваДляПользователя(Пользователи.ТекущийПользователь());
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ТекущийОбъект, Документы.АЭС_Платежи));
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
 	УстановитьУсловноеОформление();
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.АЭС_Платежи));
	УстановитьЗначенияПоНастройкам();
	НастроитьПользователя();
	
	Элементы.ГруппаДополнительно.ТолькоПросмотр = Не РольДоступна("ПолныеПраваФОП") И Не РольДоступна("АЭС_ПолныеПрава");
	
	ПлатежПробит = Объект.Статус = Перечисления.СтатусыЧековККМ.Пробит;
	
	Элементы.СтраницаОсновнаяДеятельность.ТолькоПросмотр	= ПлатежПробит;
	Элементы.СтраницаСчетчикиПоказания.ТолькоПросмотр		= ПлатежПробит;
	Элементы.СтраницаПродажаТоваров.ТолькоПросмотр			= ПлатежПробит;
	Элементы.СтраницаСторонниеУслуги.ТолькоПросмотр			= ПлатежПробит;

	Если Объект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		
		МассПартнеров = АЭС_Сервер.ПолучитьМассивПартнеровПоУмолчанию();
		Если МассПартнеров.Найти(Объект.Контрагент.Партнер) <> Неопределено Тогда
			ТаблицаСтатуса = АЭС_Стек.ПолучитьСтатусЛицевогоСчетаЮЛ(Объект.Контрагент.НомерЛС, Объект.Контрагент.ИНН, Объект.Контрагент.Партнер, Неопределено);
			Если ТаблицаСтатуса <> Неопределено Тогда
				СуммаКассовыхПлатежей = АЭС_КлиентСервер.ПолучитьСуммаКассовыхПлатежей(ТаблицаСтатуса);
			КонецЕсли;
		КонецЕсли;
		АЭС_КлиентСервер.ПревышенЛимитНаличныхПлатежей(СуммаКассовыхПлатежей, ЭтотОбъект);
	КонецЕсли;	

	ОчередьОтправкиСТЕК.Параметры.УстановитьЗначениеПараметра("Платеж", Объект.Ссылка);

	Если РольДоступна("ПолныеПраваФОП") Или РольДоступна("АЭС_ПолныеПрава") Тогда
		//!!!!временно
		Элементы.СтраницаПродажаТоваров.ПодчиненныеЭлементы.Товары.ПодчиненныеЭлементы.ТоварыКонсигнантПринципал.Доступность = Истина;
	Иначе
		Элементы.ГруппаИсправленияБезКонтроля.Видимость = Ложь;
	КонецЕсли;
	Если Не Объект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Если Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.СтраницаОсновнаяДеятельность.Видимость Тогда             
			//ЮЛ колонки. По умолчанию видимость Ложь
			Элементы.ОсновнаяДеятельность.ПодчиненныеЭлементы.ОсновнаяДеятельностьПолеНомерСчФ.Видимость = Истина;
			//ФЛ колонки. По умолчанию видимость истина
			Элементы.ОсновнаяДеятельность.ПодчиненныеЭлементы.Таблица1ПериодПлатежа.Заголовок = "Дата";
			Элементы.ОсновнаяДеятельность.ПодчиненныеЭлементы.ОсновнаяДеятельностьНомерУслуги.Заголовок = "Аналитика";
			Элементы.ОсновнаяДеятельность.ПодчиненныеЭлементы.ОсновнаяДеятельностьПоле1.Видимость = Ложь;
			Элементы.ОсновнаяДеятельность.ПодчиненныеЭлементы.ОсновнаяДеятельностьПоле2.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементНаТабличнуюЧастьТовары()
	
	ТекущийЭлемент = Элементы.Товары;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементНаТабличнуюЧастьСторонниеУслуги()
	ТекущийЭлемент = Элементы.СторонниеУслуги;
КонецПроцедуры

&НаКлиенте
Процедура ПродажаТоваровНоменклатураПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	НоменклатураПриИзменени(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменени(ТекущаяСтрока); 
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ЗаполнитьФлагАлкогольнаяПродукция", Истина);
	ПараметрыЗаполнения.Вставить("ИмяКолонки", "НоменклатураЕГАИС");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если КонтролироватьАссортимент Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	СтруктураДействий.Вставить("ЗаполнитьПомещение", Новый Структура("Склад, Номенклатура, Характеристика", Объект.Склад, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика));
	СтруктураДействий.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", ТекущийПродавец));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакМаркируемаяПродукция", Новый Структура("Номенклатура", "МаркируемаяПродукция"));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруЕГАИС", ПараметрыЗаполнения);
	СтруктураДействий.Вставить("ЗаполнитьИндексАкцизнойМарки");
	
	Если КонтролироватьАссортимент Тогда
		СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
		СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
		СтруктураПроверкиАссортимента.Склад = Объект.Склад;
		СтруктураПроверкиАссортимента.Дата = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
		СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина или запрещен к продаже.'");
		СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныПродажи";
		СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
		СтруктураПроверкиАссортимента.РазрешатьДобавление = Ложь;
		
		СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);
	КонецЕсли;

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтотОбъект.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	//!!!!Сидоров - коментим пока
	//СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
	ОпределитьФормуОплаты(Неопределено, "Товары");	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	Если ИмяСобытия = "СчитанаКартаЛояльности"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		//СчитанаКартаЛояльности(Параметр.КартаЛояльности);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПолученыСообщения"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		//ПолученыСообщения(Параметр.Сообщения);
		//ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыбранБыстрыйТовар"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, Параметр);
		ПараметрыТовара.Продавец = ТекущийПродавец;
		ПараметрыТовара.КоличествоУпаковок = Параметр.КоличествоУпаковок;
		
		СтруктураПараметровОтбора = Новый Структура("Валюта, Дата, ВидЦены, Номенклатура, Характеристика, Упаковка");
		ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, Параметр);
		СтруктураПараметровОтбора.Валюта = Объект.Валюта;
		СтруктураПараметровОтбора.Дата = ТекущаяДата();
		СтруктураПараметровОтбора.ВидЦены = Объект.ВидЦены;
		ПараметрыТовара.Цена = ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
		
		ДобавитьВКорзину(ПараметрыТовара);
		
	КонецЕсли;
	
	Если ИмяСобытия = "АвторизованПользователь" Тогда
		
		Если Параметр.Режим = "СменитьПрава" Тогда
			НастроитьПраваДляПользователя(Параметр.Пользователь);
			//ПересчитатьДокументНаКлиенте();
		ИначеЕсли Параметр.Режим = "ЗакрытьЧекККМ" Тогда
			ПринудительноеЗавершениеРаботы = Истина;
			Если Открыта() Тогда
				Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЧтениеКомандФормы"
		И Параметр.Форма = УникальныйИдентификатор Тогда
		
		Оповестить("ЧтениеКомандФормы", Новый Структура("Форма, ФормаВладелец, АдресВоВременномХранилище", Параметр.ФормаВладелец, УникальныйИдентификатор, ПолучитьКомандыФормы(Параметр.ФормаВладелец)));
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_РедактированиеКомплекта"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		ПриОкончанииРедактированияНабора(Параметр.АдресВоВременномХранилище);
		//ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	
	Если ИмяСобытия = "РедактироватьНабор"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ПараметрыКомплекта = Новый Структура;
		ПараметрыКомплекта.Вставить("НоменклатураНабора", Параметр.НоменклатураНабора);
		ПараметрыКомплекта.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
		ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора(ЭтотОбъект));
		
		АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
		ПараметрыОткрытия.Вставить("НоменклатураНабора",   Параметр.НоменклатураНабора);
		ПараметрыОткрытия.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
		ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
		ПараметрыОткрытия.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
		ПараметрыОткрытия.Вставить("ВидЦены", Объект.ВидЦены);
		ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
		ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
		ПараметрыОткрытия.Вставить("ЗапретРедактированияЦены", Истина);
		ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
		
		ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор);
		
	КонецЕсли;
	
	
	Если ИмяСобытия = "ИзменениеКассовойСмены" Тогда
		СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(Объект.КассаККМ);
		ЗаполнитьЗначенияСвойств(Объект, СтруктураСостояниеКассовойСмены,, "Кассир");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресНабораВоВременномХранилище(Параметры) Экспорт
	
	Возврат НаборыСервер.АдресНабораВоВременномХранилище(ЭтотОбъект, Параметры, "Товары");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора)
	Возврат ПродажиСервер.ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
КонецФункции

&НаСервере
Функция ПолучитьКомандыФормы(УникальныйИдентификатор)
	
	КомандыФормы = Новый Массив;
	Для Каждого КомандаФормы Из Команды Цикл
		Если НЕ КомандаФормы.СочетаниеКлавиш.Клавиша = Клавиша.Нет Тогда
			КомандыФормы.Добавить(Новый Структура("ИмяКоманды, Заголовок, СочетаниеКлавиш", КомандаФормы.Имя, КомандаФормы.Заголовок, КомандаФормы.СочетаниеКлавиш));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(КомандыФормы, УникальныйИдентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КолонкиНабора(Форма)
	
	Колонки = Новый Массив;
	Колонки.Добавить("Номенклатура");
	Колонки.Добавить("Характеристика");
	
	Колонки.Добавить("Цена");
	Колонки.Добавить("Упаковка");
	Колонки.Добавить("Количество");
	Колонки.Добавить("КоличествоУпаковок");
	
	Если Форма.ИспользоватьРучныеСкидкиВПродажах Тогда
		Колонки.Добавить("ПроцентРучнойСкидки");
		Колонки.Добавить("СуммаРучнойСкидки");
	КонецЕсли;
	Если Форма.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
		Колонки.Добавить("ПроцентАвтоматическойСкидки");
		Колонки.Добавить("СуммаАвтоматическойСкидки");
	КонецЕсли;
	
	Колонки.Добавить("СтавкаНДС");
	Колонки.Добавить("СуммаНДС");
	Колонки.Добавить("Сумма");
	
	Возврат Колонки;
	
КонецФункции

&НаСервере
Процедура ПриОкончанииРедактированияНабора(АдресВоВременномХранилище)
	
	ИзменятьКоличество = Не ТолькоПросмотр;
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПомещение", Новый Структура("Склад", Объект.Склад));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", ТекущийПродавец));
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	
	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить("Данные", ПолучитьИзВременногоХранилища(АдресВоВременномХранилище));
	ПараметрыДанных.Вставить("СтруктураДействийСИзмененнымиСтроками", СтруктураДействийСИзмененнымиСтроками);
	ПараметрыДанных.Вставить("СтруктураДействийСДобавленнымиСтроками", СтруктураДействийСДобавленнымиСтроками);
	ПараметрыДанных.Вставить("КолонкиНабора", КолонкиНабора(ЭтотОбъект));
	
	НаборыСервер.ПриОкончанииРедактированияНабора(ЭтотОбъект, "Товары", ПараметрыДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзину(ПараметрыТовара)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	НовыеСтроки = Новый Массив;
	
	Если ЗапрашиватьКоличество Тогда
		
		ПараметрыФормы = Новый Структура("Склад, Номенклатура, Характеристика, ВидЦены, Упаковка, Цена, 
		|Дата, Валюта, РедактироватьЦену, РедактироватьВидЦены");
		
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыТовара);
		
		ПараметрыФормы.Склад = Объект.Склад;
		ПараметрыФормы.Дата = Объект.Дата;
		ПараметрыФормы.Валюта = Объект.Валюта;
		ПараметрыФормы.РедактироватьЦену = Ложь;
		ПараметрыФормы.РедактироватьВидЦены = Ложь;
		ПараметрыФормы.ВидЦены = Объект.ВидЦены;
		
		Если ПараметрыТовара.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор") Тогда
			ИмяФормыЗапросаКоличества = "Документ.ЧекККМ.Форма.ЗапросКоличестваНабор";
		Иначе
			ИмяФормыЗапросаКоличества = "Документ.ЧекККМ.Форма.ЗапросКоличества";
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("НовыеСтроки", НовыеСтроки);
		ДополнительныеПараметры.Вставить("ПараметрыТовара", ПараметрыТовара);
		ОткрытьФорму(
			ИмяФормыЗапросаКоличества,
			ПараметрыФормы,
			ЭтотОбъект,
			УникальныйИдентификатор,,,
			Новый ОписаниеОповещения("ЗапросКоличестваЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
	Иначе
		
		Если ПараметрыТовара.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор") Тогда
			
			ПараметрыКомплектующих = ПодборТоваровКлиентСервер.ПараметрыТовара();
			ЗаполнитьЗначенияСвойств(ПараметрыКомплектующих, ПараметрыТовара);
			ПараметрыКомплектующих.НоменклатураНабора   = ПараметрыТовара.Номенклатура;
			ПараметрыКомплектующих.ХарактеристикаНабора = ПараметрыТовара.Характеристика;
			ПараметрыКомплектующих.Вставить("ВариантКомплектацииНоменклатуры", Неопределено);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Дата",    Объект.Дата);
			ДополнительныеПараметры.Вставить("Валюта",  Объект.Валюта);
			ДополнительныеПараметры.Вставить("ВидЦены", Объект.ВидЦены);
			ДополнительныеПараметры.Вставить("Цена",    ПараметрыТовара.Цена);
			ПодобранныеТовары = НаборыВызовСервера.Комплектующие(ПараметрыКомплектующих, ДополнительныеПараметры);
			
			Для Каждого ПодобранныйТовар Из ПодобранныеТовары Цикл
				НовыеСтроки.Добавить(ПодобранныйТовар);
			КонецЦикла;
			
		Иначе
			
			Если Не ЗначениеЗаполнено(ПараметрыТовара.Упаковка) Тогда
				ПараметрыТовара.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(ПараметрыТовара.Номенклатура);	
			КонецЕсли;
			
			НовыеСтроки.Добавить(ПараметрыТовара);
			
		КонецЕсли;
		
		ПараметрыДанных = Новый Структура;
		ПараметрыДанных.Вставить("НовыеСтроки", НовыеСтроки);
		ПараметрыДанных.Вставить("ПараметрыТовара", ПараметрыТовара);
		
		ДобавитьВКорзинуФрагмент(ПараметрыДанных);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзинуФрагмент(ПараметрыДанных)
	
	НовыеСтроки = ПараметрыДанных.НовыеСтроки;
	ПараметрыТовара = ПараметрыДанных.ПараметрыТовара;
	
	ДобавитьВКорзинуНаСервере(ПараметрыТовара, НовыеСтроки);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВКорзинуНаСервере(ПараметрыТовара, НовыеСтроки)
	
	Для Каждого СтрокаТовара Из НовыеСтроки Цикл
		
		Если СтрокаТовара.Упаковка.Пустая() Тогда
			СтрокаТовара.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(СтрокаТовара.Номенклатура);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТовара.Цена) И ПараметрыТовара.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Набор Тогда
			СтруктураПараметровОтбора = Новый Структура("Валюта, Дата, ВидЦены, Номенклатура, Характеристика, Упаковка");
			ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, СтрокаТовара);
			СтруктураПараметровОтбора.Валюта = Объект.Валюта;
			СтруктураПараметровОтбора.Дата = ТекущаяДата();
			СтруктураПараметровОтбора.ВидЦены = Объект.ВидЦены;
			СтрокаТовара.Цена = ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("НоменклатураНабора",   СтрокаТовара.НоменклатураНабора);
		Отбор.Вставить("ХарактеристикаНабора", СтрокаТовара.ХарактеристикаНабора);
		Отбор.Вставить("Номенклатура",   СтрокаТовара.Номенклатура);
		Отбор.Вставить("Характеристика", СтрокаТовара.Характеристика);
		Отбор.Вставить("Упаковка",       СтрокаТовара.Упаковка);
		Отбор.Вставить("Цена",           СтрокаТовара.Цена);
		Отбор.Вставить("Помещение",      СтрокаТовара.Помещение);
		
		РезультатПоиска = Объект.Товары.НайтиСтроки(Отбор);
		
		Если РезультатПоиска.Количество() = 0 ИЛИ СтрокаТовара.Погрешность <> 0 Тогда
			
			ТекущаяСтрока = Объект.Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыТовара);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
			ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
			
			СтруктураДействий = Новый Структура;
			
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ЗаполнитьПомещение", Новый Структура("Склад", Объект.Склад));
			СтруктураДействий.Вставить("ЗаполнитьПродавца", Новый Структура("Продавец", ТекущийПродавец));
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомПогрешностиОкругления", СтрокаТовара.Погрешность);
			Если КонтролироватьАссортимент Тогда
				ДобавитьПроверкуАссортиментаВСтруктуруДействий(СтруктураДействий);
			КонецЕсли;
			
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
			
		Иначе
			
			ТекущаяСтрока = РезультатПоиска[0];
			
			ТекущаяСтрока.КоличествоУпаковок = СтрокаТовара.КоличествоУпаковок + ТекущаяСтрока.КоличествоУпаковок;
			
			СтруктураДействий = Новый Структура;
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
			Если КонтролироватьАссортимент Тогда
				ДобавитьПроверкуАссортиментаВСтруктуруДействий(СтруктураДействий);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущаяСтрока <> Неопределено Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПроверкуАссортиментаВСтруктуруДействий(СтруктураДействий)
	
	СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
	СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
	СтруктураПроверкиАссортимента.Склад = Объект.Склад;
	СтруктураПроверкиАссортимента.Дата = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
	СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина или запрещен к продаже.'");
	СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныПродажи";
	СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
	СтруктураПроверкиАссортимента.РазрешатьДобавление = Ложь;
	
	СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьИндексАкцизнойМарки");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПродавцаВТабличнойЧасти()
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Продавец) Тогда
			СтрокаТЧ.Продавец = ТекущийПродавец;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПраваДляПользователя(Пользователь)
	
	ПраваДоступа = НастройкиПродажДляПользователейСервер.ПраваДоступаРМК(Пользователь);
	
	Объект.Кассир = Пользователь;
	РеквизитыКассира = РозничныеПродажи.РеквизитыКассира(Пользователь);
	
	Если КассирМожетБытьПродавцом И Не МенеджерТорговогоЗалаМожетБытьПродавцом Тогда
		ТекущийПродавец = Пользователь;
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			СтрокаТЧ.Продавец = Пользователь;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоНастройкам()
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если Объект.Статус <> Перечисления.СтатусыЧековККМ.Пробит
		И Объект.Кассир <> ТекущийПользователь Тогда
		Объект.Кассир = ТекущийПользователь;
		ТекущийПродавец = ТекущийПользователь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастроитьПользователя()
		Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЕСТЬNULL(НастройкиРМК.ГорячиеКлавиши, НЕОПРЕДЕЛЕНО) КАК ГорячиеКлавиши,
	|	ЕСТЬNULL(НастройкиРМК.ГорячиеКлавиши.БыстрыеТовары, НЕОПРЕДЕЛЕНО) КАК БыстрыеТовары,
	|	ЕСТЬNULL(НастройкиРМК.ГорячиеКлавиши.КомандыФормы, НЕОПРЕДЕЛЕНО) КАК КомандыФормы,
	|	НастройкиРМК.КассирМожетБытьПродавцом КАК КассирМожетБытьПродавцом,
	|	НастройкиРМК.МенеджерТорговогоЗалаМожетБытьПродавцом КАК МенеджерТорговогоЗалаМожетБытьПродавцом,
	|	НастройкиРМК.ИспользоватьАвторизацию
	|ИЗ
	|	Справочник.НастройкиРМК КАК НастройкиРМК
	|ГДЕ
	|	НастройкиРМК.РабочееМесто = &РабочееМесто
	|	И НастройкиРМК.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Т.Ссылка
	|			ИЗ
	|				Справочник.НастройкиРМК.КассыККМ КАК Т
	|			ГДЕ
	|				Т.КассаККМ = &КассаККМ)");
	
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Запрос.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		//ГорячиеКлавиши            = Выборка.ГорячиеКлавиши;
		//ПринудительнаяАвторизация = Выборка.ИспользоватьАвторизацию;
		МенеджерТорговогоЗалаМожетБытьПродавцом = Выборка.МенеджерТорговогоЗалаМожетБытьПродавцом;
		КассирМожетБытьПродавцом  = Выборка.КассирМожетБытьПродавцом;
		
		//Если ЗначениеЗаполнено(ГорячиеКлавиши) Тогда
		//	РозничныеПродажи.НастроитьБыстрыеТоварыИГорячиеКлавиши(ЭтотОбъект, Выборка);
		//КонецЕсли;
		
	Иначе
		
		//ГорячиеКлавиши                          = Неопределено;
		//ПринудительнаяАвторизация               = Ложь;
		МенеджерТорговогоЗалаМожетБытьПродавцом = Ложь;
		КассирМожетБытьПродавцом                = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьНомерСекции(ВидОплаты, ФормаОплаты)
	ВидОплатыРодитель = ВидОплаты.Родитель;
	//ЮрФизЛицо = Объект.Контрагент.ЮрФизЛицо;
	ЭтоФизЛицо = ЭтоФизЛицо(Объект.Контрагент);
	Если ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная") Тогда 
		Если ВидОплатыРодитель = ПредопределенноеЗначение("Справочник.АЭС_ВидОплаты.ОсновнаяДеятельность")
			Или ВидОплатыРодитель = ПредопределенноеЗначение("Справочник.АЭС_ВидОплаты.ВозмещениеРасходовПоРешениюСудаИлиДобровольно")
			Тогда 
			Если  ЭтоФизЛицо Тогда //ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда 
				Возврат 1;
			Иначе
				Возврат 2;
			КонецЕсли;
		ИначеЕсли ВидОплатыРодитель = ПредопределенноеЗначение("Справочник.АЭС_ВидОплаты.ПродажаСобственныхТоваров") Тогда 
			Если  ЭтоФизЛицо Тогда //ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда 
				Возврат 4;
			Иначе
				Возврат 5;
			КонецЕсли;
		ИначеЕсли ВидОплатыРодитель = ПредопределенноеЗначение("Справочник.АЭС_ВидОплаты.ИныеОперации") Тогда
			Возврат 5;
		ИначеЕсли ВидОплатыРодитель = ПредопределенноеЗначение("Справочник.АЭС_ВидОплаты.ПродажаТоваровПоДоговоруКомиссииГруппа") Тогда
			Возврат 6;		
		ИначеЕсли ВидОплатыРодитель = ПредопределенноеЗначение("Справочник.АЭС_ВидОплаты.ПриемОплатыОтФизЛицВПользу3хЛиц_ПлатежныйАгент") Тогда
			Возврат 8;
		ИначеЕсли ВидОплатыРодитель = ПредопределенноеЗначение("Справочник.АЭС_ВидОплаты.ОтключениеПодключение") Тогда
			Возврат 3;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли  ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") Тогда 
		Возврат 7;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуЗадолженностиНаСервере()
	Если Объект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ТЗ = АЭС_Стек.ПолучитьТаблицуЗадолженностиФЛ(Объект.Контрагент.НомерЛС, Объект.Контрагент.ЮридическоеФизическоеЛицо, Объект.ПериодПлатежа);
		Если ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") Тогда
			СписокПартнеровПоУмолчанию = АЭС_Сервер.ПолучитьМассивПартнеровПоУмолчанию();
			ТЗ.Сортировать("Пени, НомерУслуги Убыв, МесяцДолга");
			ТЗ = СернутьТаблицуЗадолженности(ТЗ);
			УслугиБП = Новый СписокЗначений;
			УслугиБП.Добавить("401");
			УслугиБП.Добавить("402");
			УслугиБП.Добавить("403");
			Объект.ОсновнаяДеятельность.Очистить();
			Для Каждого стрТЗ Из ТЗ Цикл
				НомерУслуги = Формат(стрТЗ.НомерУслуги,"Л=ru; ЧДЦ=0"); 
				Если Объект.ВидДокумента = 1 Тогда 
					Если УслугиБП.НайтиПоЗначению(НомерУслуги) = Неопределено  Тогда
						Продолжить;
					КонецЕсли;
				ИначеЕсли Объект.ВидДокумента = 4 Тогда
					Если Не УслугиБП.НайтиПоЗначению(НомерУслуги) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				НовСтр = Объект.ОсновнаяДеятельность.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, стрТЗ);
				НовСтр.ПериодПлатежа = стрТЗ.ПериодС;
				НовСтр.ПериодПлатежаПо = стрТЗ.ПериодПо;
				НовСтр.НомерУслуги = АЭС_Сервер.ПолучитьУслугуСТЕКПоНомеру(НомерУслуги, Объект.Организация, стрТЗ.Пени, стрТЗ.НаименованиеУслугиКраткое, стрТЗ.НаименованиеУслугиПолное);//, стрТЗ.НаименованиеУслугиКраткое, стрТЗ.НаименованиеУслугиПолное);// = "", 
				СтавкаНДС 	= ?(ЗначениеЗаполнено(НовСтр.НомерУслуги), НовСтр.НомерУслуги.Номенклатура.СтавкаНДС, Перечисления.СтавкиНДС.НДС20);
				СкорректироватьСтавкуНДС(СтавкаНДС, Объект.Дата);
				СтруктураРезультата = АЭС_Сервер.ПолучитьНастройкиПлатежейПоНомеруУслуги(Объект.Организация, НомерУслуги,НовСтр.ПериодПлатежаПо, стрТЗ.Пени);
				Если СтруктураРезультата<> Неопределено Тогда 
					НовСтр.ВидОплаты = СтруктураРезультата.ВидОплаты;
					НовСтр.ПризнакСпособаРасчета = СтруктураРезультата.ПризнакСпособаРасчета; 
				КонецЕсли;
				
				Если НовСтр.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой Тогда
					НовСтр.СтавкаНДС = СтавкаНДС;
				Иначе
					НовСтр.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120;
				КонецЕсли;
				
				//НовСтр.IDИсполнителяСтек = стрТЗ.ИсполнительУслуг;  //запоминаем ID исполнителя услуг для выгрузки

				НовСтр.ИсполнительУслуг = НайтиИсполнителяПоставщика(стрТЗ.ИсполнительУслуг, стрТЗ.ИсполнительУслугНаименование, стрТЗ.ИсполнительУслугНаименованиеПолное);
				НовСтр.ПоставщикУслуг = НайтиИсполнителяПоставщика(стрТЗ.ПоствщикУслуг, стрТЗ.ПоствщикУслугНаименование, стрТЗ.ПоствщикУслугНаименованиеПолное);
				Если  НовСтр.ИсполнительУслуг <> Справочники.Партнеры.ПустаяСсылка() Тогда
					НовСтр.IDИсполнителя = стрТЗ.ИсполнительУслуг;					
				КонецЕсли;
				Если  НовСтр.ПоставщикУслуг <> Справочники.Партнеры.ПустаяСсылка() Тогда
					НовСтр.IDПоставщика = стрТЗ.ПоствщикУслуг;
				КонецЕсли;
                //МИС (
				//в Курске заполнено поле не исполнитель услуг, а поле поставщик услуг
				Если НовСтр.IDИсполнителя = 0 Тогда
					Если НовСтр.IDПоставщика <>0 И НовСтр.IDПоставщика <>1 Тогда
						НовСтр.ИсполнительУслуг = НовСтр.ПоставщикУслуг;
						НовСТр.IDИсполнителя = стрТЗ.ИсполнительУслуг;   //если подменяем исполнителя услуг на поставщика услуг для печати чеков, то нужно заполнить IDИсполнителя для выгрузки в СТЭК 
				    КонецЕсли;
				КонецЕсли;
				//) МИС
				Если ЗначениеЗаполнено(НовСтр.ИсполнительУслуг) Тогда 
					Если СписокПартнеровПоУмолчанию.Найти(НовСтр.ИсполнительУслуг) <> Неопределено Тогда
						НовСтр.АгентскийПлатеж = Ложь;
					Иначе
						НовСтр.АгентскийПлатеж = Истина;
					КонецЕсли;
				Иначе
					НовСтр.АгентскийПлатеж = Ложь;
				КонецЕсли;
			КонецЦикла;
			ТЗ_Свернуто = Объект.ОсновнаяДеятельность.Выгрузить();
			ТЗ_Свернуто.Свернуть("ВидОплаты, ПризнакСпособаРасчета, ПериодПлатежа, ПериодПлатежаПо, НомерУслуги, ФормаОплаты, Секция, СтавкаНДС, IDИсполнителя, ИсполнительУслуг, IDПоставщика, ПоставщикУслуг, АгентскийПлатеж", "Сальдо, Объем"); //НомерУслуги, НаименованиеУслугиКраткое, НаименованиеУслугиПолное
			Для Каждого СТЧ ИЗ ТЗ_Свернуто Цикл
				СТЧ.ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
				СТЧ.Секция = ПолучитьНомерСекции(СТЧ.ВидОплаты, СТЧ.ФормаОплаты); 
			КонецЦикла;
			//МИС (
			//если вариант заполнения 1 - то оставляем только собственные услуги, если 2 - только услуги исполнителя
			МассивСтрокКУдалению = Новый Массив;
			Если Объект.ВариантЗаполнения = 1 Тогда
				Для Каждого Стр Из ТЗ_Свернуто Цикл
					Если ЗначениеЗаполнено(Стр.ИсполнительУслуг) Тогда
						МассивСтрокКУдалению.Добавить(Стр);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли Объект.ВариантЗаполнения = 2 Тогда
				Для Каждого Стр Из ТЗ_Свернуто Цикл
					Если НЕ ЗначениеЗаполнено(Стр.ИсполнительУслуг) Тогда
						МассивСтрокКУдалению.Добавить(Стр);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
			
			Для Инд = 0 По МассивСтрокКУдалению.Количество()-1 Цикл
				ТЗ_Свернуто.Удалить(МассивСтрокКУдалению[Инд]);	
			КонецЦикла;
			
			Объект.ОсновнаяДеятельность.Загрузить(ТЗ_Свернуто);			
			РассчитатьКомиссиюОснДеятельность();
		КонецЕсли;
	Иначе
		ТЗ = АЭС_Стек.ПолучитьТаблицуЗадолженностиЮЛ(Объект.Контрагент.ИдДоговораЮЛ, Объект.Контрагент.Партнер, Объект.ПериодПлатежа);
		Если ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") Тогда
			ТЗ.Сортировать("Номер Убыв, Дата");
			//ТЗ = СернутьТаблицуЗадолженности(ТЗ);
			Объект.ОсновнаяДеятельность.Очистить();
			Для Каждого СТЗ Из ТЗ Цикл  
				Если ЗначениеЗаполнено(СТЗ.Аналитика) Тогда 
					НомерУслуги = СокрЛП(СТЗ.Аналитика); 
				Иначе
					НомерУслуги = "ЭЛЕКТРОЭН"; 
				КонецЕсли;
				
				НовСтр = Объект.ОсновнаяДеятельность.Добавить();
				НовСтр.ПериодПлатежа = СТЗ.Дата;
				//НовСтр.ПериодПлатежаПо = СТЗ.Дата;
				НовСтр.НомерСчФ = СТЗ.Номер;
				НовСтр.НомерУслуги = АЭС_Сервер.ПолучитьУслугуСТЕКПоНомеру(НомерУслуги, Объект.Организация, СТЗ.Пени);//, СТЗ.НаименованиеУслугиКраткое, СТЗ.НаименованиеУслугиПолное);// = "", 
				СтавкаНДС 	= ?(ЗначениеЗаполнено(НовСтр.НомерУслуги), НовСтр.НомерУслуги.Номенклатура.СтавкаНДС, Перечисления.СтавкиНДС.НДС20);
				СкорректироватьСтавкуНДС(СтавкаНДС, Объект.Дата);
				НовСтр.СтавкаНДС = СтавкаНДС;
				НовСтр.Сальдо = СТЗ.Сальдо;
				СтруктураРезультата = АЭС_Сервер.ПолучитьНастройкиПлатежейПоНомеруУслуги(Объект.Организация, НомерУслуги, СТЗ.Дата, СТЗ.Пени);
				Если СтруктураРезультата<> Неопределено Тогда 
					НовСтр.ВидОплаты = СтруктураРезультата.ВидОплаты;
					НовСтр.ПризнакСпособаРасчета = СтруктураРезультата.ПризнакСпособаРасчета; 		
				КонецЕсли;
				НовСтр.ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
				НовСтр.Секция = ПолучитьНомерСекции(НовСтр.ВидОплаты, НовСтр.ФормаОплаты);
			КонецЦикла;
		КонецЕсли;
		
		//Сообщить("Функция временно недоступна!" + Символы.ПС + "Информацию о задолженности можно получить в карточке контрагента.");
		
	КонецЕсли;
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();	
КонецПроцедуры

&НаСервере
Функция НайтиИсполнителяПоставщика(ИдентификаторПартнера,НаименованиеПартнера, НаименованиеПартнераПолное)
	Если ИдентификаторПартнера = null Тогда
		Возврат Неопределено;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АЭС_ИсполнителиПостащикиСтек.Партнер КАК Партнер
	               |ИЗ
	               |	РегистрСведений.АЭС_ИсполнителиПостащикиСтек КАК АЭС_ИсполнителиПостащикиСтек
	               |ГДЕ
	               |	АЭС_ИсполнителиПостащикиСтек.IDПартнера = &IDПартнера
	               |	И АЭС_ИсполнителиПостащикиСтек.Организация = &Организация";
	
	Запрос.УстановитьПараметр("IDПартнера",  ИдентификаторПартнера);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Партнер;
	Иначе
		Возврат Справочники.Партнеры.ПустаяСсылка();
		//Партнер = Справочники.Партнеры.НайтиПоНаименованию(НаименованиеПартнера);
		//Если Партнер = Справочники.Партнеры.ПустаяСсылка() Тогда
		//	Партнер = Справочники.Партнеры.СоздатьЭлемент();
		//	Партнер.Наименование 		= НаименованиеПартнера; 
		//	Партнер.НаименованиеПолное	= НаименованиеПартнераПолное;
		//	Партнер.ЮрФизЛицо 			= Перечисления.КомпанияЧастноеЛицо.Компания;
		//	Партнер.Поставщик			= Истина;
		//	Партнер.Записать();
		//КонецЕсли;
		//НаборЗаписей = РегистрыСведений.АЭС_ИсполнителиПостащикиСтек.СоздатьНаборЗаписей();
		//НаборЗаписей.Отбор.Партнер.Установить(Партнер);
		//НаборЗаписей.Прочитать();
		//Если НаборЗаписей.Количество()>0 Тогда
		//	Для Каждого  Запись из НаборЗаписей Цикл
		//		Запись.IDПартнера =ИдентификаторПартнера; 
		//	КонецЦикла;
		//Иначе
		//	Запись 				= НаборЗаписей.Добавить();
		//	Запись.Партнер		= Партнер;
		//	Запись.IDПартнера 	= ИдентификаторПартнера;
		//КонецЕсли;
		//НаборЗаписей.Записать();
		//Возврат Партнер;
	КонецЕсли;
		
	//мПартнер = 
	//стрТЗ.ИсполнительУслуг
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуЗадолженности(Команда)
	ЗаполнитьТаблицуЗадолженностиНаСервере();
	Если СуммаРаспределения>0 Тогда
		РаспределитьОплату(СуммаРаспределения);	
		ОсталосьРаспределить = СуммаРаспределения - Объект.ОсновнаяДеятельность.Итог("Сумма");
		РасчтатьСуммуДокумента();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьФормуОплаты(Команда,ТЧ)
	Если ТЧ = Неопределено Тогда
		Если Не Элементы.ГруппаСтраниц.ТекущаяСтраница.ПодчиненныеЭлементы.Найти("Товары") = Неопределено Тогда 
			ТЧ = "Товары";
		ИначеЕсли Не Элементы.ГруппаСтраниц.ТекущаяСтраница.ПодчиненныеЭлементы.Найти("СторонниеУслуги") = Неопределено Тогда
			ТЧ = "СторонниеУслуги";	
		КонецЕсли;
	КонецЕсли;
	///!!!!
	Если Не  Команда = Неопределено Тогда
		
		Если НЕ Элементы.ГруппаСтраниц.ТекущаяСтраница.ПодчиненныеЭлементы.Найти(ТЧ).КоманднаяПанель.ПодчиненныеЭлементы.Найти("НалБезНал") = Неопределено Тогда 
			Если Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.НалБезНал.Пометка Тогда 
				Пометка = Ложь;
			Иначе
				Пометка = Истина;
			КонецЕсли;
			Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.НалБезНал.Пометка = Пометка;
		Иначе
			Пометка = Ложь;
		КонецЕсли;
	Иначе
	    Пометка = Неопределено;
	КонецЕсли;
	Для Каждого СТЧ из Объект[ТЧ] Цикл
		ФормаИВидПлатежа = УстановкаФормыОплаты(СТЧ.Номенклатура, Пометка);
		Если ЗначениеЗаполнено(СТЧ.ВидОплаты) Тогда
			Если НЕ  ФормаИВидПлатежа.ВидОплаты = ПредопределенноеЗначение("Справочник.АЭС_ВидОплаты.ПустаяСсылка") и НЕ СТЧ.ВидОплаты = ФормаИВидПлатежа.ВидОплаты Тогда
				СТЧ.ВидОплаты = ФормаИВидПлатежа.ВидОплаты;
			КонецЕсли;
		Иначе
			СТЧ.ВидОплаты = ФормаИВидПлатежа.ВидОплаты;
		КонецЕсли;
		СТЧ.ПризнакСпособаРасчета = ПолучитьПризнакиСпособаРасчетаПоТоварам(СТЧ.ВидОплаты);
		ПризнакСпособаРасчетаПриИзменении(СТЧ);
		ДанныеВыбора = ПолучитьСписокДоступныхФормОплат(СТЧ.Номенклатура);
		Если ЗначениеЗаполнено(СТЧ.ФормаОплаты) Тогда
			Если НЕ ДанныеВыбора.НайтиПоЗначению(ФормаИВидПлатежа.ФормаОплаты) = Неопределено и НЕ СТЧ.ФормаОплаты = ФормаИВидПлатежа.ФормаОплаты Тогда
				СТЧ.ФормаОплаты = ФормаИВидПлатежа.ФормаОплаты;
			КонецЕсли;
		Иначе
			СТЧ.ФормаОплаты = ФормаИВидПлатежа.ФормаОплаты;
		КонецЕсли;
		СТЧ.Секция = ПолучитьНомерСекции(СТЧ.ВидОплаты, СТЧ.ФормаОплаты);
		
		Если ТЧ = "Товары"
			И (СТЧ.ВидОплаты = ПредопределенноеЗначение("Справочник.АЭС_ВидОплаты.ПродажаТовараПоДоговоруКонсигнации")
				Или СТЧ.ВидОплаты = ПредопределенноеЗначение("Справочник.АЭС_ВидОплаты.ПродажаТовараПоДоговоруКомиссии")) Тогда
			
			СТЧ.КонсигнантПринципал = ФормаИВидПлатежа.КонсигнантПринципал;
			//ПолучитьКонсигнантаПриципала();
		КонецЕсли;
			
		
	КонецЦикла;
	
	
	
	
	РасчтатьСуммуДокумента();
КонецПроцедуры

&НаСервере
Функция УстановкаФормыОплаты(Номенклатура, Признак)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	АЭС_НоменклатураПоВидамОплат.Номенклатура,
	               |	АЭС_НоменклатураПоВидамОплат.ВидОплаты,
	               |	АЭС_НоменклатураПоВидамОплат.Наличная,
	               |	АЭС_НоменклатураПоВидамОплат.ПлатежнаяКарта,
	               |	АЭС_НоменклатураПоВидамОплат.КонсигнантПринципал
	               |ИЗ
	               |	РегистрСведений.АЭС_НоменклатураПоВидамОплат КАК АЭС_НоменклатураПоВидамОплат
	               |ГДЕ
	               |	АЭС_НоменклатураПоВидамОплат.Организация = &Организация
	               |				И (АЭС_НоменклатураПоВидамОплат.Номенклатура В (&Номенклатура)
	               |			ИЛИ АЭС_НоменклатураПоВидамОплат.Номенклатура В (&Группа))";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Группа", Номенклатура.Родитель);
	Если ЗначениеЗаполнено(Объект.Заказ) И НЕ Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда 
		Если ЗначениеЗаполнено(Объект.Заказ.Склад) Тогда	
			Если Объект.Заказ.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке ИЛИ Объект.Заказ.Склад.ИспользоватьОрдернуюСхемуПриПоступлении Тогда
				Запрос.Текст = Запрос.Текст + "  И НЕ АЭС_НоменклатураПоВидамОплат.ВидОплаты = &ВидОплаты";
				Запрос.УстановитьПараметр("ВидОплаты", Справочники.АЭС_ВидОплаты.ЭлектротехническиеТоварыСобственные);
			Иначе
				Запрос.Текст = Запрос.Текст + "  И АЭС_НоменклатураПоВидамОплат.ВидОплаты = &ВидОплаты";
				Запрос.УстановитьПараметр("ВидОплаты", Справочники.АЭС_ВидОплаты.ЭлектротехническиеТоварыСобственные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество()>0 Тогда 
		Пока Выборка.Следующий() Цикл
			СтрокаТЧ = Новый Структура;
			СтрокаТЧ.Вставить("ВидОплаты", Выборка.ВидОплаты);
			Если Признак = Неопределено Тогда 
				Если Выборка.Наличная Тогда
					СтрокаТЧ.Вставить("ФормаОплаты", Перечисления.ФормыОплаты.Наличная);
				ИначеЕсли Выборка.ПлатежнаяКарта  Тогда
					СтрокаТЧ.Вставить("ФормаОплаты", Перечисления.ФормыОплаты.ПлатежнаяКарта);
				Иначе
					Сообщить("Проверьте регистр АЭС_НоменклатураПоВидамОплат по данной номенклатуре и виду оплаты");
				КонецЕсли;	
			Иначе
				Если Выборка.Наличная и не Признак Тогда
					СтрокаТЧ.Вставить("ФормаОплаты", Перечисления.ФормыОплаты.Наличная);
				ИначеЕсли Выборка.ПлатежнаяКарта и  Признак Тогда
					СтрокаТЧ.Вставить("ФормаОплаты", Перечисления.ФормыОплаты.ПлатежнаяКарта);
				Иначе
					Сообщить("Проверьте регистр АЭС_НоменклатураПоВидамОплат по данной номенклатуре и виду оплаты");
				КонецЕсли;	
			КонецЕсли;
			//ПолучитьКонсигнантаПриципала(Объект.Организация, Номенклатура)
			СтрокаТЧ.Вставить("КонсигнантПринципал", Выборка.КонсигнантПринципал);
		КонецЦикла;
	Иначе
		СтрокаТЧ = Новый Структура;
		//СтрокаТЧ.Вставить("ВидОплаты", Справочники.АЭС_ВидОплаты.Электроэнергия);
 		СтрокаТЧ.Вставить("ВидОплаты", Справочники.АЭС_ВидОплаты.ПустаяСсылка());
 		СтрокаТЧ.Вставить("ФормаОплаты", Перечисления.ФормыОплаты.Наличная);
		СтрокаТЧ.Вставить("КонсигнантПринципал", Неопределено);
	КонецЕсли;
	
	Возврат СтрокаТЧ;
		
КонецФункции

&НаСервере
Функция ПолучитьПризнакиСпособаРасчетаПоТоварам(ВидОплаты)
	Если ВидОплаты = Справочники.АЭС_ВидОплаты.УстановкаСнятиеПУ Тогда
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
	Иначе
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	КонецЕсли;
	Возврат ПризнакСпособаРасчета;
	
КонецФункции	

&НаКлиенте
Процедура ВидОплатыПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.Секция = ПолучитьНомерСекции(ТекущаяСтрока.ВидОплаты, ТекущаяСтрока.ФормаОплаты);
	ТекущаяСтрока.ПризнакСпособаРасчета = ПолучитьПризнакиСпособаРасчетаПоТоварам(ТекущаяСтрока.ВидОплаты); 
	РасчтатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Секция = ТекущаяСтрока.Секция;
	ТекущаяСтрока.Секция = ПолучитьНомерСекции(ТекущаяСтрока.ВидОплаты, ТекущаяСтрока.ФормаОплаты); 
	РасчтатьСуммуДокумента();
	Если Не Секция = ТекущаяСтрока.Секция Тогда
		ТекущаяСтрока.ДокументПродажи = ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Таблица1ВидОплатыПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ОсновнаяДеятельность.ТекущиеДанные;
	ТекущаяСтрока.Секция = ПолучитьНомерСекции(ТекущаяСтрока.ВидОплаты, ТекущаяСтрока.ФормаОплаты); 
	ТекущаяСтрока.ПризнакСпособаРасчета = ПолучитьПризнакиСпособаРасчета(ТекущаяСтрока.ПериодПлатежаПо, ТекущаяСтрока.ВидОплаты, ТекущаяСтрока.ПризнакСпособаРасчета); 
	ПризнакСпособаРасчетаПриИзменении(ТекущаяСтрока);
	УстановитьВидОплатыОсновнаяДеятельность(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяДеятельностьФормаОплатыПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ОсновнаяДеятельность.ТекущиеДанные;
	Секция = ТекущаяСтрока.Секция;
	ТекущаяСтрока.Секция = ПолучитьНомерСекции(ТекущаяСтрока.ВидОплаты, ТекущаяСтрока.ФормаОплаты); 
	РасчтатьСуммуДокумента();
	Если Не Секция = ТекущаяСтрока.Секция Тогда
		ТекущаяСтрока.ДокументПродажи = ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&Наклиенте
Процедура РасчтатьСуммуДокумента()
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма")+Объект.ОсновнаяДеятельность.Итог("Сумма") + Объект.СторонниеУслуги.Итог("Сумма");
	мСуммаНаличные = 0;
	мСуммаБезНаличные = 0;
	
	Для Каждого СТЧ Из Объект.ОсновнаяДеятельность Цикл
		Если СТЧ.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная") Тогда
			 мСуммаНаличные =  мСуммаНаличные + СТЧ.Сумма;
		 ИначеЕсли СТЧ.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") Тогда
			 мСуммаБезНаличные =  мСуммаБезНаличные + СТЧ.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СТЧ Из Объект.Товары Цикл
		Если СТЧ.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная") Тогда
			 мСуммаНаличные =  мСуммаНаличные + СТЧ.Сумма;
		 ИначеЕсли СТЧ.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") Тогда
			 мСуммаБезНаличные = мСуммаБезНаличные + СТЧ.Сумма;
		КонецЕсли;
	КонецЦикла;

	Для Каждого СТЧ Из Объект.СторонниеУслуги Цикл
		Если СТЧ.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная") Тогда
			 мСуммаНаличные =  мСуммаНаличные + СТЧ.Сумма;
		 ИначеЕсли СТЧ.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") Тогда
			 мСуммаБезНаличные = мСуммаБезНаличные + СТЧ.Сумма;
		КонецЕсли;
	КонецЦикла;

	
	Объект.СуммаНаличная = мСуммаНаличные;
	Объект.СуммаБезналичная = мСуммаБезНаличные;
	Если СуммаРаспределения>0 Тогда
		ОсталосьРаспределить = СуммаРаспределения - Объект.ОсновнаяДеятельность.Итог("Сумма");
	КонецЕсли;
	//ПроверкаСуммыОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяДеятельностьПриИзменении(Элемент)
	РассчитатьКомиссиюОснДеятельность();
	РасчтатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	РасчтатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	РасчтатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяДеятельностьПослеУдаления(Элемент)
	РасчтатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.ДокументПродажи) Тогда
		Док = Элементы.Товары.ТекущиеДанные.ДокументПродажи;
		Отказ = ПроверитьСтатусДокумента(Док);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяДеятельностьПередУдалением(Элемент, Отказ)
	Если ЗначениеЗаполнено(Элементы.ОсновнаяДеятельность.ТекущиеДанные.ДокументПродажи) Тогда
		Док = Элементы.ОсновнаяДеятельность.ТекущиеДанные.ДокументПродажи;
		Отказ = ПроверитьСтатусДокумента(Док);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьСтатусДокумента(Док)
	Если Документы.ЧекККМ.СтатусДокумента(Док) = Перечисления.СтатусыЧековККМ.Пробит Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура Таблица1СуммаПриИзменении(Элемент)
	//РасчтатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПродажаТоваровКоличествоПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.Количество;
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);	
	РасчтатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура СторонниеУслугиСуммаПриИзменении(Элемент)
	СтрокаТЧ= Элементы.СторонниеУслуги.ТекущиеДанные;
	ПроверитьКомиссиюНаКлиенте(СтрокаТЧ); 
	РасчтатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура СторонниеУслугиФормаОплатыПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.СторонниеУслуги.ТекущиеДанные;
	ТекущаяСтрока.Секция = ПолучитьНомерСекции(ТекущаяСтрока.ВидОплаты, ТекущаяСтрока.ФормаОплаты); 
	РасчтатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура СторонниеУслугиВидОплатыПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.СторонниеУслуги.ТекущиеДанные;
	ТекущаяСтрока.Секция = ПолучитьНомерСекции(ТекущаяСтрока.ВидОплаты, ТекущаяСтрока.ФормаОплаты); 
КонецПроцедуры

&НаКлиенте
Процедура СторонниеУслугиПередУдалением(Элемент, Отказ)
	Если ЗначениеЗаполнено(Элементы.СторонниеУслуги.ТекущиеДанные.ДокументПродажи) Тогда
		Док = Элементы.СторонниеУслуги.ТекущиеДанные.ДокументПродажи;
		Отказ = ПроверитьСтатусДокумента(Док);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СторонниеУслугиПослеУдаления(Элемент)
	РасчтатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяДеятельностьФормаОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.ОсновнаяДеятельность.ТекущиеДанные;
	ДанныеВыбора = ПолучитьСписокДоступныхФормОплат(ТекущаяСтрока.НомерУслуги);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДоступныхФормОплат(Значение)
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.АЭС_УслугиСТЕК") Тогда
		Номенклатура =  Значение.Номенклатура;
	Иначе
		Номенклатура =  Значение;		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	АЭС_НоменклатураПоВидамОплат.Номенклатура КАК Номенклатура,
	               |	АЭС_НоменклатураПоВидамОплат.Наличная КАК Наличная,
	               |	АЭС_НоменклатураПоВидамОплат.ПлатежнаяКарта КАК ПлатежнаяКарта,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ ВТ_Талица
	               |ИЗ
	               |	РегистрСведений.АЭС_НоменклатураПоВидамОплат КАК АЭС_НоменклатураПоВидамОплат
	               |ГДЕ
	               |	АЭС_НоменклатураПоВидамОплат.Организация = &Организация
	               |	И АЭС_НоменклатураПоВидамОплат.Номенклатура В(&Номенклатура)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	АЭС_НоменклатураПоВидамОплат.Номенклатура,
	               |	АЭС_НоменклатураПоВидамОплат.Наличная,
	               |	АЭС_НоменклатураПоВидамОплат.ПлатежнаяКарта,
	               |	2
	               |ИЗ
	               |	РегистрСведений.АЭС_НоменклатураПоВидамОплат КАК АЭС_НоменклатураПоВидамОплат
	               |ГДЕ
	               |	АЭС_НоменклатураПоВидамОплат.Организация = &Организация
	               |	И АЭС_НоменклатураПоВидамОплат.Номенклатура В(&Группа)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВТ_Талица.Номенклатура КАК Номенклатура,
	               |	ВТ_Талица.Наличная КАК Наличная,
	               |	ВТ_Талица.ПлатежнаяКарта КАК ПлатежнаяКарта
	               |ИЗ
	               |	ВТ_Талица КАК ВТ_Талица";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Группа", Номенклатура.Родитель);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	СписокФормыОплат = Новый СписокЗначений;
	Если Выборка.Количество()>0 Тогда 
		Пока Выборка.Следующий() Цикл
			Если Выборка.Наличная Тогда
				СписокФормыОплат.Добавить(Перечисления.ФормыОплаты.Наличная);
			КонецЕсли;
			Если Выборка.ПлатежнаяКарта Тогда
				СписокФормыОплат.Добавить(Перечисления.ФормыОплаты.ПлатежнаяКарта);
			КонецЕсли;			
		КонецЦикла;
	Иначе
		СписокФормыОплат.Добавить(Перечисления.ФормыОплаты.Наличная);
	КонецЕсли;
	Возврат СписокФормыОплат;
КонецФункции

&НаКлиенте
Процедура ФормаОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ДанныеВыбора = ПолучитьСписокДоступныхФормОплат(ТекущаяСтрока.Номенклатура);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СторонниеУслугиФормаОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.СторонниеУслуги.ТекущиеДанные;
	ДанныеВыбора = ПолучитьСписокДоступныхФормОплат(ТекущаяСтрока.Номенклатура);
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиСПустымиСуммамиНаСервере()
	
	МассиВКУдалению = Новый Массив;
	Для Каждого стрТЧ Из Объект.ОсновнаяДеятельность Цикл
		Если стрТЧ.Сумма = 0 Тогда
			МассиВКУдалению.Добавить(стрТЧ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Эл Из МассиВКУдалению Цикл
		Объект.ОсновнаяДеятельность.Удалить(Эл)
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокиСПустымиСуммами(Команда)
	УдалитьСтрокиСПустымиСуммамиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяДеятельностьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ОсновнаяДеятельность.ТекущиеДанные.ПериодПлатежа = НачалоМесяца(Объект.ПериодПлатежа);
		Элементы.ОсновнаяДеятельность.ТекущиеДанные.ПериодПлатежаПо = НачалоМесяца(Объект.ПериодПлатежа);
		Элементы.ОсновнаяДеятельность.ТекущиеДанные.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная");
	КонецЕсли;
	Если Копирование Тогда 
		ТекущаяСтрока = Элементы.ОсновнаяДеятельность.ТекущиеДанные;
		ТекущаяСтрока.ДокументПродажи = "";
		//ТекущаяСтрока.СтавкаНДС = "";
		ПризнакСпособаРасчетаПриИзменении(ТекущаяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяДеятельностьНомерУслугиПриИзменении(Элемент)
	СТЧ				= Элементы.ОсновнаяДеятельность.ТекущиеДанные;
	ДанныепоУслуге	= ПолучитьДанныеПоУслуге(СТЧ.НомерУслуги);
	
	мНомерУслуги 	= ДанныепоУслуге.НомерУслуги;
	Номенклатура 	= ДанныепоУслуге.Номенклатура;
	Пени 			= ДанныепоУслуге.Пени;
	СтавкаНДС		= ДанныепоУслуге.СтавкаНДС;
	УслугаФиз = ПроверитьУслугу(мНомерУслуги);
	ЮрФизЛицо = ПолучитьЗначениеРеквизита(Объект.Контрагент,"ЮрФизЛицо");
	УслугаНеКорректна = Ложь;
	Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		Если Не УслугаФиз Тогда 
			УслугаНеКорректна = Истина;
			Сообщить("Выбрана услуга для юдических лиц! Выберите услугу для физических лиц");
		КонецЕсли;
	//Иначе
	//	Если УслугаФиз Тогда
	//		УслугаНеКорректна = Истина;
	//		Сообщить("Выбрана услуга для физических лиц! Выберите услугу для юридических лиц");
	//	КонецЕсли;
	КонецЕсли;
	Если УслугаНеКорректна Тогда
		СТЧ.НомерУслуги = "";
		мНомерУслуги 	= "";
		Номенклатура 	= "";
		Пени 			= "";
		СтавкаНДС		= "";
	КонецЕсли;	
	
	СТЧ.Номенклатура = Номенклатура; 
	СТЧ.ВидОплаты 	= АЭС_Сервер.ПолучитьНастройкиПлатежейПоНомеруУслуги(Объект.Организация, мНомерУслуги, СТЧ.ПериодПлатежаПо, Пени).ВидОплаты;
	СТЧ.ПризнакСпособаРасчета = ПолучитьПризнакиСпособаРасчета(СТЧ.ПериодПлатежаПо, СТЧ.ВидОплаты, СТЧ.ПризнакСпособаРасчета);
	ДанныеВыбора = ПолучитьСписокДоступныхФормОплат(СТЧ.НомерУслуги);
	Если ЗначениеЗаполнено(СТЧ.ФормаОплаты) Тогда
		Если ДанныеВыбора.НайтиПоЗначению(СТЧ.ФормаОплаты) = Неопределено Тогда
			СТЧ.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная");
		КонецЕсли;
	Иначе
		СТЧ.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная");
	КонецЕсли;
	
	СТЧ.Секция 		= ПолучитьНомерСекции(СТЧ.ВидОплаты, СТЧ.ФормаОплаты);
	СтавкаНДС		= ДанныепоУслуге.СтавкаНДС;
	СкорректироватьСтавкуНДС(СтавкаНДС,Объект.Дата);
	ПризнакСпособаРасчетаПриИзменении(СТЧ);
	ИспользованиеХарактеристика(СТЧ);	
КонецПроцедуры

&НаКлиенте 
Функция ПроверитьУслугу(НомерУслуги)
	Попытка 
		НомерУслугиФЛ = Число(СтрЗаменить(НомерУслуги, Символы.НПП,""));
		Возврат Истина;
	Исключение 
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаКлиенте 
Процедура ИспользованиеХарактеристика (СТЧ)
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", СТЧ.Характеристика);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СТЧ, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаСервере 
Процедура СкорректироватьСтавкуНДС(СтавкаНДС, мДата)
	УчетНДСУП.СкорректироватьСтавкуНДС(СтавкаНДС, мДата);
КонецПроцедуры

&Насервере
Функция ПолучитьЗначениеРеквизита(Значение, Реквизит)
	Возврат  Значение[Реквизит];
КонецФункции

&НаСервере
Функция ПроверкаСуммыОплатыНаСервере()
	//РезультатПроверки = Новый Структура;
	//РезультатПроверки.Вставить("ВвестиДанные");
	//РезультатПроверки.Вставить("Дата");
	//РезультатПроверки.Вставить("ЕстьДанные");
	//
	//Если НЕ Объект.Контрагент = Справочники.Контрагенты.РозничныйПокупатель 
	//	и Объект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо  
	//	И (Объект.ОсновнаяДеятельность.Итог("Сумма")>=15000 
	//	ИЛИ Объект.СторонниеУслуги.Итог("Сумма")>=15000) Тогда
	//	
	//	Запрос = Новый  Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	               |	ДокументыФизическихЛицСрезПоследних.Физлицо,
	//	               |	ДокументыФизическихЛицСрезПоследних.ВидДокумента,
	//	               |	ДокументыФизическихЛицСрезПоследних.Период
	//	               |ИЗ
	//	               |	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&Дата, Физлицо = &Физлицо) КАК ДокументыФизическихЛицСрезПоследних";
	//	
	//	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	//	Запрос.УстановитьПараметр("Физлицо", Объект.Контрагент);
	//	
	//	Результат = Запрос.Выполнить();
	//	Выборка = Результат.Выбрать();
	//	Если НЕ Результат.Пустой() Тогда
	//		Если Выборка.Следующий() Тогда 
	//			РезультатПроверки.ВвестиДанные = Истина;
	//			РезультатПроверки.Дата = Выборка.Период;
	//			РезультатПроверки.ЕстьДанные = Истина;
	//		КонецЕсли;
	//	Иначе
	//		РезультатПроверки.ВвестиДанные = Истина;
	//		РезультатПроверки.ЕстьДанные = Ложь;
	//	КонецЕсли;
	//		
	//ИначеЕсли Объект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо ИЛИ Объект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
	//	РезультатПроверки.ВвестиДанные = Ложь;
	//Иначе	
	//	РезультатПроверки.ВвестиДанные = Ложь;
	//КонецЕсли;
	//Возврат РезультатПроверки;	
	ПараметрыОтбора = Новый  Структура;
	ПараметрыОтбора.Вставить("АгентскийПлатеж", Истина);
	//ПараметрыОтбора.Вставить("ФормаОплаты", Перечисления.ФормыОплаты.Наличная); 
	АгПлОсДеят =  Объект.ОсновнаяДеятельность.Выгрузить(ПараметрыОтбора);
	Если АгПлОсДеят.Количество() = 0 Тогда
		Возврат 0;
	Иначе
		Возврат АгПлОсДеят.Итог("Сумма");
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПроверкаСуммыОплаты(РежимЗаписи)
	//Результат = ПроверкаСуммыОплатыНаСервере();
	//Если Результат.ВвестиДанные Тогда
	//	ЗаписатьДанные = Истина;
	//	Если Результат.ЕстьДанные И  Формат(Результат.Дата, "ДЛФ=Д") <> Формат(ТекущаяДата(), "ДЛФ=Д") Тогда 
	//		Режим = РежимДиалогаВопрос.ДаНет;
	//		Ответ = Вопрос(НСтр("ru = 'У абонента внесены паспортные данные. Внести новые?';"), Режим, 0);
	//		Если Ответ = КодВозвратаДиалога.Нет Тогда
	//			ЗаписатьДанные = Ложь;
	//		КонецЕсли;
	//	ИначеЕсли Формат(Результат.Дата, "ДЛФ=Д") = Формат(ТекущаяДата(), "ДЛФ=Д") Тогда
	//		ЗаписатьДанные = Ложь;
	//	КонецЕсли;
	//	Если ЗаписатьДанные Тогда
	//		мПараметры = Новый Структура;
	//		мПараметры.Вставить("ФизЛицо", Объект.Контрагент);
	//		мПараметры.Вставить("ВидДокумента", ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ"));
	//		мФорма = ПолучитьФорму("РегистрСведений.ДокументыФизическихЛиц.ФормаЗаписи",,ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно);
	//		мФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца; 
	//		ЗаполнитьЗначенияСвойств(мФорма.Запись,мПараметры);
	//		мФорма.Открыть();
	//	КонецЕсли;
	//КонецЕсли;
	СуммАгПлОсДеят = ПроверкаСуммыОплатыНаСервере();
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если (Объект.АгентскийПлатеж 
			И Объект.СторонниеУслуги.Итог("Сумма") >= 15000) ИЛИ СуммАгПлОсДеят>=15000 Тогда 
			мПараметры = Новый Структура;
			мПараметры.Вставить("Документ", Объект);
			
			мФорма = ПолучитьФорму("РегистрСведений.АЭС_СписокАнкет.ФормаЗаписи",мПараметры,ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно);
			мФорма.РежимОткрытияОкна	= РежимОткрытияОкнаФормы.Независимый; 
			мФорма.ФИО					= ПолучитьЗначениеРеквизита(Объект.Контрагент, "Наименование");
			мФорма.ВидДокумента 		= ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ");
			мФорма.ДокументПродажи		= Объект.Ссылка;
			мФорма.Открыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуЧековВДополнительноНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АЭС_ПлатежиОсновнаяДеятельность.ДокументПродажи.Ссылка КАК Чек,
	|	ЖурналФискальныхОпераций.НомерЧекаККМ КАК НомерЧекаККМ,
	|	АЭС_ПлатежиОсновнаяДеятельность.ДокументПродажи.Статус КАК Статус,
	|	АЭС_ПлатежиОсновнаяДеятельность.ДокументПродажи.ФормаОплаты КАК ФормаОплаты
	|ИЗ
	|	Документ.АЭС_Платежи.ОсновнаяДеятельность КАК АЭС_ПлатежиОсновнаяДеятельность
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ЖурналФискальныхОпераций
	|		ПО АЭС_ПлатежиОсновнаяДеятельность.ДокументПродажи.Ссылка = ЖурналФискальныхОпераций.ДокументОснование
	|ГДЕ
	|	АЭС_ПлатежиОсновнаяДеятельность.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АЭС_ПлатежиТовары.ДокументПродажи.Ссылка,
	|	ЖурналФискальныхОпераций.НомерЧекаККМ,
	|	АЭС_ПлатежиТовары.ДокументПродажи.Статус,
	|	АЭС_ПлатежиТовары.ДокументПродажи.ФормаОплаты
	|ИЗ
	|	Документ.АЭС_Платежи.Товары КАК АЭС_ПлатежиТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ЖурналФискальныхОпераций
	|		ПО АЭС_ПлатежиТовары.ДокументПродажи.Ссылка = ЖурналФискальныхОпераций.ДокументОснование
	|ГДЕ
	|	АЭС_ПлатежиТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АЭС_ПлатежиСторонниеУслуги.ДокументПродажи.Ссылка,
	|	ЖурналФискальныхОпераций.НомерЧекаККМ,
	|	АЭС_ПлатежиСторонниеУслуги.ДокументПродажи.Статус,
	|	АЭС_ПлатежиСторонниеУслуги.ДокументПродажи.ФормаОплаты
	|ИЗ
	|	Документ.АЭС_Платежи.СторонниеУслуги КАК АЭС_ПлатежиСторонниеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ЖурналФискальныхОпераций
	|		ПО АЭС_ПлатежиСторонниеУслуги.ДокументПродажи.Ссылка = ЖурналФискальныхОпераций.ДокументОснование
	|ГДЕ
	|	АЭС_ПлатежиСторонниеУслуги.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Рез = Запрос.Выполнить();
	ТаблицаЧеков.Загрузить(Рез.Выгрузить());
	
	//Пока Выборка.Следующий() Цикл
	//	НовСтр = ТаблицаЧеков.Добавить();
	//	
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуЧековВДополнительно(Команда)
	ОбновитьТаблицуЧековВДополнительноНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПрисвоитьНомерЧекаККМСтатусПровестиНаСервере()
	
	Для Каждого стрТЗ Из ТаблицаЧеков Цикл
		ЧекОб = стрТЗ.Чек.ПолучитьОбъект();
		Если Ложь Тогда ЧекОб = Документы.ЧекККМ.СоздатьДокумент(); КонецЕсли;
		
		
		//ЧекОб.НомерЧекаККМ = стрТЗ.НомерЧекаККМ;
		НаборЗаписей = РегистрыСведений.ФискальныеОперации.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументОснование.Установить(стрТЗ.Чек);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			ИдентификаторЗаписи = Новый УникальныйИдентификатор;
			НоваяЗапись.ДокументОснование							= стрТЗ.Чек;
			НоваяЗапись.Дата										= стрТЗ.Чек.Дата;
			НоваяЗапись.ИдентификаторЗаписи							= ИдентификаторЗаписи;
			НоваяЗапись.ФискальныйПризнак							= "";
			НоваяЗапись.ТипДокумента								= Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек;
			НоваяЗапись.Организация									= Объект.Организация;
			НоваяЗапись.ТорговыйОбъект								= Объект.КассаККМ;
			НоваяЗапись.НомерСменыККМ								= Объект.КассоваяСмена.НомерСменыККТ;
			//НоваяЗапись.ТипОперации									= ПредопределенноеЗначение("Перечисление.ТипыОперацииКассовогоУзла.ФискальнаяОперация");
			НоваяЗапись.Сумма										= стрТЗ.Чек.СуммаДокумента;
			НоваяЗапись.ОплатаНаличные								= стрТЗ.Чек.ПолученоНаличными;
			Если ТипЗнч(стрТЗ.Чек) = Тип("ДокументСсылка.ЧекККМ") Тогда
				НоваяЗапись.ТипРасчета           					= ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
				НоваяЗапись.ОплатаПредоплата						= стрТЗ.Чек.ПодарочныеСертификаты.Итог("Сумма");
			Иначе
				НоваяЗапись.ТипРасчета            					= ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
				НоваяЗапись.ОплатаПредоплата						= 0;
			КонецЕсли;
			НоваяЗапись.НомерЧекаККМ								= стрТЗ.НомерЧекаККМ;
			НоваяЗапись.ОплатаЭлектронно							= стрТЗ.Чек.ОплатаПлатежнымиКартами.Итог("Сумма");
			НоваяЗапись.ЗаводскойНомерФН       						= Объект.КассоваяСмена.КассаККМ.СерийныйНомер;
			НоваяЗапись.РегистрационныйНомерККТ 					= Объект.КассоваяСмена.КассаККМ.РегистрационныйНомер; 
			НоваяЗапись.АдресСайтаПроверки							= "www.nalog.ru";
			НаборЗаписей.Записать();
		Иначе
			Для Каждого СНЗ Из НаборЗаписей Цикл
				СНЗ.НомерЧекаККМ									=  стрТЗ.НомерЧекаККМ;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
		ЧекОб.Статус = стрТЗ.Статус;
		ЧекОб.ФормаОплаты = стрТЗ.ФормаОплаты;
		//сначала просто записываем
		ЧекОб.ОбменДанными.Загрузка = Истина;
		ЧекОб.Записать(РежимЗаписиДокумента.Запись);
		
		//потом проводим
		ЧекОб = стрТЗ.Чек.ПолучитьОбъект();
		Если Ложь Тогда ЧекОб = Документы.ЧекККМ.СоздатьДокумент(); КонецЕсли;
		ЧекОб.Записать(РежимЗаписиДокумента.Проведение);

		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисвоитьНомерЧекаККМСтатусПровести(Команда)
	ПрисвоитьНомерЧекаККМСтатусПровестиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Таблица1ДокументПродажиОткрытие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяДеятельностьПриАктивизацииЯчейки(Элемент)
	
	//ОткрытьЗначение(
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяДеятельностьПриАктивизацииПоля(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "Таблица1ДокументПродажи" И Элемент.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДокументПродажи) Тогда
		ОткрытьФорму("Документ.ЧекККМ.ФормаОбъекта", , Элемент.ТекущиеДанные.ДокументПродажи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКонсигнантаПриципала(лОрганизация, лНоменклатура)
	
	Запрос = Новый Запрос;
	//Запрос.Текст = 
	//;
	
	//Выб  = Справочники.Контрагенты.Выбрать();
	//Выб.Следующий();
	//Возврат Выб.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура СторонниеУслугиНоменклатураПриИзменении(Элемент)
	СтрокаТЧ= Элементы.СторонниеУслуги.ТекущиеДанные;
	ФормаИВидПлатежа = УстановкаФормыОплаты(СтрокаТЧ.Номенклатура, Ложь);
	ДанныеВыбора = ПолучитьСписокДоступныхФормОплат(СтрокаТЧ.Номенклатура);
	Если ЗначениеЗаполнено(СтрокаТЧ.ФормаОплаты) Тогда
		Если ДанныеВыбора.НайтиПоЗначению(СтрокаТЧ.ФормаОплаты) = Неопределено Тогда
			СтрокаТЧ.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная");
		КонецЕсли;
	Иначе
		СтрокаТЧ.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная");
	КонецЕсли;

	
	СтрокаТЧ.ВидОплаты 		= ФормаИВидПлатежа.ВидОплаты;
	СтрокаТЧ.Секция 		= ПолучитьНомерСекции(СтрокаТЧ.ВидОплаты, СтрокаТЧ.ФормаОплаты); 
	СтавкаНДС				= ПолучитьЗначениеРеквизита(СтрокаТЧ.Номенклатура, "СтавкаНДС");
	СкорректироватьСтавкуНДС(СтавкаНДС, Объект.Дата);
	СтрокаТЧ.СтавкаНДС		= СтавкаНДС;
	ПроверитьКомиссиюНаКлиенте(СтрокаТЧ); 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.СтраницаПродажаТоваров.ТолькоПросмотр И Элемент.Имя = "Товары" Тогда
		Если Поле.Имя = "ПродажаТоваровНоменклатура" Тогда
			ОткрытьЗначение(Элемент.ТекущиеДанные.Номенклатура);
		//ИначеЕсли 	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ПроверитьКомиссиюНаКлиенте(СтрокаТЧ)
	Если СтрокаТЧ.Сумма > 0 Тогда
		ВходящиеДанные = Новый Структура;
		ВходящиеДанные.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		ВходящиеДанные.Вставить("ВидОплаты", СтрокаТЧ.ВидОплаты);
		ВходящиеДанные.Вставить("Организация", Объект.Организация);
		ВходящиеДанные.Вставить("Партнер", Объект.Партнер);		
		ВходящиеДанные.Вставить("Сумма", СтрокаТЧ.Сумма);
		ПроверитьКомиссиюНаСервере(ВходящиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьКомиссиюНаСервере(ВходящиеДанные);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	Резльтут = АЭС_Сервер.ПолучитьИформациюОКомиссии(Объект.Дата, ВходящиеДанные);
	Если НЕ Резльтут = Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Резльтут.НоменклатураКомиссии);
		Отбор.Вставить("ВидОплаты", Резльтут.ВидОплатыКомиссии);
		мСтрока = Объект.СторонниеУслуги.НайтиСтроки(Отбор);
		Если мСтрока.Количество()>0 Тогда 
			НоваяСтрока = мСтрока[0];
		Иначе
			НоваяСтрока = Объект.СторонниеУслуги.Добавить();
		КонецЕсли;
		НоваяСтрока.Номенклатура 	= Резльтут.НоменклатураКомиссии;
		НоваяСтрока.ВидОплаты 		= Резльтут.ВидОплатыКомиссии;
		НоваяСтрока.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
		НоваяСтрока.Сумма			= Резльтут.СуммаКомиссии;
		ФормаИВидПлатежа 			= УстановкаФормыОплаты(НоваяСтрока.Номенклатура, Ложь);
		НоваяСтрока.ФормаОплаты 	= ФормаИВидПлатежа.ФормаОплаты;
		НоваяСтрока.Секция 			= ПолучитьНомерСекции(НоваяСтрока.ВидОплаты, НоваяСтрока.ФормаОплаты); 
		НоваяСтрока.СтавкаНДС		= Резльтут.НоменклатураКомиссии.СтавкаНДС;
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьБезКонтроляНаСервере()
	
	//Объект.ОбменДанными.Загрузка = Истина;
	//Объект.Записать();
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ОбменДаннымиЗагрузкаИстина", Истина);
	
	ЭтотОбъект.Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьБезКонтроля(Команда)
	ЗаписатьБезКонтроляНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ОбменДаннымиЗагрузкаИстина") Тогда;
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбменДаннымиЗагрузкаИстина", Истина);
	КонецЕсли;
	
	//МИС проверим, что не будет формироваться чеков для платежных карт с суммами меньше рубля
	Если НЕ РольДоступна("АЭС_ПолныеПрава") Тогда
		Если Не Объект.Возврат Тогда			
			Если Объект.ОсновнаяДеятельность.Количество()>0 Тогда 
				СекцииОсн = Объект.ОсновнаяДеятельность.Выгрузить(,"Секция, АгентскийПлатеж, ИсполнительУслуг, ПризнакСпособаРасчета");
				СекцииОсн.Свернуть("Секция, АгентскийПлатеж, ИсполнительУслуг, ПризнакСпособаРасчета");
				Для Каждого нСекции из СекцииОсн Цикл
					Отбор = Новый  Структура;
					Отбор.Вставить("Секция",нСекции.Секция);
					Отбор.Вставить("АгентскийПлатеж", нСекции.АгентскийПлатеж);
					Отбор.Вставить("ИсполнительУслуг", нСекции.ИсполнительУслуг);
					Отбор.Вставить("ПризнакСпособаРасчета", нСекции.ПризнакСпособаРасчета);
					СтрокиТЧ = Объект.ОСновнаяДеятельность.Выгрузить(Отбор);					
					Если СтрокиТЧ.Количество()>0 Тогда 
						//МИС проверяем, что сумма всех строк, по которым будет сформирован документ >1 руб. иначе будет бить ошибку
						ОбщаяСумма = 0;
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
							Если СтрокаТЧ.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
								ОбщаяСумма = ОбщаяСумма + СтрокаТЧ.Сумма;							
							КонецЕсли;
						КонецЦикла;	
						
						Если ОбщаяСумма <1 И ОбщаяСумма >0 Тогда
							Сообщить("В документе есть оплата платежной картой на сумму меньше 1 руб!!! Такой платеж не проведет банк! Исправьте!!!");						
							Отказ = Истина;
							Возврат;					
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
				
			Если Объект.Товары.Количество()>0 Тогда 
				СекцииДоп = Объект.Товары.Выгрузить(,"Секция, ПризнакСпособаРасчета");
				СекцииДоп.Свернуть("Секция, ПризнакСпособаРасчета");
				Для Каждого нСекции из СекцииДоп Цикл
					Отбор = Новый  Структура;
					Отбор.Вставить("Секция",нСекции.Секция);
					Отбор.Вставить("ПризнакСпособаРасчета", нСекции.ПризнакСпособаРасчета);
					СтрокиТЧ = Объект.Товары.Выгрузить(Отбор);
					Если СтрокиТЧ.Количество()>0 тогда
						//МИС проверяем, что сумма всех строк, по которым будет сформирован документ >1 руб. иначе будет бить ошибку
						ОбщаяСумма = 0;
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
							Если СтрокаТЧ.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
								ОбщаяСумма = ОбщаяСумма + СтрокаТЧ.Сумма;							
							КонецЕсли;
						КонецЦикла;	
						
						Если ОбщаяСумма <1 И ОбщаяСумма >0 Тогда
							Сообщить("В документе есть оплата платежной картой на сумму меньше 1 руб!!! Такой платеж не проведет банк! Исправьте!!!");
							Отказ = Истина;
							Возврат;					
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;	
					
			Если Объект.СторонниеУслуги.Количество()>0 Тогда
				СекцииОсн = Объект.СторонниеУслуги.Выгрузить(,"Секция, ПризнакСпособаРасчета");
				СекцииОсн.Свернуть("Секция, ПризнакСпособаРасчета");
				Для Каждого нСекции из СекцииОсн Цикл
					Отбор = Новый  Структура;
					Отбор.Вставить("Секция",нСекции.Секция);
					Отбор.Вставить("ПризнакСпособаРасчета", нСекции.ПризнакСпособаРасчета);
					СтрокиТЧ = Объект.СторонниеУслуги.Выгрузить(Отбор);
					Если СтрокиТЧ.Количество()>0 тогда
						//МИС проверяем, что сумма всех строк, по которым будет сформирован документ >1 руб. иначе будет бить ошибку
						ОбщаяСумма = 0;
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
							Если СтрокаТЧ.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
								ОбщаяСумма = ОбщаяСумма + СтрокаТЧ.Сумма;							
							КонецЕсли;
						КонецЦикла;	
						
						Если ОбщаяСумма <1 И ОбщаяСумма >0 Тогда
							Сообщить("В документе есть оплата платежной картой на сумму меньше 1 руб!!! Такой платеж не проведет банк! Исправьте!!!");
							Отказ = Истина;
							Возврат;					
						КонецЕсли;

					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Поле1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = Новый Структура;
	ЗначениеОтбора.Вставить("Организация",	Объект.Организация);
	ЗначениеОтбора.Вставить("Проведен",		Истина);
	ЗначениеОтбора.Вставить("Подразделение",	ПолучитьЗначениеРеквизита(Объект.Кассир,"Подразделение"));
	Отбор = Новый Структура;
	Отбор.Вставить("Отбор", ЗначениеОтбора);
	Форма = ПолучитьФорму("Документ.ЗаказКлиента.ФормаВыбора", Отбор, ЭтаФорма);
	Форма.Открыть();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументНаОснованииЗаказа()
	Объект.Контрагент			= Объект.Заказ.Контрагент;
	//Объект.Партнер				= Объект.Заказ.Партнер;
	Объект.ЦенаВключаетНДС		= Объект.Заказ.ЦенаВключаетНДС;
	Объект.Валюта				= Объект.Заказ.Валюта;
	//Объект.Склад				= Объект.Заказ.Склад;
	Объект.НалогообложениеНДС 	= Объект.Заказ.НалогообложениеНДС;
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		Объект.Склад = Объект.КассаККМ.Склад;
	КонецЕсли;
	Для Каждого СТЧ Из Объект.Заказ.Товары Цикл
		НоваяСтрока				= Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СТЧ);
		НоваяСтрока.Продавец	= Объект.Кассир;
		НоваяСтрока.ФормаОплаты = Объект.Заказ.ФормаОплаты;
		Если Не ЗначениеЗаполнено(Объект.ВидЦены) Тогда
			Объект.ВидЦены			= СТЧ.ВидЦены;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьПодбора()
	Если ЗначениеЗаполнено(Объект.Заказ) Тогда
		Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.СтраницаПродажаТоваров.ПодчиненныеЭлементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Подбор.Доступность = Ложь;
	Иначе
		Элементы.ГруппаСтраниц.ПодчиненныеЭлементы.СтраницаПродажаТоваров.ПодчиненныеЭлементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.Подбор.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Поле1ПриИзменении(Элемент)
	ДоступностьПодбора();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если ЗначениеЗаполнено(Объект.Заказ) Тогда
		Сообщить("Документ заполнен на основании заказа клиента");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СторонниеУслугиПриИзменении(Элемент)
	РасчтатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура Поле1Очистка(Элемент, СтандартнаяОбработка)
	Объект.Контрагент = "";
	Объект.Товары.Очистить();
	РасчтатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.ДокументПродажи) Тогда
		Док = Элементы.Товары.ТекущиеДанные.ДокументПродажи;
		Отказ = ПроверитьСтатусДокумента(Док);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяДеятельностьПередНачаломИзменения(Элемент, Отказ)
	Если ЗначениеЗаполнено(Элементы.ОсновнаяДеятельность.ТекущиеДанные.ДокументПродажи) Тогда
		Док = Элементы.ОсновнаяДеятельность.ТекущиеДанные.ДокументПродажи;
		Отказ = ПроверитьСтатусДокумента(Док);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СторонниеУслугиПередНачаломИзменения(Элемент, Отказ)
	Если ЗначениеЗаполнено(Элементы.СторонниеУслуги.ТекущиеДанные.ДокументПродажи) Тогда
		Док = Элементы.СторонниеУслуги.ТекущиеДанные.ДокументПродажи;
		Отказ = ПроверитьСтатусДокумента(Док);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);
	НаборыСервер.УстановитьУсловноеОформление(ЭтаФорма, "Товары");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, "СторонниеУслугиХарактеристика", "Объект.СторонниеУслуги.ХарактеристикиИспользуются");
	НаборыСервер.УстановитьУсловноеОформление(ЭтаФорма, "СторонниеУслуги");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, "Характеристика", "Объект.ОсновнаяДеятельность.ХарактеристикиИспользуются");
	НаборыСервер.УстановитьУсловноеОформление(ЭтаФорма, "ОсновнаяДеятельность");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,СтруктураДействий);
			
	
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.СторонниеУслуги,
			Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	Если Объект.ОсновнаяДеятельность.Количество()>0 Тогда		
		Для Каждого СТЧ Из Объект.ОсновнаяДеятельность Цикл
			СТЧ.Номенклатура = СТЧ.НомерУслуги.Номенклатура;
		КонецЦикла;
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.ОсновнаяДеятельность,
				Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СернутьТаблицуЗадолженности(ТЗ)
	Результат = ТЗ.СкопироватьКолонки("НаименованиеУслугиКраткое,НаименованиеУслугиПолное, НомерУслуги, Объем, Сальдо, ИсполнительУслуг, ИсполнительУслугНаименование, ИсполнительУслугНаименованиеПолное, ПоствщикУслуг, ПоствщикУслугНаименование, ПоствщикУслугНаименованиеПолное, Пени");
	Если Результат.Колонки.Найти("ПериодС") = Неопределено Тогда
		Результат.Колонки.Добавить("ПериодС")
	КонецЕсли;
	Если Результат.Колонки.Найти("ПериодПо") = Неопределено Тогда
		Результат.Колонки.Добавить("ПериодПо")
	КонецЕсли;
	Сумма = 0;
	Объем = 0;
	Для Каждого  СТЗ Из ТЗ Цикл
		Если Результат.Количество()= 0 Тогда 
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.ПериодС								= СТЗ.МесяцДолга;
			НоваяСтрока.ПериодПо							= СТЗ.МесяцДолга;
			НоваяСтрока.НаименованиеУслугиКраткое			= СТЗ.НаименованиеУслугиКраткое;
			НоваяСтрока.НаименованиеУслугиПолное			= СТЗ.НаименованиеУслугиПолное;
			НоваяСтрока.НомерУслуги							= СТЗ.НомерУслуги;
			НоваяСтрока.Объем								= СТЗ.Объем;
			НоваяСтрока.Сальдо								= СТЗ.Сальдо;
			НоваяСтрока.ИсполнительУслуг					= СТЗ.ИсполнительУслуг;
			НоваяСтрока.ИсполнительУслугНаименование		= СТЗ.ИсполнительУслугНаименование;
			НоваяСтрока.ИсполнительУслугНаименованиеПолное	= СТЗ.ИсполнительУслугНаименованиеПолное;
			НоваяСтрока.ПоствщикУслуг						= СТЗ.ПоствщикУслуг;
			НоваяСтрока.ПоствщикУслугНаименование			= СТЗ.ПоствщикУслугНаименование;
			НоваяСтрока.ПоствщикУслугНаименованиеПолное		= СТЗ.ПоствщикУслугНаименованиеПолное;
			НоваяСтрока.Пени								= СТЗ.Пени;
		ИначеЕсли НоваяСтрока.НомерУслуги<> СТЗ.НомерУслуги ИЛИ НоваяСтрока.Пени<> СТЗ.Пени ИЛИ НачалоМесяца(ТекущаяДата()) = СТЗ.МесяцДолга Тогда
			НоваяСтрока.Объем								= Объем;
			НоваяСтрока.Сальдо								= Сумма;
			НоваяСтрока = Результат.Добавить();
			Сумма = 0;
			Объем = 0;
			НоваяСтрока.ПериодС								= СТЗ.МесяцДолга;
			НоваяСтрока.ПериодПо							= СТЗ.МесяцДолга;
			НоваяСтрока.НаименованиеУслугиКраткое			= СТЗ.НаименованиеУслугиКраткое;
			НоваяСтрока.НаименованиеУслугиПолное			= СТЗ.НаименованиеУслугиПолное;
			НоваяСтрока.НомерУслуги							= СТЗ.НомерУслуги;
			НоваяСтрока.ИсполнительУслуг					= СТЗ.ИсполнительУслуг;
			НоваяСтрока.ИсполнительУслугНаименование		= СТЗ.ИсполнительУслугНаименование;
			НоваяСтрока.ИсполнительУслугНаименованиеПолное	= СТЗ.ИсполнительУслугНаименованиеПолное;
			НоваяСтрока.ПоствщикУслуг						= СТЗ.ПоствщикУслуг;
			НоваяСтрока.ПоствщикУслугНаименование			= СТЗ.ПоствщикУслугНаименование;
			НоваяСтрока.ПоствщикУслугНаименованиеПолное		= СТЗ.ПоствщикУслугНаименованиеПолное;
			НоваяСтрока.Пени								= СТЗ.Пени;
		ИначеЕсли НоваяСтрока.ИсполнительУслуг <> СТЗ.ИсполнительУслуг ИЛИ НоваяСтрока.ПоствщикУслуг <> СТЗ.ПоствщикУслуг Тогда
			НоваяСтрока.Объем								= Объем;
			НоваяСтрока.Сальдо								= Сумма;
			НоваяСтрока = Результат.Добавить();
			Сумма = 0;
			Объем = 0;
			НоваяСтрока.ПериодС								= СТЗ.МесяцДолга;
			НоваяСтрока.ПериодПо							= СТЗ.МесяцДолга;
			НоваяСтрока.НаименованиеУслугиКраткое			= СТЗ.НаименованиеУслугиКраткое;
			НоваяСтрока.НаименованиеУслугиПолное			= СТЗ.НаименованиеУслугиПолное;
			НоваяСтрока.НомерУслуги							= СТЗ.НомерУслуги;
			НоваяСтрока.ИсполнительУслуг					= СТЗ.ИсполнительУслуг;
			НоваяСтрока.ИсполнительУслугНаименование		= СТЗ.ИсполнительУслугНаименование;
			НоваяСтрока.ИсполнительУслугНаименованиеПолное	= СТЗ.ИсполнительУслугНаименованиеПолное;
			НоваяСтрока.ПоствщикУслуг						= СТЗ.ПоствщикУслуг;
			НоваяСтрока.ПоствщикУслугНаименование			= СТЗ.ПоствщикУслугНаименование;
			НоваяСтрока.ПоствщикУслугНаименованиеПолное		= СТЗ.ПоствщикУслугНаименованиеПолное;
			НоваяСтрока.Пени								= СТЗ.Пени;
		ИначеЕсли ДобавитьМесяц(НачалоМесяца(НоваяСтрока.ПериодПо),1) < НачалоМесяца(СТЗ.МесяцДолга) Или (ДобавитьМесяц(НачалоМесяца(НоваяСтрока.ПериодПо),1)>=Дата('20190101') И ДобавитьМесяц(НачалоМесяца(НоваяСтрока.ПериодС),1)<Дата('20190101') )Тогда
			НоваяСтрока.Объем						= Объем;
			НоваяСтрока.Сальдо						= Сумма;
			НоваяСтрока = Результат.Добавить();
			Сумма = 0;
			Объем = 0;
			НоваяСтрока.ПериодС								= СТЗ.МесяцДолга;
			НоваяСтрока.ПериодПо							= СТЗ.МесяцДолга;
			НоваяСтрока.НаименованиеУслугиКраткое			= СТЗ.НаименованиеУслугиКраткое;
			НоваяСтрока.НаименованиеУслугиПолное			= СТЗ.НаименованиеУслугиПолное;
			НоваяСтрока.НомерУслуги							= СТЗ.НомерУслуги;
			НоваяСтрока.ИсполнительУслуг					= СТЗ.ИсполнительУслуг;
			НоваяСтрока.ИсполнительУслугНаименование		= СТЗ.ИсполнительУслугНаименование;
			НоваяСтрока.ИсполнительУслугНаименованиеПолное	= СТЗ.ИсполнительУслугНаименованиеПолное;
			НоваяСтрока.ПоствщикУслуг						= СТЗ.ПоствщикУслуг;
			НоваяСтрока.ПоствщикУслугНаименование			= СТЗ.ПоствщикУслугНаименование;
			НоваяСтрока.ПоствщикУслугНаименованиеПолное		= СТЗ.ПоствщикУслугНаименованиеПолное;
			НоваяСтрока.Пени								= СТЗ.Пени;
		Иначе
			НоваяСтрока.ПериодПо							= СТЗ.МесяцДолга;
			НоваяСтрока.Объем								= Объем;
			НоваяСтрока.Сальдо								= Сумма;	
		КонецЕсли;
		Объем = Объем + СТЗ.Объем;
		Сумма = Сумма + СТЗ.Сальдо;
	КонецЦикла;
	НоваяСтрока.Объем						= Объем;
	НоваяСтрока.Сальдо						= Сумма;	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПроверкаСуммыОплаты(ПараметрыЗаписи.РежимЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура Таблица1ПериодПлатежаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ОсновнаяДеятельность.ТекущиеДанные;
	ТекущаяСтрока.ПериодПлатежа = НачалоМесяца(ТекущаяСтрока.ПериодПлатежа); 
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.ПериодПлатежаПо) Или НЕ ЭтоФизЛицо(Объект.Контрагент) Тогда
		ТекущаяСтрока.ПериодПлатежаПо = НачалоМесяца(ТекущаяСтрока.ПериодПлатежа);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Услуга = Элементы.ОсновнаяДеятельность.ТекущиеДанные.НомерУслуги;
	Номенклатура = ПолучитьЗначениеРеквизита(Услуга, "Номенклатура");
	П = Новый Структура;
	Отбор = Новый Структура;
	Отбор.Вставить("Владелец", Номенклатура);
	П.Вставить("Отбор", Отбор);
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", П, Элемент);
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПоУслуге(мУслуга)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АЭС_УслугиСТЕК.НомерУслуги КАК НомерУслуги,
	               |	АЭС_УслугиСТЕК.Номенклатура КАК Номенклатура,
	               |	АЭС_УслугиСТЕК.Пени КАК Пени,
	               |	АЭС_УслугиСТЕК.Номенклатура.СтавкаНДС КАК СтавкаНДС
	               |ИЗ
	               |	Справочник.АЭС_УслугиСТЕК КАК АЭС_УслугиСТЕК
	               |ГДЕ
	               |	АЭС_УслугиСТЕК.Ссылка = &Услуга";
	
	Запрос.УстановитьПараметр("Услуга", мУслуга);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ДанныеПоУслуге = Новый Структура;
	ДанныеПоУслуге.Вставить("НомерУслуги");
	ДанныеПоУслуге.Вставить("Номенклатура");
	ДанныеПоУслуге.Вставить("Пени");		
	ДанныеПоУслуге.Вставить("СтавкаНДС");		
	
	Если Выборка.Следующий() Тогда
		ДанныеПоУслуге.Вставить("НомерУслуги",Выборка.НомерУслуги);
		ДанныеПоУслуге.Вставить("Номенклатура",Выборка.Номенклатура);
		ДанныеПоУслуге.Вставить("Пени",Выборка.Пени);		
		ДанныеПоУслуге.Вставить("СтавкаНДС",Выборка.СтавкаНДС);		
	КонецЕсли;
	Возврат ДанныеПоУслуге;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСуммуИзСальдо(Команда)
	Для Каждого СТЧ Из Объект.ОсновнаяДеятельность Цикл
		СТЧ.Сумма = СТЧ.Сальдо;
	КонецЦикла;
	РассчитатьКомиссиюОснДеятельность();
	РасчтатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура СуммаРаспределенияПриИзменении(Элемент)
	Если СуммаРаспределения>0 Тогда 
		ОсталосьРаспределить = СуммаРаспределения - Объект.ОсновнаяДеятельность.Итог("Сумма");
	Иначе
		ОсталосьРаспределить = СуммаРаспределения;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФормуОплаты(Команда)
	ДанныеПоУслугам = ПолучитьФормуОплатыПоУслугам();
	Для Каждого СТМ Из ДанныеПоУслугам Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("НомерУслуги", СТМ.НомерУслуги);
		НайденныеСтроки = Объект.ОсновнаяДеятельность.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная") И СТМ.ПлатежнаяКарта Тогда
				НайденнаяСтрока.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта");
			ИначеЕсли НайденнаяСтрока.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") И СТМ.Наличная Тогда
				НайденнаяСтрока.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная");
			Иначе
				НайденнаяСтрока.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная");
			КонецЕсли;
			НайденнаяСтрока.Секция = ПолучитьНомерСекции(НайденнаяСтрока.ВидОплаты, НайденнаяСтрока.ФормаОплаты); 
		КонецЦикла;
	КонецЦикла;
	РасчтатьСуммуДокумента();
КонецПроцедуры

&НаСервере
Функция ПолучитьФормуОплатыПоУслугам()
	СписокУслуг = Объект.ОсновнаяДеятельность.Выгрузить(,"НомерУслуги");
	СписокУслуг.Свернуть("НомерУслуги");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Услуги.НомерУслуги КАК НомерУслуги
	               |ПОМЕСТИТЬ ВТ_Услуги
	               |ИЗ
	               |	&Услуги КАК Услуги
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Услуги.НомерУслуги КАК НомерУслуги,
	               |	АЭС_УслугиСТЕК.Номенклатура КАК Номенклатура
	               |ПОМЕСТИТЬ ВТ_УслугиСНоменклатурой
	               |ИЗ
	               |	ВТ_Услуги КАК ВТ_Услуги
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АЭС_УслугиСТЕК КАК АЭС_УслугиСТЕК
	               |		ПО ВТ_Услуги.НомерУслуги = АЭС_УслугиСТЕК.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_УслугиСНоменклатурой.НомерУслуги КАК НомерУслуги,
	               |	ВЫБОР
	               |		КОГДА АЭС_НоменклатураПоВидамОплат.ВидОплаты ЕСТЬ NULL
	               |			ТОГДА АЭС_НоменклатураПоВидамОплатГруппы.Наличная
	               |		ИНАЧЕ АЭС_НоменклатураПоВидамОплат.Наличная
	               |	КОНЕЦ КАК Наличная,
	               |	ВЫБОР
	               |		КОГДА АЭС_НоменклатураПоВидамОплат.ВидОплаты ЕСТЬ NULL
	               |			ТОГДА АЭС_НоменклатураПоВидамОплатГруппы.ПлатежнаяКарта
	               |		ИНАЧЕ АЭС_НоменклатураПоВидамОплат.ПлатежнаяКарта
	               |	КОНЕЦ КАК ПлатежнаяКарта
	               |ИЗ
	               |	ВТ_УслугиСНоменклатурой КАК ВТ_УслугиСНоменклатурой
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АЭС_НоменклатураПоВидамОплат КАК АЭС_НоменклатураПоВидамОплат
	               |		ПО (ВТ_УслугиСНоменклатурой.Номенклатура = АЭС_НоменклатураПоВидамОплат.Номенклатура
	               |				И АЭС_НоменклатураПоВидамОплат.Организация = &Организация)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АЭС_НоменклатураПоВидамОплат КАК АЭС_НоменклатураПоВидамОплатГруппы
	               |		ПО (ВТ_УслугиСНоменклатурой.Номенклатура.Родитель = АЭС_НоменклатураПоВидамОплатГруппы.Номенклатура
	               |				И АЭС_НоменклатураПоВидамОплатГруппы.Организация = &Организация)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_УслугиСНоменклатурой.НомерУслуги,
	               |	ВЫБОР
	               |		КОГДА АЭС_НоменклатураПоВидамОплат.ВидОплаты ЕСТЬ NULL
	               |			ТОГДА АЭС_НоменклатураПоВидамОплатГруппы.Наличная
	               |		ИНАЧЕ АЭС_НоменклатураПоВидамОплат.Наличная
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА АЭС_НоменклатураПоВидамОплат.ВидОплаты ЕСТЬ NULL
	               |			ТОГДА АЭС_НоменклатураПоВидамОплатГруппы.ПлатежнаяКарта
	               |		ИНАЧЕ АЭС_НоменклатураПоВидамОплат.ПлатежнаяКарта
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_УслугиСНоменклатурой
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Услуги";
	
	Запрос.УстановитьПараметр("Услуги", СписокУслуг);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	МассивДанныхПоУслугам = Новый Массив;
	Пока Выборка.Следующий()Цикл 
		ДанныепоУслугам = Новый Структура;
		ДанныепоУслугам.Вставить("НомерУслуги",Выборка.НомерУслуги);
		ДанныепоУслугам.Вставить("Наличная",Выборка.Наличная);
		ДанныепоУслугам.Вставить("ПлатежнаяКарта",Выборка.ПлатежнаяКарта);
		МассивДанныхПоУслугам.Добавить(ДанныепоУслугам);
	КонецЦикла;
	Возврат МассивДанныхПоУслугам;	
КонецФункции

&НаКлиенте
Процедура СторонниеУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.СторонниеУслуги.ТекущиеДанные.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой");
	КонецЕсли;
КонецПроцедуры

&НасервереБезКонтекста
Функция ПолучитьПризнакиСпособаРасчета(ПериодПлатежаПо, ВидОплаты, ПризнакВх)
	ПризнакСпособаРасчета = Неопределено;
	Если ПериодПлатежаПо<НачалоМесяца(ТекущаяДата()) ИЛИ  
		НЕ (ВидОплаты = Справочники.АЭС_ВидОплаты.Электроэнергия_Аванс ИЛИ ВидОплаты = Справочники.АЭС_ВидОплаты.Электроэнергия) Тогда
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	Иначе
		Если ПризнакВх = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой Тогда
			ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
		Иначе
			ПризнакСпособаРасчета = ПризнакВх; 
		КонецЕсли;
	КонецЕсли;
	Возврат ПризнакСпособаРасчета;
КонецФункции

&НаКлиенте
Процедура ПризнакСпособаРасчетаПриИзменении(ТекущаяСтрока)
	Если ТекущаяСтрока.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой") Тогда 
		СтруктураДействий = Новый Структура;
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	Иначе
		ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПризнакСпособаРасчетаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПризнакСпособаРасчетаПриИзменении(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяДеятельностьПризнакСпособаРасчетаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ОсновнаяДеятельность.ТекущиеДанные;
	Если ЭтоФизЛицо(Объект.Контрагент) Тогда
		ТекущаяСтрока.ПризнакСпособаРасчета = ПолучитьПризнакиСпособаРасчета(ТекущаяСтрока.ПериодПлатежаПо, ТекущаяСтрока.ВидОплаты, ТекущаяСтрока.ПризнакСпособаРасчета);
	КонецЕсли;
	ПризнакСпособаРасчетаПриИзменении(ТекущаяСтрока);
	УстановитьВидОплатыОсновнаяДеятельность(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидОплатыОсновнаяДеятельность(ТекущаяСтрока)
	Если ТекущаяСтрока.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой") И 
			ТекущаяСтрока.ВидОплаты = ПредопределенноеЗначение("Справочник.АЭС_ВидОплаты.Электроэнергия_Аванс") Тогда 
		ТекущаяСтрока.ВидОплаты = ПредопределенноеЗначение("Справочник.АЭС_ВидОплаты.Электроэнергия");
	ИначеЕсли (ТекущаяСтрока.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная") ИЛИ 
			ТекущаяСтрока.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная")) И 
			ТекущаяСтрока.ВидОплаты = ПредопределенноеЗначение("Справочник.АЭС_ВидОплаты.Электроэнергия") Тогда 
		ТекущаяСтрока.ВидОплаты = ПредопределенноеЗначение("Справочник.АЭС_ВидОплаты.Электроэнергия_Аванс");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда 
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		ТекущаяСтрока.ДокументПродажи = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЭтоФизЛицо(Контрагент)	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.ЮрФизЛицо КАК ЮрФизЛицо
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если ВыборкаДетальныеЗаписи.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	

КонецФункции
	
Процедура РассчитатьКомиссиюОснДеятельность()
	//удалим строки с комиссией		
	Для Каждого Стр Из Объект.ОсновнаяДеятельность Цикл
		Если Стр.ВидОплаты = Справочники.АЭС_ВидОплаты.КомиссионноеВознаграждение Тогда
			Объект.ОсновнаяДеятельность.Удалить(Стр);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаКомиссия = Новый ТаблицаЗначений;
	ТаблицаКомиссия.Колонки.Добавить("Номенклатура");
	ТаблицаКомиссия.Колонки.Добавить("ВидОплаты");
	ТаблицаКомиссия.Колонки.Добавить("СуммаКомиссии", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	
	Для Каждого СтрокаТЧ из Объект.ОсновнаяДеятельность Цикл
		Если СтрокаТЧ.Сумма > 0 Тогда
			ВходящиеДанные = Новый Структура;
			ВходящиеДанные.Вставить("Номенклатура", СтрокаТЧ.НомерУслуги.Номенклатура);
			ВходящиеДанные.Вставить("ВидОплаты", СтрокаТЧ.ВидОплаты);
			ВходящиеДанные.Вставить("Организация", Объект.Организация);
			ВходящиеДанные.Вставить("Партнер", СтрокаТЧ.ИсполнительУслуг);		
			ВходящиеДанные.Вставить("Сумма", СтрокаТЧ.Сумма);
			Результат = АЭС_Сервер.ПолучитьИформациюОКомиссии(Объект.Дата, ВходящиеДанные);
			Если Не Результат = Неопределено Тогда
				НоваяКомиссия = ТаблицаКомиссия.Добавить();
				НоваяКомиссия.Номенклатура  = Результат.НоменклатураКомиссии;
				НоваяКомиссия.ВидОплаты     = Результат.ВидОплатыКомиссии;
				НоваяКомиссия.СуммаКомиссии = Результат.СуммаКомиссии;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаКомиссия.Свернуть("Номенклатура,ВидОплаты","СуммаКомиссии");
	ТаблицаКомиссия.Колонки.Добавить("НомерУслуги");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	АЭС_УслугиСТЕК.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.АЭС_УслугиСТЕК КАК АЭС_УслугиСТЕК
	               |ГДЕ
	               |	АЭС_УслугиСТЕК.Организация = &Организация
	               |	И АЭС_УслугиСТЕК.Номенклатура = &Номенклатура";
	Запрос.УстановитьПараметр("Организация",Объект.Организация);	
	
	
	Для Каждого Стр Из ТаблицаКомиссия Цикл						
		Запрос.УстановитьПараметр("Номенклатура",Стр.Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
				
		НоваяСтрока = Объект.ОсновнаяДеятельность.Добавить();
		Если Выборка.Следующий() Тогда
			НоваяСтрока.НомерУслуги = ВЫборка.ссылка;
		КонецЕсли;	
		НоваяСтрока.Номенклатура 	= Стр.Номенклатура;
		НоваяСтрока.ВидОплаты 		= Стр.ВидОплаты;
		НоваяСтрока.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
		НоваяСтрока.Сумма			= Стр.СуммаКомиссии;
		ФормаИВидПлатежа 			= УстановкаФормыОплаты(НоваяСтрока.Номенклатура, Ложь);
		НоваяСтрока.ФормаОплаты 	= ФормаИВидПлатежа.ФормаОплаты;
		НоваяСтрока.Секция 			= ПолучитьНомерСекции(НоваяСтрока.ВидОплаты, НоваяСтрока.ФормаОплаты); 
		НоваяСтрока.СтавкаНДС		= Стр.Номенклатура.СтавкаНДС;		
	КонецЦикла;
КонецПроцедуры			
	
