
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ДанныеЗаполнения.Свойство("Контрагент", Контрагент); 
		ДанныеЗаполнения.Свойство("ВидОплаты", ВидОплаты);
		ДанныеЗаполнения.Свойство("СуммаДокумента", СуммаДокумента);
		ДанныеЗаполнения.Свойство("ПериодПлатежа", ПериодПлатежа);
		ДанныеЗаполнения.Свойство("Организация", Организация);
		ДанныеЗаполнения.Свойство("КассаККМ", КассаККМ);
		ДанныеЗаполнения.Свойство("Касса", Касса);
		ДанныеЗаполнения.Свойство("КассоваяСмена", КассоваяСмена);
		ДанныеЗаполнения.Свойство("Партнер", Партнер);
		ДанныеЗаполнения.Свойство("Валюта", Валюта);
		ДанныеЗаполнения.Свойство("ВидЦены", ВидЦены);
		ДанныеЗаполнения.Свойство("ЦенаВключаетНДС", ЦенаВключаетНДС);
		ДанныеЗаполнения.Свойство("Склад", Склад);
		ДанныеЗаполнения.Свойство("НалогообложениеНДС", НалогообложениеНДС);
		ДанныеЗаполнения.Свойство("АгентскийПлатеж", АгентскийПлатеж);
		ДанныеЗаполнения.Свойство("ШтрихКод", ШтрихКод);
		ДанныеЗаполнения.Свойство("ВариантЗаполнения", ВариантЗаполнения);
		Если ДанныеЗаполнения.ШтрихКод И ДанныеЗаполнения.АгентскийПлатеж Тогда
			НовяСтрока = ЭтотОбъект.СторонниеУслуги.Добавить();
			ДанныеЗаполнения.Свойство("СуммаДокумента", НовяСтрока.Сумма);
			ДанныеЗаполнения.Свойство("Показания",	НовяСтрока.НачальныеПоказания);
			ДанныеЗаполнения.Свойство("ПериодПлатежа", НовяСтрока.ПериодПлатежа);
			Если ДанныеЗаполнения.Свойство("ПериодПлатежаПо") Тогда
				ДанныеЗаполнения.Свойство("ПериодПлатежаПо", НовяСтрока.ПериодПлатежа);
			КонецЕсли;
			ДанныеЗаполнения.Свойство("ВидДокумента", НовяСтрока.Приимечание);
			НовяСтрока.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
		ИначеЕсли ДанныеЗаполнения.ШтрихКод И ДанныеЗаполнения.Свойство("ВидДокумента") Тогда
			ДанныеЗаполнения.Свойство("ВидДокумента", ВидДокумента);	
		КонецЕсли;
		
		Если Не ДанныеЗаполнения.Товар = Неопределено Тогда
			НовяСтрока = ЭтотОбъект.Товары.Добавить();
			НовяСтрока.Номенклатура			= ДанныеЗаполнения.Товар.Номенклатура;
			НовяСтрока.Количество			= ДанныеЗаполнения.Товар.Количество;
			НовяСтрока.КоличествоУпаковок	= ДанныеЗаполнения.Товар.Количество;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Если ОбменДанными.Загрузка 
		Или ЭтотОбъект.ДополнительныеСвойства.Свойство("ОбменДаннымиЗагрузкаИстина")//будем считать, что наличия свойства достаточно для отмены контроля
		Тогда
		Возврат;
	КонецЕсли;
	ДанныеПоСкладу = ПолучитьДанныеПоСкладу(ЭтотОбъект.Склад);
	Если ДанныеПоСкладу.ИспользоватьОрдернуюСхемуПриОтгрузке Или ДанныеПоСкладу.ИспользоватьОрдернуюСхемуПриПоступлении Тогда
		Сообщить("В поле ""Склад"" выбран склад ответственного хранения");
		Отказ = Истина;
	КонецЕсли;
	Если ОсновнаяДеятельность.Количество() = 0 и Товары.Количество() = 0 и СторонниеУслуги.Количество()=0 Тогда
		Сообщить("Запрещено проведение пустого документа");
		Отказ = Истина;
	КонецЕсли;
	
	//Открытиесмены???
	
	// здесь транзакция и так активна
	// поэтому в попытке ПРОВОДИМ документы
	// в исключении - отказ
	Попытка		
		//Простите_Но_Возврат
		Если Не ЭтотОбъект.Возврат Тогда
			лПерезаписатьЭтотОбъект = Ложь;
			Если ОсновнаяДеятельность.Количество()>0 Тогда 
				СекцииОсн = ОсновнаяДеятельность.Выгрузить(,"Секция, АгентскийПлатеж, ИсполнительУслуг, ПризнакСпособаРасчета");
				СекцииОсн.Свернуть("Секция, АгентскийПлатеж, ИсполнительУслуг, ПризнакСпособаРасчета");
				Для Каждого нСекции из СекцииОсн Цикл
					Отбор = Новый  Структура;
					Отбор.Вставить("Секция",нСекции.Секция);
					Отбор.Вставить("АгентскийПлатеж", нСекции.АгентскийПлатеж);
					Отбор.Вставить("ИсполнительУслуг", нСекции.ИсполнительУслуг);
					Отбор.Вставить("ПризнакСпособаРасчета", нСекции.ПризнакСпособаРасчета);
					СтрокиТЧ = ОсновнаяДеятельность.Выгрузить(Отбор);
					Если СтрокиТЧ.Количество()>0 Тогда 
						ДокументПродажи = ПроверитьДокументПродажи(СтрокиТЧ); 
						Если ЗначениеЗаполнено(ДокументПродажи) и Найти(Строка(ДокументПродажи), "<Объект не найден> (" ) = 0  Тогда 
							Если Документы.ЧекККМ.СтатусДокумента(ДокументПродажи) = Перечисления.СтатусыЧековККМ.Пробит Тогда 
								Прервать;
							Иначе
								ДокОбъект = ДокументПродажи.ПолучитьОбъект();
								ДокОбъект.Товары.Очистить();
							КонецЕсли;
						Иначе
							ДокОбъект = Документы.ЧекККМ.СоздатьДокумент();
						КонецЕсли;
						ДокОбъект.Организация = Организация;
						ДокОбъект.КассоваяСмена = КассоваяСмена;
						ДокОбъект.Дата = Дата;
						ДокОбъект.КассаККМ = КассаККМ;
						ДокОбъект.ЦенаВключаетНДС = ЦенаВключаетНДС;
						ДокОбъект.Склад = Склад;
						ДокОбъект.Валюта = Валюта;
						ДокОбъект.ВидЦены = ВидЦены; 
						ДокОбъект.НалогообложениеНДС = НалогообложениеНДС;
						ДокОбъект.Кассир = Кассир;	
						ДокОбъект.Платеж = ЭтотОбъект.Ссылка;
						ДокОбъект.Организация = Организация;
						ДокОбъект.АгентскийПлатеж = нСекции.АгентскийПлатеж;
						мСумма = 0;
						Для Каждого СтрокаТЧ из СтрокиТЧ Цикл
							НоваяСтрока = ДокОбъект.Товары.Добавить();
							Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НомерУслуги.Номенклатура) Тогда
								Сообщить("В услуге :" + Строка(СтрокаТЧ.НомерУслуги) + ". Не заполнена номенклатура! Проведение не возможно!");
								Отказ = Истина;
							КонецЕсли;
							Если СтрокаТЧ.Сумма<0 Тогда
								Сообщить("В строке: "+СтрокаТЧ.НомерСтроки+" в тч основная деятельность введена отрицательная сумма");
								Отказ = Истина;
							КонецЕсли;
							НоваяСтрока.Номенклатура = СтрокаТЧ.НомерУслуги.Номенклатура;
							НоваяСтрока.Характеристика = СтрокаТЧ.Характеристика;
							НоваяСтрока.Количество = 1;
							НоваяСтрока.КоличествоУпаковок = 1;
							НоваяСтрока.Цена = СтрокаТЧ.Сумма;
							НоваяСтрока.Сумма = СтрокаТЧ.Сумма;
							НоваяСтрока.Продавец = Кассир;
							НоваяСтрока.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
							мСумма = мСумма + СтрокаТЧ.Сумма; 
						КонецЦикла;
						
						//Сидоров+
						//сворачиваем табчасть по основной деятельности
						ДокОбъект.Товары.Свернуть("Номенклатура, Характеристика, Продавец, СтавкаНДС", "Сумма");
						Для Каждого стрТЧ Из ДокОбъект.Товары Цикл
							стрТЧ.Количество = 1;
							стрТЧ.КоличествоУпаковок = 1;
							стрТЧ.Цена = стрТЧ.Сумма;
							СтавкаНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(стрТЧ.СтавкаНДС);
							стрТЧ.СуммаНДС = стрТЧ.Сумма-100*стрТЧ.Сумма/(100+СтавкаНДС);
						КонецЦикла;
						//Сидоров-
						
						Если СтрокаТЧ.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
							ДокОбъект.ПолученоНаличными = мСумма;
							//ИначеЕсли СтрокаТЧ.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
							//	СтрокаОплатаКартой = ДокОбъект.ОплатаПлатежнымиКартами.Добавить();
							//	СтрокаОплатаКартой.Сумма = мСумма; 
						//Иначе
						//	Сообщить("Что то пошло не так");
						КонецЕсли;
						
						ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
						НайденныеСтроки = ЭтотОбъект.ОсновнаяДеятельность.НайтиСтроки(Отбор);
						Для Каждого тчСтрока из НайденныеСтроки Цикл
							тчСтрока.ДокументПродажи = ДокОбъект.Ссылка;
							лПерезаписатьЭтотОбъект = Истина;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если Товары.Количество()>0 Тогда 
				СекцииДоп = Товары.Выгрузить(,"Секция, ПризнакСпособаРасчета");
				СекцииДоп.Свернуть("Секция, ПризнакСпособаРасчета");
				Для Каждого нСекции из СекцииДоп Цикл
					Отбор = Новый  Структура;
					Отбор.Вставить("Секция",нСекции.Секция);
					Отбор.Вставить("ПризнакСпособаРасчета", нСекции.ПризнакСпособаРасчета);
					СтрокиТЧ = Товары.Выгрузить(Отбор);
					Если СтрокиТЧ.Количество()>0 тогда
						ДокументПродажи = ПроверитьДокументПродажи(СтрокиТЧ); 
						Если ЗначениеЗаполнено(ДокументПродажи) и Найти(Строка(ДокументПродажи), "<Объект не найден> (" ) = 0 Тогда 
							Если Документы.ЧекККМ.СтатусДокумента(ДокументПродажи) = Перечисления.СтатусыЧековККМ.Пробит Тогда 
								Прервать;
							Иначе
								ДокОбъект = ДокументПродажи.ПолучитьОбъект();
								ДокОбъект.Товары.Очистить();
							КонецЕсли;
						Иначе
							ДокОбъект = Документы.ЧекККМ.СоздатьДокумент();
						КонецЕсли;
						ДокОбъект.Организация = Организация;
						ДокОбъект.КассоваяСмена = КассоваяСмена;
						ДокОбъект.Дата = Дата;
						ДокОбъект.КассаККМ = КассаККМ;
						ДокОбъект.ЦенаВключаетНДС = ЦенаВключаетНДС;
						ДокОбъект.Склад = Склад;
						ДокОбъект.Валюта = Валюта;
						Если ЗначениеЗаполнено(ВидЦены) Тогда 
							ДокОбъект.ВидЦены = ВидЦены; 
						Иначе 
							ДокОбъект.ВидЦены = Склад.РозничныйВидЦены;
						КонецЕсли;
						ДокОбъект.НалогообложениеНДС = НалогообложениеНДС;
						ДокОбъект.Кассир = Кассир;	
						ДокОбъект.Платеж = ЭтотОбъект.Ссылка;
						ДокОбъект.Организация = Организация;
						ДокОбъект.АгентскийПлатеж = Ложь;
						мСумма = 0;
						Для Каждого СтрокаТЧ из СтрокиТЧ Цикл
							Если СтрокаТЧ.Сумма<0 Тогда
								Сообщить("В строке: "+СтрокаТЧ.НомерСтроки+" в тч товары введена отрицательная сумма");
								Отказ = Истина;
							КонецЕсли;
							НоваяСтрока = ДокОбъект.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
							мСумма = мСумма + СтрокаТЧ.Сумма; 
						КонецЦикла;
						
						Если СтрокаТЧ.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
							ДокОбъект.ПолученоНаличными = мСумма;
							//ИначеЕсли СтрокаТЧ.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
							//	СтрокаОплатаКартой = ДокОбъект.ОплатаПлатежнымиКартами.Добавить();
							//	СтрокаОплатаКартой.Сумма = мСумма; 
						//Иначе
						//	Сообщить("Что то пошло не так");
						КонецЕсли;
						
						ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
						НайденныеСтроки = ЭтотОбъект.Товары.НайтиСтроки(Отбор);
						Для Каждого тчСтрока из НайденныеСтроки Цикл
							тчСтрока.ДокументПродажи = ДокОбъект.Ссылка;
							лПерезаписатьЭтотОбъект = Истина;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			
			Если СторонниеУслуги.Количество()>0 Тогда
				СекцииОсн = СторонниеУслуги.Выгрузить(,"Секция, ПризнакСпособаРасчета");
				СекцииОсн.Свернуть("Секция, ПризнакСпособаРасчета");
				Для Каждого нСекции из СекцииОсн Цикл
					Отбор = Новый  Структура;
					Отбор.Вставить("Секция",нСекции.Секция);
					Отбор.Вставить("ПризнакСпособаРасчета", нСекции.ПризнакСпособаРасчета);
					СтрокиТЧ = СторонниеУслуги.Выгрузить(Отбор);
					Если СтрокиТЧ.Количество()>0 тогда
						ДокументПродажи = ПроверитьДокументПродажи(СтрокиТЧ); 
						Если ЗначениеЗаполнено(ДокументПродажи) и Найти(Строка(ДокументПродажи), "<Объект не найден> (" ) = 0 Тогда 
							Если Документы.ЧекККМ.СтатусДокумента(ДокументПродажи) = Перечисления.СтатусыЧековККМ.Пробит Тогда 
								Прервать;
							Иначе
								ДокОбъект = ДокументПродажи.ПолучитьОбъект();
								ДокОбъект.Товары.Очистить();
							КонецЕсли;
						Иначе
							ДокОбъект = Документы.ЧекККМ.СоздатьДокумент();
						КонецЕсли;
						ДокОбъект.Организация = Организация;
						ДокОбъект.КассоваяСмена = КассоваяСмена;
						ДокОбъект.Дата = Дата;
						ДокОбъект.КассаККМ = КассаККМ;
						ДокОбъект.ЦенаВключаетНДС = ЦенаВключаетНДС;
						ДокОбъект.Склад = Склад;
						ДокОбъект.Валюта = Валюта;
						ДокОбъект.ВидЦены = ВидЦены; 
						ДокОбъект.НалогообложениеНДС = НалогообложениеНДС;
						ДокОбъект.Кассир = Кассир;	
						ДокОбъект.Платеж = ЭтотОбъект.Ссылка;
						ДокОбъект.Организация = Организация;
						Если нСекции.Секция = 8 Тогда
							ДокОбъект.АгентскийПлатеж = АгентскийПлатеж;				
						Иначе
							ДокОбъект.АгентскийПлатеж = Ложь;				
						КонецЕсли;
						мСумма = 0;
						Для Каждого СтрокаТЧ из СтрокиТЧ Цикл
							Если СтрокаТЧ.Сумма<0 Тогда
								Сообщить("В строке: "+СтрокаТЧ.НомерСтроки+" в тч сторонние услуги введена отрицательная сумма");
								Отказ = Истина;
							КонецЕсли;
							НоваяСтрока = ДокОбъект.Товары.Добавить();
							НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
							НоваяСтрока.Характеристика = СтрокаТЧ.Характеристика;
							НоваяСтрока.Количество = 1;
							НоваяСтрока.КоличествоУпаковок = 1;
							НоваяСтрока.Цена = СтрокаТЧ.Сумма;
							НоваяСтрока.Сумма = СтрокаТЧ.Сумма;
							НоваяСтрока.Продавец = Кассир;
							НоваяСтрока.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
							СтавкаНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТЧ.СтавкаНДС);
							НоваяСтрока.СуммаНДС = СтрокаТЧ.СуммаНДС;
							мСумма = мСумма + СтрокаТЧ.Сумма; 
						КонецЦикла;
						
						Если СтрокаТЧ.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
							ДокОбъект.ПолученоНаличными = мСумма;
							//ИначеЕсли СтрокаТЧ.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
							//	СтрокаОплатаКартой = ДокОбъект.ОплатаПлатежнымиКартами.Добавить();
							//	СтрокаОплатаКартой.Сумма = мСумма; 
						//Иначе
						//	Сообщить("Что то пошло не так");
						КонецЕсли;
						
						ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
						НайденныеСтроки = ЭтотОбъект.СторонниеУслуги.НайтиСтроки(Отбор);
						Для Каждого тчСтрока из НайденныеСтроки Цикл
							тчСтрока.ДокументПродажи = ДокОбъект.Ссылка;
							лПерезаписатьЭтотОбъект = Истина;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если лПерезаписатьЭтотОбъект Тогда
				ЭтотОбъект.Записать();//простите потомки				
			КонецЕсли;
		КонецЕсли;
		
		//Движение по регитру
		СфорсмроватьЗаписиПроведения("ОсновнаяДеятельность");
		СфорсмроватьЗаписиПроведения("Товары");
		СфорсмроватьЗаписиПроведения("СторонниеУслуги");
		
	Исключение
		Отказ = Истина;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ПараметрыОтбора = Новый  Структура;
	ПараметрыОтбора.Вставить("АгентскийПлатеж", Истина);
	//ПараметрыОтбора.Вставить("ФормаОплаты", Перечисления.ФормыОплаты.Наличная); 
	АгПлОсДеят =  ЭтотОбъект.ОсновнаяДеятельность.Выгрузить(ПараметрыОтбора); 
	ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	Если АгентскийПлатеж Или АгПлОсДеят.Итог("Сумма")>0 Тогда 
		Движения.АЭС_СписокПлатежей_ФМ.Прочитать();
		Если Движения.АЭС_СписокПлатежей_ФМ.Количество()>0 Тогда 
			Если ЗначениеЗаполнено(Движения.АЭС_СписокПлатежей_ФМ[Движения.АЭС_СписокПлатежей_ФМ.Количество()-1].ФизЛицо) Тогда
				ФизЛицо = Движения.АЭС_СписокПлатежей_ФМ[Движения.АЭС_СписокПлатежей_ФМ.Количество()-1].ФизЛицо;
			КонецЕсли;
			Движения.АЭС_СписокПлатежей_ФМ.Очистить();
		Иначе 
			ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
		Если СторонниеУслуги.Итог("Сумма")<> 0 Тогда
			СуммаАг = СторонниеУслуги.Итог("Сумма");
			Движение = Движения.АЭС_СписокПлатежей_ФМ.Добавить();
			Движение.Период 		= Дата;
			Движение.Регистратор	= Ссылка;
			Движение.Организация	= Организация;
			Движение.Партнер		= Партнер;
			Движение.Контрагент		= Контрагент;
			Если  ЭтотОбъект.Возврат Тогда
				Движение.Сумма			= СуммаАг*-1;
			Иначе
				Движение.Сумма			= СуммаАг;
			КонецЕсли;
			Движение.ФизЛицо		= ФизЛицо;
			Движения.АЭС_СписокПлатежей_ФМ.Записывать = Истина;
			Движения.АЭС_СписокПлатежей_ФМ.Записать(Истина);
		Иначе
			Для Каждого СТЧ из ОсновнаяДеятельность Цикл 
				Если Не СТЧ.АгентскийПлатеж Тогда
					Продолжить;
				КонецЕсли;
				Движение = Движения.АЭС_СписокПлатежей_ФМ.Добавить();
				Движение.Период 		= Дата;
				Движение.Регистратор	= Ссылка;
				Движение.Организация	= Организация;
				Движение.Партнер		= СТЧ.ИсполнительУслуг;
				Движение.Контрагент		= Контрагент;
				Если  ЭтотОбъект.Возврат Тогда
					Движение.Сумма			= СТЧ.Сумма*-1;
				Иначе
					Движение.Сумма			= СТЧ.Сумма;
				КонецЕсли;
				Движение.ФизЛицо		= ФизЛицо;
				Движения.АЭС_СписокПлатежей_ФМ.Записывать = Истина;
				Движения.АЭС_СписокПлатежей_ФМ.Записать(Истина);
			КонецЦикла;
			//СуммаАг = АгПлОсДеят.Итог("Сумма");
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	Если Не СкладыСервер.ИспользоватьСкладскиеПомещения(Склад,Дата) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Помещение");
	КонецЕсли;
	Если ОсновнаяДеятельность.Количество()>0 Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("ОсновнаяДеятельность.Характеристика");
	КонецЕсли;
	
	//!!!! ну вот пока точно не торгуем 
	//ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(
	//	Организация, Склад, Дата);
	//Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
	//	РозничныеПродажи.ПроверитьКорректностьЗаполненияАлкогольнойПродукции(
	//		Документы.ЧекККМ.ДанныеДляЕГАИС(ЭтотОбъект), ЭтотОбъект,
	//		Отказ);
	//КонецЕсли;
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	//НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
	//											НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЧекККМ),
	//											Отказ,
	//											МассивНепроверяемыхРеквизитов);
	//ПодарочныеСертификатыСервер.ПроверитьЗаполнениеПодарочныхСертификатов(ЭтотОбъект, Отказ);
	ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ЭтотОбъект, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка 
		Или ЭтотОбъект.ДополнительныеСвойства.Свойство("ОбменДаннымиЗагрузкаИстина")//будем считать, что наличия свойства достаточно для отмены контроля
		Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		//создаем документы (ЧекККМ/ПКО/РКО)
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда 
		// если хотя бы один проведен, отказ
		
	КонецЕсли;
	
	
	//проверка превышения лимта наличных расчетов по ЮЛ
	Если ЭтотОбъект.Контрагент.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ТаблицаСтатуса = АЭС_Стек.ПолучитьСтатусЛицевогоСчетаЮЛ(ЭтотОбъект.Контрагент.НомерЛС, ЭтотОбъект.Контрагент.ИНН, ЭтотОбъект.Контрагент.Партнер, Неопределено);
		Если ТаблицаСтатуса <> Неопределено Тогда
			СуммаКассовыхПлатежей = АЭС_КлиентСервер.ПолучитьСуммаКассовыхПлатежей(ТаблицаСтатуса);
		Иначе
			СуммаКассовыхПлатежей = 0;
		КонецЕсли;

		СуммаНаличныхДокумента		= ПолучитьСуммуНаличныхДокумента();
		СуммаНевыгруженныхПлатежей	= ПолучитьСуммуНаличныхНеВыгруженныхПлатежей();
		
		
		СуммаВсего = СуммаКассовыхПлатежей + СуммаНаличныхДокумента + СуммаНевыгруженныхПлатежей;
		Если АЭС_КлиентСервер.ПревышенЛимитНаличныхПлатежей(СуммаВсего) Тогда
			
			Если АЭС_Сервер.ПолучитьЗначенияСвойства(ЭтотОбъект.Организация, "КонтрольПревышенияЛимитаНаличныхПоЮЛ") = Истина Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
				
		КонецЕсли;

		
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		АЭС_Сервер.УдалениеДокументовЧекККМ(ОсновнаяДеятельность);
		АЭС_Сервер.УдалениеДокументовЧекККМ(Товары);
	КонецЕсли;
	Если НЕ Ссылка.Товары.Количество() = Товары.Количество() Тогда
		Для каждого СТЧ Из Ссылка.Товары Цикл 
			Отбор = Новый Структура;
			Отбор.Вставить("ДокументПродажи",СТЧ.ДокументПродажи);
			НайденныеСтроки = Товары.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество()=0 Тогда
				АЭС_Сервер.УдалитьЧекККМ(СТЧ.ДокументПродажи);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Ссылка.ОсновнаяДеятельность.Количество() = ОсновнаяДеятельность.Количество() Тогда
		Для каждого СТЧ Из Ссылка.ОсновнаяДеятельность Цикл 
			Отбор = Новый Структура;
			Отбор.Вставить("ДокументПродажи",СТЧ.ДокументПродажи);
			НайденныеСтроки = ОсновнаяДеятельность.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество()=0 Тогда
				АЭС_Сервер.УдалитьЧекККМ(СТЧ.ДокументПродажи);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	//МИС проверка на остатки
	Если Не ЭтотОбъект.Возврат и Не РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И Товары.Количество()> 0 Тогда
		//т.к. документ АЭС_Платежи не проводится по регистру Товары на складах, то использую старую схему контроля остатков
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СкладыДополнительныеРеквизиты.Значение КАК Склад
		               |ПОМЕСТИТЬ ВТ_Склады
		               |ИЗ
		               |	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
		               |ГДЕ
		               |	СкладыДополнительныеРеквизиты.Ссылка = &Склад
		               |	И СкладыДополнительныеРеквизиты.Свойство = &Свойство
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	&Склад
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	АЭС_ПлатежиТовары.Количество КАК Количество,
		               |	АЭС_ПлатежиТовары.Номенклатура КАК Номенклатура
		               |ПОМЕСТИТЬ ВТ_Номенклатура_Подготовка
		               |ИЗ
		               |	&ДокПлатежТовары КАК АЭС_ПлатежиТовары
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Номенклатура_Подготовка.Количество КАК Количество,
		               |	ВТ_Номенклатура_Подготовка.Номенклатура КАК Номенклатура
		               |ПОМЕСТИТЬ ВТ_Номенклатура
		               |ИЗ
		               |	ВТ_Номенклатура_Подготовка КАК ВТ_Номенклатура_Подготовка
		               |ГДЕ
		               |	ВЫРАЗИТЬ(ВТ_Номенклатура_Подготовка.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = &ТипНоменклатуры
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Номенклатура.Номенклатура КАК Номенклатура,
		               |	ВТ_Номенклатура.Количество КАК Количество,
		               |	ЕСТЬNULL(СвободныеОстаткиОстатки.ВНаличииОстаток, 0) КАК ВНаличииОстаток
		               |ИЗ
		               |	ВТ_Номенклатура КАК ВТ_Номенклатура
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
		               |				&Дата,
		               |				Склад В
		               |						(ВЫБРАТЬ
		               |							ВТ_Склады.Склад
		               |						ИЗ
		               |							ВТ_Склады)
		               |					И Номенклатура В
		               |						(ВЫБРАТЬ
		               |							ВТ_НОменклатура.Номенклатура
		               |						ИЗ
		               |							ВТ_НОменклатура)) КАК СвободныеОстаткиОстатки
		               |		ПО (СвободныеОстаткиОстатки.Номенклатура = ВТ_Номенклатура.Номенклатура)";
		Запрос.УстановитьПараметр("Склад",ЭтотОбъект.Склад);
		Запрос.УстановитьПараметр("ТипНоменклатуры",Перечисления.ТипыНоменклатуры.Товар);
		Запрос.УстановитьПараметр("ДокПлатежТовары",ЭтотОбъект.Товары.Выгрузить());
		Запрос.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","СкладОХ"));
		
		Если ЭтотОбъект.Ссылка = Документы.АЭС_Платежи.ПустаяСсылка() Тогда //это новый, еще не проведенный документ
			Запрос.УстановитьПараметр("Дата",ТекущаяДата());
		Иначе
			МассивДок = ЭтотОбъект.Товары.Выгрузить();
			МассивДок.Свернуть("ДокументПродажи");
			Если МассивДок.Количество()> 0 Тогда
				СамыйПервыйДокумент = МассивДок[0].ДокументПродажи;
				Для Инд = 1 По МассивДок.Количество()-1 Цикл
					Если ЗначениеЗаполнено(СамыйПервыйДокумент) Тогда
						Если ЗначениеЗаполнено(МассивДок[Инд].ДокументПродажи) Тогда
							Если СамыйПервыйДокумент.МоментВремени().Сравнить(МассивДок[Инд].ДокументПродажи.МоментВремени()) = 1 Тогда
								СамыйПервыйДокумент = МассивДок[Инд].ДокументПродажи;								
							КонецЕсли;
						КонецЕсли;
					Иначе
						СамыйПервыйДокумент = МассивДок[Инд].ДокументПродажи;
					КонецЕсли;						
				КонецЦикла;
			КонецЕсли;	
			Если ЗначениеЗаполнено(СамыйПервыйДокумент) Тогда
				Запрос.УстановитьПараметр("Дата",Новый Граница(СамыйПервыйДокумент.МоментВремени(),ВидГраницы.Исключая));			
			Иначе	
				Запрос.УстановитьПараметр("Дата",Новый Граница(ЭтотОбъект.Ссылка.МоментВремени(),ВидГраницы.Исключая));			
			КонецЕсли;	
		КонецЕсли;	
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ВЫборка.Количество > Выборка.ВНаличииОстаток Тогда
				Сообщить("По товару "+Выборка.номенклатура+" требуется "+Выборка.Количество+" шт., а в наличии "+Выборка.ВНаличииОстаток+ " шт. Документ не проведен!",СтатусСообщения.Важное);							
				Отказ = Истина;
			КонецЕсли
	    КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	Если Статус = Перечисления.СтатусыЧековККМ.Пробит Тогда 
		Сообщить("Платежи проведены! Отменить проведение невозможно");
		Отказ = Истина;
	КонецЕсли;
	Если не Отказ Тогда
		Для Каждого СТЧ из ОсновнаяДеятельность Цикл
			Если Не Отказ И Документы.ЧекККМ.СтатусДокумента(СТЧ.ДокументПродажи) = Перечисления.СтатусыЧековККМ.Пробит Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СТЧ Из Товары Цикл
			Если Не Отказ И Документы.ЧекККМ.СтатусДокумента(СТЧ.ДокументПродажи) = Перечисления.СтатусыЧековККМ.Пробит Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Отказ Тогда
		Сообщить("В документе имеются принятые платежи! Отменить проведение невозможно");
	КонецЕсли;
	
	Движения.АЭС_СписокПлатежей_ФМ.Очистить();
	Движения.АЭС_СписокПлатежей_ФМ.Записать(Истина);
КонецПроцедуры

Процедура СфорсмроватьЗаписиПроведения(ТЧ);
	
	//!!!! пока не делаем движения - на обсудить
	Возврат;
	
	Для Каждого СТЧ Из ЭтотОбъект[ТЧ] Цикл
		Движение = Движения.АЭС_РеестрПлатежей.Добавить();
		Движение.Период = Дата;
		Движение.Организация = Организация;
		Движение.Контрагент = Контрагент;
		Движение.КассаККМ = КассаККМ;
		Движение.Кассир = Кассир;
		//Простите_Но_Возврат
		Движение.Возврат = ЭтотОбъект.Возврат;
		Движение.ВидОплаты = СТЧ.ВидОплаты;
		Движение.ФормаОплаты = СТЧ.ФормаОплаты;
		Движение.Сумма = СТЧ.Сумма;
		Если СТЧ.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
			Движение.СуммаБезНаличная = СТЧ.Сумма;
		Иначе
			Движение.СуммаНаличная = СТЧ.Сумма;
		КонецЕсли;
		Движение.Секция = СТЧ.Секция;
		Движение.ДокументПродажи = СТЧ.ДокументПродажи;
		Если НЕ Метаданные.Документы.АЭС_Платежи.ТабличныеЧасти[ТЧ].Реквизиты.Найти("Примечание") = Неопределено тогда
				Движение.Примечание = СТЧ.Примечание;
		КонецЕсли;
	КонецЦикла;
	Движения.АЭС_РеестрПлатежей.Записывать = Истина;
	Движения.АЭС_РеестрПлатежей.Записать(Истина);
КонецПроцедуры

Функция ПроверитьДокументПродажи(ТЧ)
	Для Каждого СТЧ Из ТЧ Цикл
		Если ЗначениеЗаполнено(СТЧ.ДокументПродажи) Тогда
			Возврат СТЧ.ДокументПродажи; 
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция ПолучитьСуммуНаличныхДокумента()

	ТекСуммаНаличных = 0;

	ТекСуммаНаличных = ТекСуммаНаличных + ПолучитьСуммуНаличныхТабЧасти("ОсновнаяДеятельность");
	ТекСуммаНаличных = ТекСуммаНаличных + ПолучитьСуммуНаличныхТабЧасти("Товары");
	ТекСуммаНаличных = ТекСуммаНаличных + ПолучитьСуммуНаличныхТабЧасти("СторонниеУслуги");
	
	Возврат ТекСуммаНаличных;

КонецФункции // ПолучитьСуммуНаличныхДокумента()

Функция ПолучитьСуммуНаличныхТабЧасти(ИмяТабЧасти)

	ТекСуммаНаличных = 0;
	Для Каждого стрТЧ из ЭтотОбъект[ИмяТабЧасти] Цикл
		Если Ложь Тогда стрТЧ = ЭтотОбъект.ОсновнаяДеятельность.Добавить(); КонецЕсли;
		
		Если стрТЧ.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			ТекСуммаНаличных = ТекСуммаНаличных + стрТЧ.Сумма;
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТекСуммаНаличных;
	
КонецФункции // ПолучитьСуммуНаличныхДокумента()

Функция ПолучитьСуммуНаличныхНевыгруженныхПлатежей()

	
	Запрос = Новый Запрос;
	
	// пока делаем запрос по проведенным/пробитым сегодняшним платежам 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АЭС_ПлатежиОсновнаяДеятельность.Сумма КАК СуммаНал
	|ИЗ
	|	Документ.АЭС_Платежи.ОсновнаяДеятельность КАК АЭС_ПлатежиОсновнаяДеятельность
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Дата, ДЕНЬ) = &ТекДата
	|	И АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Статус = &Пробит
	|	И АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Проведен
	|	И АЭС_ПлатежиОсновнаяДеятельность.ФормаОплаты = &ФормаОплаты
	|	И АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент.НомерЛС = &НомерЛС
	|	И АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент.ЮрФизЛицо = &ЮрЛицо";
	
	////////////////// этот текст раскоментировать когда будет выгрузка ЮЛ в СТЕК ////////////////////////
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	АЭС_ПлатежиОсновнаяДеятельность.Сумма КАК СуммаНал
	//|ИЗ
	//|	Документ.АЭС_Платежи.ОсновнаяДеятельность КАК АЭС_ПлатежиОсновнаяДеятельность
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АЭС_ОчередьОтправкиПлатежейВСТЕК КАК АЭС_ОчередьОтправкиПлатежейВСТЕК
	//|		ПО АЭС_ПлатежиОсновнаяДеятельность.Ссылка = АЭС_ОчередьОтправкиПлатежейВСТЕК.Платеж
	//|ГДЕ
	//|	АЭС_ОчередьОтправкиПлатежейВСТЕК.Выгружать
	//|	И АЭС_ПлатежиОсновнаяДеятельность.ФормаОплаты = &ФормаОплаты
	//|	И АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент.НомерЛС = &НомерЛС
	//|	И АЭС_ПлатежиОсновнаяДеятельность.Ссылка.Контрагент.ЮрФизЛицо <> &ФизЛицо";
	
	
	Запрос.УстановитьПараметр("ТекДата", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Пробит", Перечисления.СтатусыЧековККМ.Пробит);
	Запрос.УстановитьПараметр("ФормаОплаты", Перечисления.ФормыОплаты.Наличная);
	Запрос.УстановитьПараметр("НомерЛС", ЭтотОбъект.Контрагент.НомерЛС);
	Запрос.УстановитьПараметр("ЮрЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);
	Запрос.УстановитьПараметр("ТекДата", НачалоДня(ТекущаяДата()));
	
	Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	
	Если Результат.Пустой() Тогда
		ТекСуммаНаличныхНевыгруженныхПлатежей = 0;
	Иначе
		ТекСуммаНаличныхНевыгруженныхПлатежей = Результат.Выгрузить()[0].СуммаНал;
	КонецЕсли;
	
	Возврат ТекСуммаНаличныхНевыгруженныхПлатежей;

КонецФункции // ПолучитьСуммуНаличныхНеВыгруженныхПлатежей()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Префикс = ЭтотОбъект.Организация.Префикс;
	
КонецПроцедуры

Функция ПолучитьДанныеПоСкладу(Склад)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Склады.ИспользоватьОрдернуюСхемуПриОтгрузке КАК ИспользоватьОрдернуюСхемуПриОтгрузке,
	|	Склады.ИспользоватьОрдернуюСхемуПриПоступлении КАК ИспользоватьОрдернуюСхемуПриПоступлении
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка = &Склад";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Результат = Запрос.Выполнить().Выгрузить();
	СтруктураСклада = Новый Структура;	
	Для Каждого Колонка Из Результат.Колонки Цикл
		СтруктураСклада.Вставить(Колонка.Имя);
	КонецЦикла;
	Для Каждого СТЧ ИЗ  Результат Цикл
		ЗаполнитьЗначенияСвойств(СтруктураСклада, СТЧ); 	
	КонецЦикла;
	Возврат СтруктураСклада;	
КонецФункции

